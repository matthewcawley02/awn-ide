TYPES:
  Bool                               -- Booleans
  Nat                                -- Natural numbers
  MSG                                -- Messages
  DATA                               -- Payload of messages, composed of a message type and contents
  Data                               -- Payload of messages, excluding header / message type
  AID                                -- Application identifiers                           -- see Annex B.1.2.3
  SID                                -- Software component identifiers                    -- see Annex B.1.2.3
  HID                                -- Hardware component identifiers                    -- see Annex B.1.2.3
  CID                                -- CAN IDs                                           -- see Annex B.1.2.3
  MT                                 -- Message types, a subset of CID                    -- see Annex B.1.2.3
  TX                                 -- TX buffer identifiers                             -- see Annex B.5.1
  BUFFER = TX -> MSG                 -- Array of CAN messages stored in TX buffers        -- see Annex B.2.1
  STORE = AID -> MT x Nat x Data     -- Store of received fragments from applications     -- see Annex B.4.1
  PRIO = CID -> MSG                  -- Priority queue; array of CAN messages             -- see Annex B.5.1
  TX_CID = TX -> CID x Bool          -- Array of CAN IDs in TX buffers                    -- see Annex B.5.1
  IP = SID                           -- Destination addresses of messages

VARIABLES:
  Bool       abort, suc
  Nat        no
  Data       data, ndata
  MSG        msg
  AID        aid
  HID        H
  CID        bid, cid
  MT         mt, nmt
  TX         tid, wid
  [MSG]      msgs
  BUFFER     buffer
  STORE      store
  PRIO       prio
  TX_CID     txs


CONSTANTS:
  Bool       false, true
  DATA       failure,success    -- Acknowledgements for application layer    -- Process 7, Lines 6 and 10.
  Data       eps                -- Empty data string                         -- see Annex B.3.1
  Nat        0, 1
  MSG        bot_msg            -- Absence of a message                      -- see Annex B.2.1
  CID        bot_cid            -- Undefined CAN ID                          -- see Annex B.5.1
  MT         bot_mt             -- Undefined message type                    -- see Annex B.3.1
  [MSG]      emptyList          -- Empty message queue                       -- see Annex B.2.1
  IP         bus                -- Dummy destination address for messages from application layer


FUNCTIONS:
  C:          HID -> SID                -- Transmitting CAN driver for hardware component                 -- see Annex B.2.1
  M:          HID -> SID                -- Multiplexer for hardware component                             -- see Annex B.2.1
  R:          HID -> SID                -- Reassembly protocol for hardware component                     -- see Annex B.2.1
  ack:        Bool -> MSG               -- Acknowledgement from fragmentation protocol to multiplexer     -- see Annex B.1.3
  append:     MSG x [MSG] -> [MSG]      -- Appends a new element to a queue                               -- see Annex B.2.1
  append8:    Data x Data -> Data       -- Concatenates data strings                                      -- see Annex B.4.1
  best:       BUFFER +-> TX             -- Returns the TX buffer containing the best CAN message          -- see Annex B.2.1
  can:        CID x Data -> MSG         -- CAN message with identifier and payload                        -- see Annex B.1.3
  cancel:     MSG                       -- Cancellation message                                           -- see Annex B.1.3
  cancel:     CID -> MSG                -- Cancellation message from specific CAN ID                      -- see Annex B.1.3
  canid:      MT x Nat +-> CID          -- Returns a CAN ID for a message type and fragment counter       -- see Annex B.1.2
  contents:   STORE x AID -> Data       -- Content of stored messages from given application              -- see Annex B.4.1
  frag:       CID -> SID                -- Gives name of fragmentation protocol handling a message        -- see Annex B.5.1
  fragments:  MT -> Nat                 -- Number of CAN messages into which a message is split           -- see Annex B.1.4.3
  getWorstTX: TX_CID +-> TX             -- Returns TX buffer with least urgent message                    -- see Annex B.5.1
  head:       [MSG] +-> MSG             -- Returns the oldest element in a queue                          -- see Annex B.2.1
  head8:      Data -> Data              -- Takes the first 8 bytes from a data stream                     -- see Annex B.3.1
  lastfrag:   STORE x AID -> Nat        -- Fragment number of last stored message from given application  -- see Annex B.4.1
  msgd:       TX x MSG -> MSG           -- Wrapper to add TX identifier to message                        -- see Annex B.1.3
  mtype:      STORE x AID -> MT         -- Message type of last stored message from given application     -- see Annex B.4.1
  n_best:     PRIO -> Pow(CID)          -- Returns n best messages from priority queue, where n=|TX|      -- see Annex B.5.1
  newpkt:     DATA x IP -> MSG          -- Creates application-layer message                              -- see Annex B.1.3
  newtask:    PRIO x TX_CID -> CID      -- Selects most urgent message from priority queue not in TX      -- see Annex B.5.1
  pkt:        MT x Data -> DATA         -- Create data packet for application layer                       -- see Annex B.1.3
  rec:        CID -> Pow(SID)           -- Set of possible receivers of a message                         -- see Annex B.1.4.2
  sender:     MT -> AID                 -- Determines sender of a CAN message                             -- see Annex B.1.4.1
  tail:       [MSG] +-> [MSG]           -- Removes the oldest element from a queue                        -- see Annex B.2.1
  tail8:      Data -> Data              -- Removes the first 8 bytes from a data stream                   -- see Annex B.3.1
  tx_abort:   TX x TX_CID +-> Bool      -- Signals whether cancellation signal was sent to TX buffer      -- see Annex B.5.1
  tx_cid:     TX x TX_CID +-> CID       -- Distils CAN ID of message in TX buffer                         -- see Annex B.5.1
  + :         Nat x Nat -> Nat          -- Standard addition on numbers

-- NOTATION
-- "->"         total function
-- "+->"        partial function (syntax taken from B and Z)
-- "x"          cross product
-- "Pow(Type)"  powerset over type Type
-- "[Type]"     lists of type Type

-- DEFAULT FUNCTIONS
--  !    :           Bool -> Bool                  -- negation
--  &    :           Bool x Bool -> Bool           -- conjunction
--  |    :           Bool x Bool -> Bool           -- disjunction
--  ->   :           Bool x Bool -> Bool           -- implication
--  <->  :           Bool x Bool -> Bool           -- bi-implication
--  =    :           Type x Type -> Bool           -- equality for type Type
-- !=    :           Type x Type -> Bool           -- inequality
-- isElem:           Type x Pow(Type) -> Bool      -- is an element of

-- DEFAULT VARIABLE
-- Bool false, true
