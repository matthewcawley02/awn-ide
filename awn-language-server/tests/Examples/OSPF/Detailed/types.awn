TYPES:
  Bool                 -- Boolean
  Nat                  -- Natural numbers
  TIME                 -- Timestamps                                                                            -- see Annex C and B.1.1
  MSG                  -- Messages                                                                              -- see Annex C and B.1.1
  IP                   -- Node identifiers                                                                      -- see Annex C and B.1.1
  NS                   -- Neighbour states, namely  Init | 2Way | ExStart | Exchange | Loading | Full           -- see Annex C.1.1
  SQN                  -- Sequence numbers                                                                      -- see Annex C.1.1
  LSAHDR = IP x TIME                                                           -- LSA headers                   -- see Annex C.1 and B.1.2
  LSA = IP x TIME x Pow(IP)                                                    -- Router-LSAs                   -- see Annex C.1 and B.1.2
  LSDB = IP +-> TIME x Pow(IP)                                                 -- Link state databases          -- see Annex C.1 and B.1.3
  NBR  = IP x NS x TIME x SQN x TIME x Pow(LSAHDR) x TIME x LSDB x TIME        -- Neighbour Structures          -— see Annex C.1.1
  NBRS = IP +-> TIME                                                           -- Neighbour Lists               -— see Annex C.1.1

VARIABLES:
  MSG          msg
  IP           ip,nip,sip
  TIME         now,hello_t,hello_intvl,refresh_intvl,rtdead_intvl,rxmt_intvl
  LSA          lsa,lsa0
  LSAHDR       lsahdr
  LSDB         lsdb,lsas,rxmts
  NS           ns
  SQN          ddsqn,sqn
  NBR          nbr
  NBRS         nbrs
  Pow(IP)      ips
  Pow(LSAHDR)  lsa_hdrs
  [LSAHDR]     reqs
  [MSG]        msgs

CONSTANTS:
  LSDB       emptySet                     -- Empty link state database          -- Process 15, Lines 7 and 9
  NS         Init,2Way,ExStart,           -- Phases of adjacency establishment  -- see Annex C.1.1
             Exchange,Loading,Full
  [MSG]      emptyList                    -- Empty message queue                -- Process 17, Lines 3

FUNCTIONS:
  ack:        Pow(LSAHDR) x IP -> MSG                  -- Create an acknowledge message                         -- see Annex C.1.2
  addREQS:    NBRS x IP x LSDB x Pow(LSAHDR) +-> NBRS  -- Added LSA headers in the request list of an entry     -- see Annex C.1.3
  adj:        IP x IP -> Bool                          -- Check whether two nodes should establish adjacency    -- see Annex C.1.3
  append:     MSG x [MSG] -> [MSG]                     -- Appends a new element to a queue                      -- Process 17, Lines 2 and 8
  cleanREQS:  NBRS x IP x LSDB +-> NBRS                -- Remove LSA headers from the request list of an entry  -- see Annex C.1.3
  cleanRXMTS: NBRS x IP x Pow(LSAHDR) +-> NBRS         -- Remove LSAs from the retransmission list of an entry  -- see Annex C.1.3
  deadNBRS:   NBARS x TIME -> NBRS                     -- Returns a set of inactive neighbours                  -- see Annex C.1.3
  dbd:        Pow(LSAHDR) x IP x Bool x IP -> MSG      -- Create a DBD message                                  -- see Annex C.1.2
  ddNIP:      NBRS x TIME x IP +-> IP                  -- Return an IP needing retransmitting DBD messages      -- see Annex C.1.3
  floodNIPS:  NBRS -> Pow(IP)                          -- Return a set of IPs for flooding messages             -- see Annex C.1.3
  getDDSQN:   NBRS x IP +-> SQN                        -- Return the DD sequence number of an entry             -- see Annex C.1.3
  getNBR:     NBRS x IP +-> NBR                        -- Return a neighbour structure entry                    -- see Annex C.1.3
  getNS:      NBRS x IP +-> NS                         -- Return the neighbour state of an entry                -- see Annex C.1.3
  getREQS:    NBRS x IP +-> [LSAHDR]                   -- Return the request list of an entry                   -- see Annex C.1.3
  getRXMTS:   NBRS x IP +-> LSDB                       -- Return the retransmission list of an entry            -- see Annex C.1.3
  genDBD:     NBRS x LSDB x IP x IP +-> MSG            -- Generate the DBD message needed                       -- see Annex C.1.3
  genHELLO:   NBRS x IP -> MSG                         -- Generate the HELLO message needed                     -- see Annex C.1.3
  genRXMT:    NBRS x IP x IP +-> MSG                   -- Generate the LSU message needed                       -- see Annex C.1.3
  head:       [MSG] +-> MSG                            -- Returns the oldest element in a queue                 -- Process 17, Lines 6
  hello:      Pow(IP) x IP -> MSG                      -- Create a HELLO message                                -- see Annex C.1.2
  hdr:        LSA -> LSAHDR                            -- Returns the header of an a LSA                        -- see Annex C.1 and B.1.2
  incDDSQN:   NBRS x IP -> NBRS                        -- Increment the DD sequence number of an entry          -- see Annex C.1.3
  initNBR:    NBRS x IP x NS -> NBRS                   -- Initialise a neighbour structure entry                -- see Annex C.1.3
  install:    LSDB x LSDB -> LSDB                      -- Update a nodes' LSDB with a given set of LSAs         -- see Annex C.1.3
  newLSA:     IP x TIME x NBRS -> NBRS                 -- Generate a new LSA                                    -- see Annex C.1.3
  newNBR:     NBRS x IP +-> NBRS                       -- Insert a new neighbour structure                      -- see Annex C.1.3
  nbrExist:   NBRS x IP -> Bool                        -- Check existence of a neighbour structure entry        -- see Annex C.1.3
  req:        LSAHDR x IP -> MSG                       -- Create an LSR message                                 -- see Annex C.1.2
  reqNIP:     NBRS x TIME +-> IP                       -- Return an IP needing retransmitting request messages  -- see Annex C.1.3
  rxmtNIP:    NBRS x TIME +-> IP                       -- Return an IP needing retransmitting upd messages      -- see Annex C.1.3
  select:     Pow(LSAHDR) +-> LSAHDR                   -- Select an element from a set                          -- Process 8, Line 32
  setDDSQN:   NBRS x IP x SQN -> NBRS                  -- Update the DD sequence number of an entry             -- see Annex C.1.3
  setDDT:     NBRS x IP x TIME -> NBRS                 -- Update the DD timer of an entry                       -- see Annex C.1.3
  setINACTT:  NBRS x IP x TIME -> NBRS                 -- Update the inactivity timer of an entry               -- see Annex C.1.3
  setNS:      NBRS x IP x NS -> NBRS                   -- Update the neighbour state of an entry                -- see Annex C.1.3
  setREQS:    NBRS x IP x Pow(LSAHDR) -> NBRS          -- Update the request list of an entry                   -- see Annex C.1.3
  setREQT:    NBRS x IP x TIME -> NBRS                 -- Update the request timer of an entry                  -- see Annex C.1.3
  setRXMTS:   NBRS x IP x LSDB -> NBRS                 -- Update the retransmission list of an entry            -- see Annex C.1.3
  setRXMTT:   NBRS x IP x TIME -> NBRS                 -- Update the retransmission timer of an entry           -- see Annex C.1.3
  sndmsg:     MSG x Pow(IP) -> MSG                     -- Create an outgoing message                            -- see Annex C.1.2
  tail:       [MSG] +-> [MSG]                          -- Removes the oldest element from a queue               -- Process 17, Lines 6
  upd:        LSDB x IP -> MSG                         -- Create an LSU message                                 -- see Annex C.1.2
  updRX:      NBRS x LSDB -> NBR                       -- Install LSSAs in given neighbour structure            -- see Annex C.1.3
  updRXMTS:   NBRS x LSDB -> NBRS                      -- Add LSAs in the request list of all entries           -- see Annex C.1.3
  <= :         LSAHDR x LSAHDR -> Bool
  pi_1:        NBR -> IP
  >= :         TIME x TIME -> Bool
  + :          TIME x TIME -> TIME
  - :          TIME x TIME -> TIME
  - :          NBRS x NBRS -> NBRS       -- Set-theoretic difference on NBRS
  + :          SQN x SQN -> SQN
  < :          SQN x SQN -> Bool
  <= :         SQN x SQN -> Bool
  >= :         NS x NS -> Bool
  < :          NS x NS -> Bool
  < :          IP x IP -> Bool

-- NOTATION
-- "->"         total function
-- "+->"        partial function (syntax taken from B and Z)
-- "x"          cross product
-- "Pow(Type)"  powerset over type Type
-- "[Type]"     lists of type Type

-- DEFAULT FUNCTION
--  !    :           Bool -> Bool                  -- negation
--  &    :           Bool x Bool -> Bool           -- conjunction
--  |    :           Bool x Bool -> Bool           -- disjunction
--  ->   :           Bool x Bool -> Bool           -- implication
--  <->  :           Bool x Bool -> Bool           -- bi-implication
--  =    :           Type x Type -> Bool           -- equality for type Type
-- !=    :           Type x Type -> Bool           -- inequality
-- isElem:           Type x Pow(Type) -> Bool      -- is an element of
