include types.awn

proc PROCESS_TC(sigma, Gamma, msg) :=
  [ oip(pkt) = ip ]
       OLSR(sigma, Gamma)
  +
  [ oip(pkt) != ip & forall lt. (isElem(lt,ls) -> (L_oip(lt) != sip(pkt) | L_status(lt, now) != SYMMETRIC)) ]
       FORWARD_TC(sigma, Gamma, msg)
  +
  [ oip(pkt) != ip ]
     [ exists p. (isElem(p,ps) & P_oip(p) = oip(pkt) & P_sqn(p) = sqn(pkt)) ]
          FORWARD_TC(sigma, Gamma, msg)
     +
     [ !(exists p. (isElem(p,ps) & P_oip(p) = oip(pkt) & P_sqn(p) = sqn(pkt))) ]
          [[ ps := addProcessedTuple(ps, oip(pkt), sqn(pkt)) ]]
               [ exists ar. (isElem(ar,arrs) & AR_oip(ar) = oip(pkt) & AR_sqn(ar) > ansn(pkt)) ]
                    FORWARD_TC(sigma, Gamma, msg)
               +
               [ !(exists ar. (isElem(ar,arrs) & AR_oip(ar) = oip(pkt) & AR_sqn(ar) > ansn(pkt))) ]
                    [[ arrs := updateAdvertisingRouters(arrs, oip(pkt), ansn(pkt), vtime(pkt), now) ]]
                    [[ rts :=  updateRouterTopology(ip, rts, oip(pkt), vtime(pkt), dests(pkt), now) ]]
                    FORWARD_TC(sigma, Gamma, msg)
                    