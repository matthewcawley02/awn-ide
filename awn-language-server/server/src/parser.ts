/* AutoGenerated Code, changes may be overwritten
* INPUT GRAMMAR:
* //series of blocks, any whitespace is allowed between blocks
* AWN := ws {Block ws}* $
* //for each entry in a block, optional spacing before, and each entry must be separated by a linebreak
* //the block must also end in a linebreak (meaning you need an extra line at the end of the document currently)
* Block :=
* 	  'INCLUDES:' sp? Include {lb sp? Include}* lb
* 	| 'include' sp? Include lb
* 	| 'TYPES:' sp? Type {lb sp? Type}* lb
* 	| 'VARIABLES:' sp? ConVar {lb sp? ConVar}* lb
* 	| 'CONSTANTS:' sp? ConVar {lb sp? ConVar}* lb
* 	| 'FUNCTIONS:' sp? Function {lb sp? Function}* lb
* 	| 'PROCESSES:' sp? Process {lb sp? Process}* lb
* 	| 'proc' sp? Process lb
* Include := Name // could change this later to specifically be a filepath
* Type := TypeName {sp '\=' sp TE}?
* ConVar :=
* 	  TE sp Name {',' Name}*
* 	| Name ':' TE
* Function :=
* 	  Name ':' sp TE lb
* 	| Infix ':' sp BTE lb
* Process :=
* 	  Name '\(' Name? {',' Name}* '\)' ':=' lb sp? SPE
* 	| Name ':=' SPE
* //============
* // TYPE EXPRESSIONS
* //============
* TE :=
* 	  TypeName
* 	| TE {'x' TE}*
* 	| TE '-\>' TE
* 	| TE '\+->' TE
* 	| 'Pow' '\(' TE '\)'
* 	| '\[' TE '\]'
* 	| '\(' TE '\)'
* BTE :=
* 	  BTE_AUX 'x' BTE_AUX '->' TE
* 	| BTE_AUX 'x' BTE_AUX '\+->' TE
* BTE_AUX :=
* 	  TypeName
* 	| '\(' TE '\)'
* 	| 'Pow' '\(' TE '\)'
* 	| '\[' TE '\]'
* //==================
* // SP EXPRESSIONS
* //==================
* SPE :=
* 	  Name '\(' DE? {',' DE}+ '\)'
* 	| Name
* 	| '\[' DE '\]' SPE
* 	| '\[\[' Name {'\[' DE '\]' }* ':=' DE '\]\]' lb SPE
* 	| SPE lb '\+' SPE
* 	| 'unicast' '\(' DE ',' DE '\)' '.' SPE lb '>' SPE
* 	| 'broadcast' '\(' DE '\)' '.' lb SPE
* 	| 'groupcast' '\(' DE ',' DE '\)' '.' lb SPE
* 	| 'send' '\(' DE '\)' '.' lb SPE
* 	| 'deliver' '\(' DE '\)' '.' lb SPE
* 	| 'receive' '\(' Name { '\[' DE '\]' }* '\)' '.' lb SPE
* 	| '\(' SPE '\)'
* //===============
* // DATA EXPRESSIONS
* //===============
* //currently have not implemented the "DB brack" ones
* DE :=
* 	  Name
* 	| DE sp DE
* 	| DE {',' DE}+
* 	| '{' DE '}'
* 	| '{' Name '|' DE '}'
* 	| '{' '\(' Name ',' DE '\)' '|' DE '}'
* 	| 'lambda' Name '.' sp DE
* 	| 'forall' Name '.' sp DE
* 	| 'exists' Name '.' sp DE
* 	| DE '->' DE
* 	| DE '<->' DE
* 	| DE '&' DE
* 	| DE '|' DE
* 	| DE '=' DE
* 	| DE '!=' DE
* 	| DE '>=' DE
* 	| DE '<=' DE
* 	| DE '>' DE
* 	| DE '<' DE
* 	| DE Infix DE
* 	| '\(' DE '\)'
* //=============
* //  BASIC
* //=============
* // In the original grammar, some checking (through RATS functions) is done to differentiate
* // between different kinds of Infix, and different kinds of Name. Currently, I have all infixes
* // as 'Infix', and for Names have 'Name' and 'TypeName', which are currenlty identical. The
* // grammar uses them for different things, so I'll keep them separate to make things easier later
* // when I am hopefully able to split them up.
* TypeName := Name
* Name := NameString | '\!' | '\[\]'
* NameString := {NameChar* '.' NameString} | NameChar+
* NameChar := '[a-zA-Z0-9]' //simplified for now
* Infix := '[\*\+-\:<\=>\!\&|\\]+' //Currently "InfixOps"
* ws := {sp | lb}* 						//any whitespace
* sp := '\s+'								//spacing on a line
* lb := {'\n' | '\r\n'}+					//linebreak
*/
type Nullable<T> = T | null;
type $$RuleType<T> = () => Nullable<T>;
export interface ASTNodeIntf {
    kind: ASTKinds;
}
export enum ASTKinds {
    AWN = "AWN",
    AWN_$0 = "AWN_$0",
    Block_1 = "Block_1",
    Block_2 = "Block_2",
    Block_3 = "Block_3",
    Block_4 = "Block_4",
    Block_5 = "Block_5",
    Block_6 = "Block_6",
    Block_7 = "Block_7",
    Block_8 = "Block_8",
    Block_$0 = "Block_$0",
    Block_$1 = "Block_$1",
    Block_$2 = "Block_$2",
    Block_$3 = "Block_$3",
    Block_$4 = "Block_$4",
    Block_$5 = "Block_$5",
    Include = "Include",
    Type = "Type",
    Type_$0 = "Type_$0",
    ConVar_1 = "ConVar_1",
    ConVar_2 = "ConVar_2",
    ConVar_$0 = "ConVar_$0",
    Function_1 = "Function_1",
    Function_2 = "Function_2",
    Process_1 = "Process_1",
    Process_2 = "Process_2",
    Process_$0 = "Process_$0",
    TE_1 = "TE_1",
    TE_2 = "TE_2",
    TE_3 = "TE_3",
    TE_4 = "TE_4",
    TE_5 = "TE_5",
    TE_6 = "TE_6",
    TE_7 = "TE_7",
    TE_$0 = "TE_$0",
    BTE_1 = "BTE_1",
    BTE_2 = "BTE_2",
    BTE_AUX_1 = "BTE_AUX_1",
    BTE_AUX_2 = "BTE_AUX_2",
    BTE_AUX_3 = "BTE_AUX_3",
    BTE_AUX_4 = "BTE_AUX_4",
    SPE_1 = "SPE_1",
    SPE_2 = "SPE_2",
    SPE_3 = "SPE_3",
    SPE_4 = "SPE_4",
    SPE_5 = "SPE_5",
    SPE_6 = "SPE_6",
    SPE_7 = "SPE_7",
    SPE_8 = "SPE_8",
    SPE_9 = "SPE_9",
    SPE_10 = "SPE_10",
    SPE_11 = "SPE_11",
    SPE_12 = "SPE_12",
    SPE_$0 = "SPE_$0",
    SPE_$1 = "SPE_$1",
    SPE_$2 = "SPE_$2",
    DE_1 = "DE_1",
    DE_2 = "DE_2",
    DE_3 = "DE_3",
    DE_4 = "DE_4",
    DE_5 = "DE_5",
    DE_6 = "DE_6",
    DE_7 = "DE_7",
    DE_8 = "DE_8",
    DE_9 = "DE_9",
    DE_10 = "DE_10",
    DE_11 = "DE_11",
    DE_12 = "DE_12",
    DE_13 = "DE_13",
    DE_14 = "DE_14",
    DE_15 = "DE_15",
    DE_16 = "DE_16",
    DE_17 = "DE_17",
    DE_18 = "DE_18",
    DE_19 = "DE_19",
    DE_20 = "DE_20",
    DE_21 = "DE_21",
    DE_$0 = "DE_$0",
    TypeName = "TypeName",
    Name_1 = "Name_1",
    Name_2 = "Name_2",
    Name_3 = "Name_3",
    NameString_1 = "NameString_1",
    NameString_2 = "NameString_2",
    NameString_$0 = "NameString_$0",
    NameChar = "NameChar",
    Infix = "Infix",
    ws = "ws",
    ws_$0_1 = "ws_$0_1",
    ws_$0_2 = "ws_$0_2",
    sp = "sp",
    lb = "lb",
    lb_$0_1 = "lb_$0_1",
    lb_$0_2 = "lb_$0_2",
    $EOF = "$EOF",
}
export interface AWN {
    kind: ASTKinds.AWN;
}
export interface AWN_$0 {
    kind: ASTKinds.AWN_$0;
}
export type Block = Block_1 | Block_2 | Block_3 | Block_4 | Block_5 | Block_6 | Block_7 | Block_8;
export interface Block_1 {
    kind: ASTKinds.Block_1;
}
export interface Block_2 {
    kind: ASTKinds.Block_2;
}
export interface Block_3 {
    kind: ASTKinds.Block_3;
}
export interface Block_4 {
    kind: ASTKinds.Block_4;
}
export interface Block_5 {
    kind: ASTKinds.Block_5;
}
export interface Block_6 {
    kind: ASTKinds.Block_6;
}
export interface Block_7 {
    kind: ASTKinds.Block_7;
}
export interface Block_8 {
    kind: ASTKinds.Block_8;
}
export interface Block_$0 {
    kind: ASTKinds.Block_$0;
}
export interface Block_$1 {
    kind: ASTKinds.Block_$1;
}
export interface Block_$2 {
    kind: ASTKinds.Block_$2;
}
export interface Block_$3 {
    kind: ASTKinds.Block_$3;
}
export interface Block_$4 {
    kind: ASTKinds.Block_$4;
}
export interface Block_$5 {
    kind: ASTKinds.Block_$5;
}
export type Include = Name;
export interface Type {
    kind: ASTKinds.Type;
}
export interface Type_$0 {
    kind: ASTKinds.Type_$0;
}
export type ConVar = ConVar_1 | ConVar_2;
export interface ConVar_1 {
    kind: ASTKinds.ConVar_1;
}
export interface ConVar_2 {
    kind: ASTKinds.ConVar_2;
}
export interface ConVar_$0 {
    kind: ASTKinds.ConVar_$0;
}
export type Function = Function_1 | Function_2;
export interface Function_1 {
    kind: ASTKinds.Function_1;
}
export interface Function_2 {
    kind: ASTKinds.Function_2;
}
export type Process = Process_1 | Process_2;
export interface Process_1 {
    kind: ASTKinds.Process_1;
}
export interface Process_2 {
    kind: ASTKinds.Process_2;
}
export interface Process_$0 {
    kind: ASTKinds.Process_$0;
}
export type TE = TE_1 | TE_2 | TE_3 | TE_4 | TE_5 | TE_6 | TE_7;
export type TE_1 = TypeName;
export interface TE_2 {
    kind: ASTKinds.TE_2;
}
export interface TE_3 {
    kind: ASTKinds.TE_3;
}
export interface TE_4 {
    kind: ASTKinds.TE_4;
}
export interface TE_5 {
    kind: ASTKinds.TE_5;
}
export interface TE_6 {
    kind: ASTKinds.TE_6;
}
export interface TE_7 {
    kind: ASTKinds.TE_7;
}
export interface TE_$0 {
    kind: ASTKinds.TE_$0;
}
export type BTE = BTE_1 | BTE_2;
export interface BTE_1 {
    kind: ASTKinds.BTE_1;
}
export interface BTE_2 {
    kind: ASTKinds.BTE_2;
}
export type BTE_AUX = BTE_AUX_1 | BTE_AUX_2 | BTE_AUX_3 | BTE_AUX_4;
export type BTE_AUX_1 = TypeName;
export interface BTE_AUX_2 {
    kind: ASTKinds.BTE_AUX_2;
}
export interface BTE_AUX_3 {
    kind: ASTKinds.BTE_AUX_3;
}
export interface BTE_AUX_4 {
    kind: ASTKinds.BTE_AUX_4;
}
export type SPE = SPE_1 | SPE_2 | SPE_3 | SPE_4 | SPE_5 | SPE_6 | SPE_7 | SPE_8 | SPE_9 | SPE_10 | SPE_11 | SPE_12;
export interface SPE_1 {
    kind: ASTKinds.SPE_1;
}
export type SPE_2 = Name;
export interface SPE_3 {
    kind: ASTKinds.SPE_3;
}
export interface SPE_4 {
    kind: ASTKinds.SPE_4;
}
export interface SPE_5 {
    kind: ASTKinds.SPE_5;
}
export interface SPE_6 {
    kind: ASTKinds.SPE_6;
}
export interface SPE_7 {
    kind: ASTKinds.SPE_7;
}
export interface SPE_8 {
    kind: ASTKinds.SPE_8;
}
export interface SPE_9 {
    kind: ASTKinds.SPE_9;
}
export interface SPE_10 {
    kind: ASTKinds.SPE_10;
}
export interface SPE_11 {
    kind: ASTKinds.SPE_11;
}
export interface SPE_12 {
    kind: ASTKinds.SPE_12;
}
export interface SPE_$0 {
    kind: ASTKinds.SPE_$0;
}
export interface SPE_$1 {
    kind: ASTKinds.SPE_$1;
}
export interface SPE_$2 {
    kind: ASTKinds.SPE_$2;
}
export type DE = DE_1 | DE_2 | DE_3 | DE_4 | DE_5 | DE_6 | DE_7 | DE_8 | DE_9 | DE_10 | DE_11 | DE_12 | DE_13 | DE_14 | DE_15 | DE_16 | DE_17 | DE_18 | DE_19 | DE_20 | DE_21;
export type DE_1 = Name;
export interface DE_2 {
    kind: ASTKinds.DE_2;
}
export interface DE_3 {
    kind: ASTKinds.DE_3;
}
export interface DE_4 {
    kind: ASTKinds.DE_4;
}
export interface DE_5 {
    kind: ASTKinds.DE_5;
}
export interface DE_6 {
    kind: ASTKinds.DE_6;
}
export interface DE_7 {
    kind: ASTKinds.DE_7;
}
export interface DE_8 {
    kind: ASTKinds.DE_8;
}
export interface DE_9 {
    kind: ASTKinds.DE_9;
}
export interface DE_10 {
    kind: ASTKinds.DE_10;
}
export interface DE_11 {
    kind: ASTKinds.DE_11;
}
export interface DE_12 {
    kind: ASTKinds.DE_12;
}
export interface DE_13 {
    kind: ASTKinds.DE_13;
}
export interface DE_14 {
    kind: ASTKinds.DE_14;
}
export interface DE_15 {
    kind: ASTKinds.DE_15;
}
export interface DE_16 {
    kind: ASTKinds.DE_16;
}
export interface DE_17 {
    kind: ASTKinds.DE_17;
}
export interface DE_18 {
    kind: ASTKinds.DE_18;
}
export interface DE_19 {
    kind: ASTKinds.DE_19;
}
export interface DE_20 {
    kind: ASTKinds.DE_20;
}
export interface DE_21 {
    kind: ASTKinds.DE_21;
}
export interface DE_$0 {
    kind: ASTKinds.DE_$0;
}
export type TypeName = Name;
export type Name = Name_1 | Name_2 | Name_3;
export type Name_1 = NameString;
export type Name_2 = string;
export type Name_3 = string;
export type NameString = NameString_1 | NameString_2;
export type NameString_1 = NameString_$0;
export type NameString_2 = [NameChar, ...NameChar[]];
export interface NameString_$0 {
    kind: ASTKinds.NameString_$0;
}
export type NameChar = string;
export type Infix = string;
export type ws = ws_$0[];
export type ws_$0 = ws_$0_1 | ws_$0_2;
export type ws_$0_1 = sp;
export type ws_$0_2 = lb;
export type sp = string;
export type lb = [lb_$0, ...lb_$0[]];
export type lb_$0 = lb_$0_1 | lb_$0_2;
export type lb_$0_1 = string;
export type lb_$0_2 = string;
export class Parser {
    private readonly input: string;
    private pos: PosInfo;
    private negating: boolean = false;
    private memoSafe: boolean = true;
    constructor(input: string) {
        this.pos = {overallPos: 0, line: 1, offset: 0};
        this.input = input;
    }
    public reset(pos: PosInfo) {
        this.pos = pos;
    }
    public finished(): boolean {
        return this.pos.overallPos === this.input.length;
    }
    public clearMemos(): void {
        this.$scope$TE$memo.clear();
        this.$scope$SPE$memo.clear();
        this.$scope$DE$memo.clear();
    }
    protected $scope$TE$memo: Map<number, [Nullable<TE>, PosInfo]> = new Map();
    protected $scope$SPE$memo: Map<number, [Nullable<SPE>, PosInfo]> = new Map();
    protected $scope$DE$memo: Map<number, [Nullable<DE>, PosInfo]> = new Map();
    public matchAWN($$dpth: number, $$cr?: ErrorTracker): Nullable<AWN> {
        return this.run<AWN>($$dpth,
            () => {
                let $$res: Nullable<AWN> = null;
                if (true
                    && this.matchws($$dpth + 1, $$cr) !== null
                    && this.loop<AWN_$0>(() => this.matchAWN_$0($$dpth + 1, $$cr), 0, -1) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.AWN, };
                }
                return $$res;
            });
    }
    public matchAWN_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<AWN_$0> {
        return this.run<AWN_$0>($$dpth,
            () => {
                let $$res: Nullable<AWN_$0> = null;
                if (true
                    && this.matchBlock($$dpth + 1, $$cr) !== null
                    && this.matchws($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.AWN_$0, };
                }
                return $$res;
            });
    }
    public matchBlock($$dpth: number, $$cr?: ErrorTracker): Nullable<Block> {
        return this.choice<Block>([
            () => this.matchBlock_1($$dpth + 1, $$cr),
            () => this.matchBlock_2($$dpth + 1, $$cr),
            () => this.matchBlock_3($$dpth + 1, $$cr),
            () => this.matchBlock_4($$dpth + 1, $$cr),
            () => this.matchBlock_5($$dpth + 1, $$cr),
            () => this.matchBlock_6($$dpth + 1, $$cr),
            () => this.matchBlock_7($$dpth + 1, $$cr),
            () => this.matchBlock_8($$dpth + 1, $$cr),
        ]);
    }
    public matchBlock_1($$dpth: number, $$cr?: ErrorTracker): Nullable<Block_1> {
        return this.run<Block_1>($$dpth,
            () => {
                let $$res: Nullable<Block_1> = null;
                if (true
                    && this.regexAccept(String.raw`(?:INCLUDES:)`, "", $$dpth + 1, $$cr) !== null
                    && ((this.matchsp($$dpth + 1, $$cr)) || true)
                    && this.matchInclude($$dpth + 1, $$cr) !== null
                    && this.loop<Block_$0>(() => this.matchBlock_$0($$dpth + 1, $$cr), 0, -1) !== null
                    && this.matchlb($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.Block_1, };
                }
                return $$res;
            });
    }
    public matchBlock_2($$dpth: number, $$cr?: ErrorTracker): Nullable<Block_2> {
        return this.run<Block_2>($$dpth,
            () => {
                let $$res: Nullable<Block_2> = null;
                if (true
                    && this.regexAccept(String.raw`(?:include)`, "", $$dpth + 1, $$cr) !== null
                    && ((this.matchsp($$dpth + 1, $$cr)) || true)
                    && this.matchInclude($$dpth + 1, $$cr) !== null
                    && this.matchlb($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.Block_2, };
                }
                return $$res;
            });
    }
    public matchBlock_3($$dpth: number, $$cr?: ErrorTracker): Nullable<Block_3> {
        return this.run<Block_3>($$dpth,
            () => {
                let $$res: Nullable<Block_3> = null;
                if (true
                    && this.regexAccept(String.raw`(?:TYPES:)`, "", $$dpth + 1, $$cr) !== null
                    && ((this.matchsp($$dpth + 1, $$cr)) || true)
                    && this.matchType($$dpth + 1, $$cr) !== null
                    && this.loop<Block_$1>(() => this.matchBlock_$1($$dpth + 1, $$cr), 0, -1) !== null
                    && this.matchlb($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.Block_3, };
                }
                return $$res;
            });
    }
    public matchBlock_4($$dpth: number, $$cr?: ErrorTracker): Nullable<Block_4> {
        return this.run<Block_4>($$dpth,
            () => {
                let $$res: Nullable<Block_4> = null;
                if (true
                    && this.regexAccept(String.raw`(?:VARIABLES:)`, "", $$dpth + 1, $$cr) !== null
                    && ((this.matchsp($$dpth + 1, $$cr)) || true)
                    && this.matchConVar($$dpth + 1, $$cr) !== null
                    && this.loop<Block_$2>(() => this.matchBlock_$2($$dpth + 1, $$cr), 0, -1) !== null
                    && this.matchlb($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.Block_4, };
                }
                return $$res;
            });
    }
    public matchBlock_5($$dpth: number, $$cr?: ErrorTracker): Nullable<Block_5> {
        return this.run<Block_5>($$dpth,
            () => {
                let $$res: Nullable<Block_5> = null;
                if (true
                    && this.regexAccept(String.raw`(?:CONSTANTS:)`, "", $$dpth + 1, $$cr) !== null
                    && ((this.matchsp($$dpth + 1, $$cr)) || true)
                    && this.matchConVar($$dpth + 1, $$cr) !== null
                    && this.loop<Block_$3>(() => this.matchBlock_$3($$dpth + 1, $$cr), 0, -1) !== null
                    && this.matchlb($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.Block_5, };
                }
                return $$res;
            });
    }
    public matchBlock_6($$dpth: number, $$cr?: ErrorTracker): Nullable<Block_6> {
        return this.run<Block_6>($$dpth,
            () => {
                let $$res: Nullable<Block_6> = null;
                if (true
                    && this.regexAccept(String.raw`(?:FUNCTIONS:)`, "", $$dpth + 1, $$cr) !== null
                    && ((this.matchsp($$dpth + 1, $$cr)) || true)
                    && this.matchFunction($$dpth + 1, $$cr) !== null
                    && this.loop<Block_$4>(() => this.matchBlock_$4($$dpth + 1, $$cr), 0, -1) !== null
                    && this.matchlb($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.Block_6, };
                }
                return $$res;
            });
    }
    public matchBlock_7($$dpth: number, $$cr?: ErrorTracker): Nullable<Block_7> {
        return this.run<Block_7>($$dpth,
            () => {
                let $$res: Nullable<Block_7> = null;
                if (true
                    && this.regexAccept(String.raw`(?:PROCESSES:)`, "", $$dpth + 1, $$cr) !== null
                    && ((this.matchsp($$dpth + 1, $$cr)) || true)
                    && this.matchProcess($$dpth + 1, $$cr) !== null
                    && this.loop<Block_$5>(() => this.matchBlock_$5($$dpth + 1, $$cr), 0, -1) !== null
                    && this.matchlb($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.Block_7, };
                }
                return $$res;
            });
    }
    public matchBlock_8($$dpth: number, $$cr?: ErrorTracker): Nullable<Block_8> {
        return this.run<Block_8>($$dpth,
            () => {
                let $$res: Nullable<Block_8> = null;
                if (true
                    && this.regexAccept(String.raw`(?:proc)`, "", $$dpth + 1, $$cr) !== null
                    && ((this.matchsp($$dpth + 1, $$cr)) || true)
                    && this.matchProcess($$dpth + 1, $$cr) !== null
                    && this.matchlb($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.Block_8, };
                }
                return $$res;
            });
    }
    public matchBlock_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<Block_$0> {
        return this.run<Block_$0>($$dpth,
            () => {
                let $$res: Nullable<Block_$0> = null;
                if (true
                    && this.matchlb($$dpth + 1, $$cr) !== null
                    && ((this.matchsp($$dpth + 1, $$cr)) || true)
                    && this.matchInclude($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.Block_$0, };
                }
                return $$res;
            });
    }
    public matchBlock_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<Block_$1> {
        return this.run<Block_$1>($$dpth,
            () => {
                let $$res: Nullable<Block_$1> = null;
                if (true
                    && this.matchlb($$dpth + 1, $$cr) !== null
                    && ((this.matchsp($$dpth + 1, $$cr)) || true)
                    && this.matchType($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.Block_$1, };
                }
                return $$res;
            });
    }
    public matchBlock_$2($$dpth: number, $$cr?: ErrorTracker): Nullable<Block_$2> {
        return this.run<Block_$2>($$dpth,
            () => {
                let $$res: Nullable<Block_$2> = null;
                if (true
                    && this.matchlb($$dpth + 1, $$cr) !== null
                    && ((this.matchsp($$dpth + 1, $$cr)) || true)
                    && this.matchConVar($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.Block_$2, };
                }
                return $$res;
            });
    }
    public matchBlock_$3($$dpth: number, $$cr?: ErrorTracker): Nullable<Block_$3> {
        return this.run<Block_$3>($$dpth,
            () => {
                let $$res: Nullable<Block_$3> = null;
                if (true
                    && this.matchlb($$dpth + 1, $$cr) !== null
                    && ((this.matchsp($$dpth + 1, $$cr)) || true)
                    && this.matchConVar($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.Block_$3, };
                }
                return $$res;
            });
    }
    public matchBlock_$4($$dpth: number, $$cr?: ErrorTracker): Nullable<Block_$4> {
        return this.run<Block_$4>($$dpth,
            () => {
                let $$res: Nullable<Block_$4> = null;
                if (true
                    && this.matchlb($$dpth + 1, $$cr) !== null
                    && ((this.matchsp($$dpth + 1, $$cr)) || true)
                    && this.matchFunction($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.Block_$4, };
                }
                return $$res;
            });
    }
    public matchBlock_$5($$dpth: number, $$cr?: ErrorTracker): Nullable<Block_$5> {
        return this.run<Block_$5>($$dpth,
            () => {
                let $$res: Nullable<Block_$5> = null;
                if (true
                    && this.matchlb($$dpth + 1, $$cr) !== null
                    && ((this.matchsp($$dpth + 1, $$cr)) || true)
                    && this.matchProcess($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.Block_$5, };
                }
                return $$res;
            });
    }
    public matchInclude($$dpth: number, $$cr?: ErrorTracker): Nullable<Include> {
        return this.matchName($$dpth + 1, $$cr);
    }
    public matchType($$dpth: number, $$cr?: ErrorTracker): Nullable<Type> {
        return this.run<Type>($$dpth,
            () => {
                let $$res: Nullable<Type> = null;
                if (true
                    && this.matchTypeName($$dpth + 1, $$cr) !== null
                    && ((this.matchType_$0($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.Type, };
                }
                return $$res;
            });
    }
    public matchType_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<Type_$0> {
        return this.run<Type_$0>($$dpth,
            () => {
                let $$res: Nullable<Type_$0> = null;
                if (true
                    && this.matchsp($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\=)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchsp($$dpth + 1, $$cr) !== null
                    && this.matchTE($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.Type_$0, };
                }
                return $$res;
            });
    }
    public matchConVar($$dpth: number, $$cr?: ErrorTracker): Nullable<ConVar> {
        return this.choice<ConVar>([
            () => this.matchConVar_1($$dpth + 1, $$cr),
            () => this.matchConVar_2($$dpth + 1, $$cr),
        ]);
    }
    public matchConVar_1($$dpth: number, $$cr?: ErrorTracker): Nullable<ConVar_1> {
        return this.run<ConVar_1>($$dpth,
            () => {
                let $$res: Nullable<ConVar_1> = null;
                if (true
                    && this.matchTE($$dpth + 1, $$cr) !== null
                    && this.matchsp($$dpth + 1, $$cr) !== null
                    && this.matchName($$dpth + 1, $$cr) !== null
                    && this.loop<ConVar_$0>(() => this.matchConVar_$0($$dpth + 1, $$cr), 0, -1) !== null
                ) {
                    $$res = {kind: ASTKinds.ConVar_1, };
                }
                return $$res;
            });
    }
    public matchConVar_2($$dpth: number, $$cr?: ErrorTracker): Nullable<ConVar_2> {
        return this.run<ConVar_2>($$dpth,
            () => {
                let $$res: Nullable<ConVar_2> = null;
                if (true
                    && this.matchName($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?::)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchTE($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.ConVar_2, };
                }
                return $$res;
            });
    }
    public matchConVar_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<ConVar_$0> {
        return this.run<ConVar_$0>($$dpth,
            () => {
                let $$res: Nullable<ConVar_$0> = null;
                if (true
                    && this.regexAccept(String.raw`(?:,)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchName($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.ConVar_$0, };
                }
                return $$res;
            });
    }
    public matchFunction($$dpth: number, $$cr?: ErrorTracker): Nullable<Function> {
        return this.choice<Function>([
            () => this.matchFunction_1($$dpth + 1, $$cr),
            () => this.matchFunction_2($$dpth + 1, $$cr),
        ]);
    }
    public matchFunction_1($$dpth: number, $$cr?: ErrorTracker): Nullable<Function_1> {
        return this.run<Function_1>($$dpth,
            () => {
                let $$res: Nullable<Function_1> = null;
                if (true
                    && this.matchName($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?::)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchsp($$dpth + 1, $$cr) !== null
                    && this.matchTE($$dpth + 1, $$cr) !== null
                    && this.matchlb($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.Function_1, };
                }
                return $$res;
            });
    }
    public matchFunction_2($$dpth: number, $$cr?: ErrorTracker): Nullable<Function_2> {
        return this.run<Function_2>($$dpth,
            () => {
                let $$res: Nullable<Function_2> = null;
                if (true
                    && this.matchInfix($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?::)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchsp($$dpth + 1, $$cr) !== null
                    && this.matchBTE($$dpth + 1, $$cr) !== null
                    && this.matchlb($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.Function_2, };
                }
                return $$res;
            });
    }
    public matchProcess($$dpth: number, $$cr?: ErrorTracker): Nullable<Process> {
        return this.choice<Process>([
            () => this.matchProcess_1($$dpth + 1, $$cr),
            () => this.matchProcess_2($$dpth + 1, $$cr),
        ]);
    }
    public matchProcess_1($$dpth: number, $$cr?: ErrorTracker): Nullable<Process_1> {
        return this.run<Process_1>($$dpth,
            () => {
                let $$res: Nullable<Process_1> = null;
                if (true
                    && this.matchName($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\()`, "", $$dpth + 1, $$cr) !== null
                    && ((this.matchName($$dpth + 1, $$cr)) || true)
                    && this.loop<Process_$0>(() => this.matchProcess_$0($$dpth + 1, $$cr), 0, -1) !== null
                    && this.regexAccept(String.raw`(?:\))`, "", $$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?::=)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchlb($$dpth + 1, $$cr) !== null
                    && ((this.matchsp($$dpth + 1, $$cr)) || true)
                    && this.matchSPE($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.Process_1, };
                }
                return $$res;
            });
    }
    public matchProcess_2($$dpth: number, $$cr?: ErrorTracker): Nullable<Process_2> {
        return this.run<Process_2>($$dpth,
            () => {
                let $$res: Nullable<Process_2> = null;
                if (true
                    && this.matchName($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?::=)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchSPE($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.Process_2, };
                }
                return $$res;
            });
    }
    public matchProcess_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<Process_$0> {
        return this.run<Process_$0>($$dpth,
            () => {
                let $$res: Nullable<Process_$0> = null;
                if (true
                    && this.regexAccept(String.raw`(?:,)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchName($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.Process_$0, };
                }
                return $$res;
            });
    }
    public matchTE($$dpth: number, $$cr?: ErrorTracker): Nullable<TE> {
        const fn = () => {
            return this.choice<TE>([
                () => this.matchTE_1($$dpth + 1, $$cr),
                () => this.matchTE_2($$dpth + 1, $$cr),
                () => this.matchTE_3($$dpth + 1, $$cr),
                () => this.matchTE_4($$dpth + 1, $$cr),
                () => this.matchTE_5($$dpth + 1, $$cr),
                () => this.matchTE_6($$dpth + 1, $$cr),
                () => this.matchTE_7($$dpth + 1, $$cr),
            ]);
        };
        const $scope$pos = this.mark();
        const memo = this.$scope$TE$memo.get($scope$pos.overallPos);
        if(memo !== undefined) {
            this.reset(memo[1]);
            return memo[0];
        }
        const $scope$oldMemoSafe = this.memoSafe;
        this.memoSafe = false;
        this.$scope$TE$memo.set($scope$pos.overallPos, [null, $scope$pos]);
        let lastRes: Nullable<TE> = null;
        let lastPos: PosInfo = $scope$pos;
        for(;;) {
            this.reset($scope$pos);
            const res = fn();
            const end = this.mark();
            if(end.overallPos <= lastPos.overallPos)
                break;
            lastRes = res;
            lastPos = end;
            this.$scope$TE$memo.set($scope$pos.overallPos, [lastRes, lastPos]);
        }
        this.reset(lastPos);
        this.memoSafe = $scope$oldMemoSafe;
        return lastRes;
    }
    public matchTE_1($$dpth: number, $$cr?: ErrorTracker): Nullable<TE_1> {
        return this.matchTypeName($$dpth + 1, $$cr);
    }
    public matchTE_2($$dpth: number, $$cr?: ErrorTracker): Nullable<TE_2> {
        return this.run<TE_2>($$dpth,
            () => {
                let $$res: Nullable<TE_2> = null;
                if (true
                    && this.matchTE($$dpth + 1, $$cr) !== null
                    && this.loop<TE_$0>(() => this.matchTE_$0($$dpth + 1, $$cr), 0, -1) !== null
                ) {
                    $$res = {kind: ASTKinds.TE_2, };
                }
                return $$res;
            });
    }
    public matchTE_3($$dpth: number, $$cr?: ErrorTracker): Nullable<TE_3> {
        return this.run<TE_3>($$dpth,
            () => {
                let $$res: Nullable<TE_3> = null;
                if (true
                    && this.matchTE($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:-\>)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchTE($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.TE_3, };
                }
                return $$res;
            });
    }
    public matchTE_4($$dpth: number, $$cr?: ErrorTracker): Nullable<TE_4> {
        return this.run<TE_4>($$dpth,
            () => {
                let $$res: Nullable<TE_4> = null;
                if (true
                    && this.matchTE($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\+->)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchTE($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.TE_4, };
                }
                return $$res;
            });
    }
    public matchTE_5($$dpth: number, $$cr?: ErrorTracker): Nullable<TE_5> {
        return this.run<TE_5>($$dpth,
            () => {
                let $$res: Nullable<TE_5> = null;
                if (true
                    && this.regexAccept(String.raw`(?:Pow)`, "", $$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\()`, "", $$dpth + 1, $$cr) !== null
                    && this.matchTE($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\))`, "", $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.TE_5, };
                }
                return $$res;
            });
    }
    public matchTE_6($$dpth: number, $$cr?: ErrorTracker): Nullable<TE_6> {
        return this.run<TE_6>($$dpth,
            () => {
                let $$res: Nullable<TE_6> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\[)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchTE($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\])`, "", $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.TE_6, };
                }
                return $$res;
            });
    }
    public matchTE_7($$dpth: number, $$cr?: ErrorTracker): Nullable<TE_7> {
        return this.run<TE_7>($$dpth,
            () => {
                let $$res: Nullable<TE_7> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\()`, "", $$dpth + 1, $$cr) !== null
                    && this.matchTE($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\))`, "", $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.TE_7, };
                }
                return $$res;
            });
    }
    public matchTE_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<TE_$0> {
        return this.run<TE_$0>($$dpth,
            () => {
                let $$res: Nullable<TE_$0> = null;
                if (true
                    && this.regexAccept(String.raw`(?:x)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchTE($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.TE_$0, };
                }
                return $$res;
            });
    }
    public matchBTE($$dpth: number, $$cr?: ErrorTracker): Nullable<BTE> {
        return this.choice<BTE>([
            () => this.matchBTE_1($$dpth + 1, $$cr),
            () => this.matchBTE_2($$dpth + 1, $$cr),
        ]);
    }
    public matchBTE_1($$dpth: number, $$cr?: ErrorTracker): Nullable<BTE_1> {
        return this.run<BTE_1>($$dpth,
            () => {
                let $$res: Nullable<BTE_1> = null;
                if (true
                    && this.matchBTE_AUX($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:x)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchBTE_AUX($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:->)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchTE($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.BTE_1, };
                }
                return $$res;
            });
    }
    public matchBTE_2($$dpth: number, $$cr?: ErrorTracker): Nullable<BTE_2> {
        return this.run<BTE_2>($$dpth,
            () => {
                let $$res: Nullable<BTE_2> = null;
                if (true
                    && this.matchBTE_AUX($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:x)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchBTE_AUX($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\+->)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchTE($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.BTE_2, };
                }
                return $$res;
            });
    }
    public matchBTE_AUX($$dpth: number, $$cr?: ErrorTracker): Nullable<BTE_AUX> {
        return this.choice<BTE_AUX>([
            () => this.matchBTE_AUX_1($$dpth + 1, $$cr),
            () => this.matchBTE_AUX_2($$dpth + 1, $$cr),
            () => this.matchBTE_AUX_3($$dpth + 1, $$cr),
            () => this.matchBTE_AUX_4($$dpth + 1, $$cr),
        ]);
    }
    public matchBTE_AUX_1($$dpth: number, $$cr?: ErrorTracker): Nullable<BTE_AUX_1> {
        return this.matchTypeName($$dpth + 1, $$cr);
    }
    public matchBTE_AUX_2($$dpth: number, $$cr?: ErrorTracker): Nullable<BTE_AUX_2> {
        return this.run<BTE_AUX_2>($$dpth,
            () => {
                let $$res: Nullable<BTE_AUX_2> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\()`, "", $$dpth + 1, $$cr) !== null
                    && this.matchTE($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\))`, "", $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.BTE_AUX_2, };
                }
                return $$res;
            });
    }
    public matchBTE_AUX_3($$dpth: number, $$cr?: ErrorTracker): Nullable<BTE_AUX_3> {
        return this.run<BTE_AUX_3>($$dpth,
            () => {
                let $$res: Nullable<BTE_AUX_3> = null;
                if (true
                    && this.regexAccept(String.raw`(?:Pow)`, "", $$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\()`, "", $$dpth + 1, $$cr) !== null
                    && this.matchTE($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\))`, "", $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.BTE_AUX_3, };
                }
                return $$res;
            });
    }
    public matchBTE_AUX_4($$dpth: number, $$cr?: ErrorTracker): Nullable<BTE_AUX_4> {
        return this.run<BTE_AUX_4>($$dpth,
            () => {
                let $$res: Nullable<BTE_AUX_4> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\[)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchTE($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\])`, "", $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.BTE_AUX_4, };
                }
                return $$res;
            });
    }
    public matchSPE($$dpth: number, $$cr?: ErrorTracker): Nullable<SPE> {
        const fn = () => {
            return this.choice<SPE>([
                () => this.matchSPE_1($$dpth + 1, $$cr),
                () => this.matchSPE_2($$dpth + 1, $$cr),
                () => this.matchSPE_3($$dpth + 1, $$cr),
                () => this.matchSPE_4($$dpth + 1, $$cr),
                () => this.matchSPE_5($$dpth + 1, $$cr),
                () => this.matchSPE_6($$dpth + 1, $$cr),
                () => this.matchSPE_7($$dpth + 1, $$cr),
                () => this.matchSPE_8($$dpth + 1, $$cr),
                () => this.matchSPE_9($$dpth + 1, $$cr),
                () => this.matchSPE_10($$dpth + 1, $$cr),
                () => this.matchSPE_11($$dpth + 1, $$cr),
                () => this.matchSPE_12($$dpth + 1, $$cr),
            ]);
        };
        const $scope$pos = this.mark();
        const memo = this.$scope$SPE$memo.get($scope$pos.overallPos);
        if(memo !== undefined) {
            this.reset(memo[1]);
            return memo[0];
        }
        const $scope$oldMemoSafe = this.memoSafe;
        this.memoSafe = false;
        this.$scope$SPE$memo.set($scope$pos.overallPos, [null, $scope$pos]);
        let lastRes: Nullable<SPE> = null;
        let lastPos: PosInfo = $scope$pos;
        for(;;) {
            this.reset($scope$pos);
            const res = fn();
            const end = this.mark();
            if(end.overallPos <= lastPos.overallPos)
                break;
            lastRes = res;
            lastPos = end;
            this.$scope$SPE$memo.set($scope$pos.overallPos, [lastRes, lastPos]);
        }
        this.reset(lastPos);
        this.memoSafe = $scope$oldMemoSafe;
        return lastRes;
    }
    public matchSPE_1($$dpth: number, $$cr?: ErrorTracker): Nullable<SPE_1> {
        return this.run<SPE_1>($$dpth,
            () => {
                let $$res: Nullable<SPE_1> = null;
                if (true
                    && this.matchName($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\()`, "", $$dpth + 1, $$cr) !== null
                    && ((this.matchDE($$dpth + 1, $$cr)) || true)
                    && this.loopPlus<SPE_$0>(() => this.matchSPE_$0($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:\))`, "", $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.SPE_1, };
                }
                return $$res;
            });
    }
    public matchSPE_2($$dpth: number, $$cr?: ErrorTracker): Nullable<SPE_2> {
        return this.matchName($$dpth + 1, $$cr);
    }
    public matchSPE_3($$dpth: number, $$cr?: ErrorTracker): Nullable<SPE_3> {
        return this.run<SPE_3>($$dpth,
            () => {
                let $$res: Nullable<SPE_3> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\[)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchDE($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\])`, "", $$dpth + 1, $$cr) !== null
                    && this.matchSPE($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.SPE_3, };
                }
                return $$res;
            });
    }
    public matchSPE_4($$dpth: number, $$cr?: ErrorTracker): Nullable<SPE_4> {
        return this.run<SPE_4>($$dpth,
            () => {
                let $$res: Nullable<SPE_4> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\[\[)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchName($$dpth + 1, $$cr) !== null
                    && this.loop<SPE_$1>(() => this.matchSPE_$1($$dpth + 1, $$cr), 0, -1) !== null
                    && this.regexAccept(String.raw`(?::=)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchDE($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\]\])`, "", $$dpth + 1, $$cr) !== null
                    && this.matchlb($$dpth + 1, $$cr) !== null
                    && this.matchSPE($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.SPE_4, };
                }
                return $$res;
            });
    }
    public matchSPE_5($$dpth: number, $$cr?: ErrorTracker): Nullable<SPE_5> {
        return this.run<SPE_5>($$dpth,
            () => {
                let $$res: Nullable<SPE_5> = null;
                if (true
                    && this.matchSPE($$dpth + 1, $$cr) !== null
                    && this.matchlb($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\+)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchSPE($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.SPE_5, };
                }
                return $$res;
            });
    }
    public matchSPE_6($$dpth: number, $$cr?: ErrorTracker): Nullable<SPE_6> {
        return this.run<SPE_6>($$dpth,
            () => {
                let $$res: Nullable<SPE_6> = null;
                if (true
                    && this.regexAccept(String.raw`(?:unicast)`, "", $$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\()`, "", $$dpth + 1, $$cr) !== null
                    && this.matchDE($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:,)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchDE($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\))`, "", $$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:.)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchSPE($$dpth + 1, $$cr) !== null
                    && this.matchlb($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:>)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchSPE($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.SPE_6, };
                }
                return $$res;
            });
    }
    public matchSPE_7($$dpth: number, $$cr?: ErrorTracker): Nullable<SPE_7> {
        return this.run<SPE_7>($$dpth,
            () => {
                let $$res: Nullable<SPE_7> = null;
                if (true
                    && this.regexAccept(String.raw`(?:broadcast)`, "", $$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\()`, "", $$dpth + 1, $$cr) !== null
                    && this.matchDE($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\))`, "", $$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:.)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchlb($$dpth + 1, $$cr) !== null
                    && this.matchSPE($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.SPE_7, };
                }
                return $$res;
            });
    }
    public matchSPE_8($$dpth: number, $$cr?: ErrorTracker): Nullable<SPE_8> {
        return this.run<SPE_8>($$dpth,
            () => {
                let $$res: Nullable<SPE_8> = null;
                if (true
                    && this.regexAccept(String.raw`(?:groupcast)`, "", $$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\()`, "", $$dpth + 1, $$cr) !== null
                    && this.matchDE($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:,)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchDE($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\))`, "", $$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:.)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchlb($$dpth + 1, $$cr) !== null
                    && this.matchSPE($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.SPE_8, };
                }
                return $$res;
            });
    }
    public matchSPE_9($$dpth: number, $$cr?: ErrorTracker): Nullable<SPE_9> {
        return this.run<SPE_9>($$dpth,
            () => {
                let $$res: Nullable<SPE_9> = null;
                if (true
                    && this.regexAccept(String.raw`(?:send)`, "", $$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\()`, "", $$dpth + 1, $$cr) !== null
                    && this.matchDE($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\))`, "", $$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:.)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchlb($$dpth + 1, $$cr) !== null
                    && this.matchSPE($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.SPE_9, };
                }
                return $$res;
            });
    }
    public matchSPE_10($$dpth: number, $$cr?: ErrorTracker): Nullable<SPE_10> {
        return this.run<SPE_10>($$dpth,
            () => {
                let $$res: Nullable<SPE_10> = null;
                if (true
                    && this.regexAccept(String.raw`(?:deliver)`, "", $$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\()`, "", $$dpth + 1, $$cr) !== null
                    && this.matchDE($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\))`, "", $$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:.)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchlb($$dpth + 1, $$cr) !== null
                    && this.matchSPE($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.SPE_10, };
                }
                return $$res;
            });
    }
    public matchSPE_11($$dpth: number, $$cr?: ErrorTracker): Nullable<SPE_11> {
        return this.run<SPE_11>($$dpth,
            () => {
                let $$res: Nullable<SPE_11> = null;
                if (true
                    && this.regexAccept(String.raw`(?:receive)`, "", $$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\()`, "", $$dpth + 1, $$cr) !== null
                    && this.matchName($$dpth + 1, $$cr) !== null
                    && this.loop<SPE_$2>(() => this.matchSPE_$2($$dpth + 1, $$cr), 0, -1) !== null
                    && this.regexAccept(String.raw`(?:\))`, "", $$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:.)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchlb($$dpth + 1, $$cr) !== null
                    && this.matchSPE($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.SPE_11, };
                }
                return $$res;
            });
    }
    public matchSPE_12($$dpth: number, $$cr?: ErrorTracker): Nullable<SPE_12> {
        return this.run<SPE_12>($$dpth,
            () => {
                let $$res: Nullable<SPE_12> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\()`, "", $$dpth + 1, $$cr) !== null
                    && this.matchSPE($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\))`, "", $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.SPE_12, };
                }
                return $$res;
            });
    }
    public matchSPE_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<SPE_$0> {
        return this.run<SPE_$0>($$dpth,
            () => {
                let $$res: Nullable<SPE_$0> = null;
                if (true
                    && this.regexAccept(String.raw`(?:,)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchDE($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.SPE_$0, };
                }
                return $$res;
            });
    }
    public matchSPE_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<SPE_$1> {
        return this.run<SPE_$1>($$dpth,
            () => {
                let $$res: Nullable<SPE_$1> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\[)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchDE($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\])`, "", $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.SPE_$1, };
                }
                return $$res;
            });
    }
    public matchSPE_$2($$dpth: number, $$cr?: ErrorTracker): Nullable<SPE_$2> {
        return this.run<SPE_$2>($$dpth,
            () => {
                let $$res: Nullable<SPE_$2> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\[)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchDE($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\])`, "", $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.SPE_$2, };
                }
                return $$res;
            });
    }
    public matchDE($$dpth: number, $$cr?: ErrorTracker): Nullable<DE> {
        const fn = () => {
            return this.choice<DE>([
                () => this.matchDE_1($$dpth + 1, $$cr),
                () => this.matchDE_2($$dpth + 1, $$cr),
                () => this.matchDE_3($$dpth + 1, $$cr),
                () => this.matchDE_4($$dpth + 1, $$cr),
                () => this.matchDE_5($$dpth + 1, $$cr),
                () => this.matchDE_6($$dpth + 1, $$cr),
                () => this.matchDE_7($$dpth + 1, $$cr),
                () => this.matchDE_8($$dpth + 1, $$cr),
                () => this.matchDE_9($$dpth + 1, $$cr),
                () => this.matchDE_10($$dpth + 1, $$cr),
                () => this.matchDE_11($$dpth + 1, $$cr),
                () => this.matchDE_12($$dpth + 1, $$cr),
                () => this.matchDE_13($$dpth + 1, $$cr),
                () => this.matchDE_14($$dpth + 1, $$cr),
                () => this.matchDE_15($$dpth + 1, $$cr),
                () => this.matchDE_16($$dpth + 1, $$cr),
                () => this.matchDE_17($$dpth + 1, $$cr),
                () => this.matchDE_18($$dpth + 1, $$cr),
                () => this.matchDE_19($$dpth + 1, $$cr),
                () => this.matchDE_20($$dpth + 1, $$cr),
                () => this.matchDE_21($$dpth + 1, $$cr),
            ]);
        };
        const $scope$pos = this.mark();
        const memo = this.$scope$DE$memo.get($scope$pos.overallPos);
        if(memo !== undefined) {
            this.reset(memo[1]);
            return memo[0];
        }
        const $scope$oldMemoSafe = this.memoSafe;
        this.memoSafe = false;
        this.$scope$DE$memo.set($scope$pos.overallPos, [null, $scope$pos]);
        let lastRes: Nullable<DE> = null;
        let lastPos: PosInfo = $scope$pos;
        for(;;) {
            this.reset($scope$pos);
            const res = fn();
            const end = this.mark();
            if(end.overallPos <= lastPos.overallPos)
                break;
            lastRes = res;
            lastPos = end;
            this.$scope$DE$memo.set($scope$pos.overallPos, [lastRes, lastPos]);
        }
        this.reset(lastPos);
        this.memoSafe = $scope$oldMemoSafe;
        return lastRes;
    }
    public matchDE_1($$dpth: number, $$cr?: ErrorTracker): Nullable<DE_1> {
        return this.matchName($$dpth + 1, $$cr);
    }
    public matchDE_2($$dpth: number, $$cr?: ErrorTracker): Nullable<DE_2> {
        return this.run<DE_2>($$dpth,
            () => {
                let $$res: Nullable<DE_2> = null;
                if (true
                    && this.matchDE($$dpth + 1, $$cr) !== null
                    && this.matchsp($$dpth + 1, $$cr) !== null
                    && this.matchDE($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.DE_2, };
                }
                return $$res;
            });
    }
    public matchDE_3($$dpth: number, $$cr?: ErrorTracker): Nullable<DE_3> {
        return this.run<DE_3>($$dpth,
            () => {
                let $$res: Nullable<DE_3> = null;
                if (true
                    && this.matchDE($$dpth + 1, $$cr) !== null
                    && this.loopPlus<DE_$0>(() => this.matchDE_$0($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.DE_3, };
                }
                return $$res;
            });
    }
    public matchDE_4($$dpth: number, $$cr?: ErrorTracker): Nullable<DE_4> {
        return this.run<DE_4>($$dpth,
            () => {
                let $$res: Nullable<DE_4> = null;
                if (true
                    && this.regexAccept(String.raw`(?:{)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchDE($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:})`, "", $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.DE_4, };
                }
                return $$res;
            });
    }
    public matchDE_5($$dpth: number, $$cr?: ErrorTracker): Nullable<DE_5> {
        return this.run<DE_5>($$dpth,
            () => {
                let $$res: Nullable<DE_5> = null;
                if (true
                    && this.regexAccept(String.raw`(?:{)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchName($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:|)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchDE($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:})`, "", $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.DE_5, };
                }
                return $$res;
            });
    }
    public matchDE_6($$dpth: number, $$cr?: ErrorTracker): Nullable<DE_6> {
        return this.run<DE_6>($$dpth,
            () => {
                let $$res: Nullable<DE_6> = null;
                if (true
                    && this.regexAccept(String.raw`(?:{)`, "", $$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\()`, "", $$dpth + 1, $$cr) !== null
                    && this.matchName($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:,)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchDE($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\))`, "", $$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:|)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchDE($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:})`, "", $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.DE_6, };
                }
                return $$res;
            });
    }
    public matchDE_7($$dpth: number, $$cr?: ErrorTracker): Nullable<DE_7> {
        return this.run<DE_7>($$dpth,
            () => {
                let $$res: Nullable<DE_7> = null;
                if (true
                    && this.regexAccept(String.raw`(?:lambda)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchName($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:.)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchsp($$dpth + 1, $$cr) !== null
                    && this.matchDE($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.DE_7, };
                }
                return $$res;
            });
    }
    public matchDE_8($$dpth: number, $$cr?: ErrorTracker): Nullable<DE_8> {
        return this.run<DE_8>($$dpth,
            () => {
                let $$res: Nullable<DE_8> = null;
                if (true
                    && this.regexAccept(String.raw`(?:forall)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchName($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:.)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchsp($$dpth + 1, $$cr) !== null
                    && this.matchDE($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.DE_8, };
                }
                return $$res;
            });
    }
    public matchDE_9($$dpth: number, $$cr?: ErrorTracker): Nullable<DE_9> {
        return this.run<DE_9>($$dpth,
            () => {
                let $$res: Nullable<DE_9> = null;
                if (true
                    && this.regexAccept(String.raw`(?:exists)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchName($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:.)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchsp($$dpth + 1, $$cr) !== null
                    && this.matchDE($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.DE_9, };
                }
                return $$res;
            });
    }
    public matchDE_10($$dpth: number, $$cr?: ErrorTracker): Nullable<DE_10> {
        return this.run<DE_10>($$dpth,
            () => {
                let $$res: Nullable<DE_10> = null;
                if (true
                    && this.matchDE($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:->)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchDE($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.DE_10, };
                }
                return $$res;
            });
    }
    public matchDE_11($$dpth: number, $$cr?: ErrorTracker): Nullable<DE_11> {
        return this.run<DE_11>($$dpth,
            () => {
                let $$res: Nullable<DE_11> = null;
                if (true
                    && this.matchDE($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:<->)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchDE($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.DE_11, };
                }
                return $$res;
            });
    }
    public matchDE_12($$dpth: number, $$cr?: ErrorTracker): Nullable<DE_12> {
        return this.run<DE_12>($$dpth,
            () => {
                let $$res: Nullable<DE_12> = null;
                if (true
                    && this.matchDE($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:&)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchDE($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.DE_12, };
                }
                return $$res;
            });
    }
    public matchDE_13($$dpth: number, $$cr?: ErrorTracker): Nullable<DE_13> {
        return this.run<DE_13>($$dpth,
            () => {
                let $$res: Nullable<DE_13> = null;
                if (true
                    && this.matchDE($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:|)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchDE($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.DE_13, };
                }
                return $$res;
            });
    }
    public matchDE_14($$dpth: number, $$cr?: ErrorTracker): Nullable<DE_14> {
        return this.run<DE_14>($$dpth,
            () => {
                let $$res: Nullable<DE_14> = null;
                if (true
                    && this.matchDE($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:=)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchDE($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.DE_14, };
                }
                return $$res;
            });
    }
    public matchDE_15($$dpth: number, $$cr?: ErrorTracker): Nullable<DE_15> {
        return this.run<DE_15>($$dpth,
            () => {
                let $$res: Nullable<DE_15> = null;
                if (true
                    && this.matchDE($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:!=)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchDE($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.DE_15, };
                }
                return $$res;
            });
    }
    public matchDE_16($$dpth: number, $$cr?: ErrorTracker): Nullable<DE_16> {
        return this.run<DE_16>($$dpth,
            () => {
                let $$res: Nullable<DE_16> = null;
                if (true
                    && this.matchDE($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:>=)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchDE($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.DE_16, };
                }
                return $$res;
            });
    }
    public matchDE_17($$dpth: number, $$cr?: ErrorTracker): Nullable<DE_17> {
        return this.run<DE_17>($$dpth,
            () => {
                let $$res: Nullable<DE_17> = null;
                if (true
                    && this.matchDE($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:<=)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchDE($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.DE_17, };
                }
                return $$res;
            });
    }
    public matchDE_18($$dpth: number, $$cr?: ErrorTracker): Nullable<DE_18> {
        return this.run<DE_18>($$dpth,
            () => {
                let $$res: Nullable<DE_18> = null;
                if (true
                    && this.matchDE($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:>)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchDE($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.DE_18, };
                }
                return $$res;
            });
    }
    public matchDE_19($$dpth: number, $$cr?: ErrorTracker): Nullable<DE_19> {
        return this.run<DE_19>($$dpth,
            () => {
                let $$res: Nullable<DE_19> = null;
                if (true
                    && this.matchDE($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:<)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchDE($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.DE_19, };
                }
                return $$res;
            });
    }
    public matchDE_20($$dpth: number, $$cr?: ErrorTracker): Nullable<DE_20> {
        return this.run<DE_20>($$dpth,
            () => {
                let $$res: Nullable<DE_20> = null;
                if (true
                    && this.matchDE($$dpth + 1, $$cr) !== null
                    && this.matchInfix($$dpth + 1, $$cr) !== null
                    && this.matchDE($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.DE_20, };
                }
                return $$res;
            });
    }
    public matchDE_21($$dpth: number, $$cr?: ErrorTracker): Nullable<DE_21> {
        return this.run<DE_21>($$dpth,
            () => {
                let $$res: Nullable<DE_21> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\()`, "", $$dpth + 1, $$cr) !== null
                    && this.matchDE($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\))`, "", $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.DE_21, };
                }
                return $$res;
            });
    }
    public matchDE_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<DE_$0> {
        return this.run<DE_$0>($$dpth,
            () => {
                let $$res: Nullable<DE_$0> = null;
                if (true
                    && this.regexAccept(String.raw`(?:,)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchDE($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.DE_$0, };
                }
                return $$res;
            });
    }
    public matchTypeName($$dpth: number, $$cr?: ErrorTracker): Nullable<TypeName> {
        return this.matchName($$dpth + 1, $$cr);
    }
    public matchName($$dpth: number, $$cr?: ErrorTracker): Nullable<Name> {
        return this.choice<Name>([
            () => this.matchName_1($$dpth + 1, $$cr),
            () => this.matchName_2($$dpth + 1, $$cr),
            () => this.matchName_3($$dpth + 1, $$cr),
        ]);
    }
    public matchName_1($$dpth: number, $$cr?: ErrorTracker): Nullable<Name_1> {
        return this.matchNameString($$dpth + 1, $$cr);
    }
    public matchName_2($$dpth: number, $$cr?: ErrorTracker): Nullable<Name_2> {
        return this.regexAccept(String.raw`(?:\!)`, "", $$dpth + 1, $$cr);
    }
    public matchName_3($$dpth: number, $$cr?: ErrorTracker): Nullable<Name_3> {
        return this.regexAccept(String.raw`(?:\[\])`, "", $$dpth + 1, $$cr);
    }
    public matchNameString($$dpth: number, $$cr?: ErrorTracker): Nullable<NameString> {
        return this.choice<NameString>([
            () => this.matchNameString_1($$dpth + 1, $$cr),
            () => this.matchNameString_2($$dpth + 1, $$cr),
        ]);
    }
    public matchNameString_1($$dpth: number, $$cr?: ErrorTracker): Nullable<NameString_1> {
        return this.matchNameString_$0($$dpth + 1, $$cr);
    }
    public matchNameString_2($$dpth: number, $$cr?: ErrorTracker): Nullable<NameString_2> {
        return this.loopPlus<NameChar>(() => this.matchNameChar($$dpth + 1, $$cr));
    }
    public matchNameString_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<NameString_$0> {
        return this.run<NameString_$0>($$dpth,
            () => {
                let $$res: Nullable<NameString_$0> = null;
                if (true
                    && this.loop<NameChar>(() => this.matchNameChar($$dpth + 1, $$cr), 0, -1) !== null
                    && this.regexAccept(String.raw`(?:.)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchNameString($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.NameString_$0, };
                }
                return $$res;
            });
    }
    public matchNameChar($$dpth: number, $$cr?: ErrorTracker): Nullable<NameChar> {
        return this.regexAccept(String.raw`(?:[a-zA-Z0-9])`, "", $$dpth + 1, $$cr);
    }
    public matchInfix($$dpth: number, $$cr?: ErrorTracker): Nullable<Infix> {
        return this.regexAccept(String.raw`(?:[\*\+-\:<\=>\!\&|\\]+)`, "", $$dpth + 1, $$cr);
    }
    public matchws($$dpth: number, $$cr?: ErrorTracker): Nullable<ws> {
        return this.loop<ws_$0>(() => this.matchws_$0($$dpth + 1, $$cr), 0, -1);
    }
    public matchws_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<ws_$0> {
        return this.choice<ws_$0>([
            () => this.matchws_$0_1($$dpth + 1, $$cr),
            () => this.matchws_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchws_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<ws_$0_1> {
        return this.matchsp($$dpth + 1, $$cr);
    }
    public matchws_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<ws_$0_2> {
        return this.matchlb($$dpth + 1, $$cr);
    }
    public matchsp($$dpth: number, $$cr?: ErrorTracker): Nullable<sp> {
        return this.regexAccept(String.raw`(?:\s+)`, "", $$dpth + 1, $$cr);
    }
    public matchlb($$dpth: number, $$cr?: ErrorTracker): Nullable<lb> {
        return this.loopPlus<lb_$0>(() => this.matchlb_$0($$dpth + 1, $$cr));
    }
    public matchlb_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<lb_$0> {
        return this.choice<lb_$0>([
            () => this.matchlb_$0_1($$dpth + 1, $$cr),
            () => this.matchlb_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchlb_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<lb_$0_1> {
        return this.regexAccept(String.raw`(?:\n)`, "", $$dpth + 1, $$cr);
    }
    public matchlb_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<lb_$0_2> {
        return this.regexAccept(String.raw`(?:\r\n)`, "", $$dpth + 1, $$cr);
    }
    public test(): boolean {
        const mrk = this.mark();
        const res = this.matchAWN(0);
        const ans = res !== null;
        this.reset(mrk);
        return ans;
    }
    public parse(): ParseResult {
        const mrk = this.mark();
        const res = this.matchAWN(0);
        if (res)
            return {ast: res, errs: []};
        this.reset(mrk);
        const rec = new ErrorTracker();
        this.clearMemos();
        this.matchAWN(0, rec);
        const err = rec.getErr()
        return {ast: res, errs: err !== null ? [err] : []}
    }
    public mark(): PosInfo {
        return this.pos;
    }
    // @ts-ignore: loopPlus may not be called
    private loopPlus<T>(func: $$RuleType<T>): Nullable<[T, ...T[]]> {
        return this.loop(func, 1, -1) as Nullable<[T, ...T[]]>;
    }
    private loop<T>(func: $$RuleType<T>, lb: number, ub: number): Nullable<T[]> {
        const mrk = this.mark();
        const res: T[] = [];
        while (ub === -1 || res.length < ub) {
            const preMrk = this.mark();
            const t = func();
            if (t === null || this.pos.overallPos === preMrk.overallPos) {
                break;
            }
            res.push(t);
        }
        if (res.length >= lb) {
            return res;
        }
        this.reset(mrk);
        return null;
    }
    private run<T>($$dpth: number, fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn()
        if (res !== null)
            return res;
        this.reset(mrk);
        return null;
    }
    // @ts-ignore: choice may not be called
    private choice<T>(fns: Array<$$RuleType<T>>): Nullable<T> {
        for (const f of fns) {
            const res = f();
            if (res !== null) {
                return res;
            }
        }
        return null;
    }
    private regexAccept(match: string, mods: string, dpth: number, cr?: ErrorTracker): Nullable<string> {
        return this.run<string>(dpth,
            () => {
                const reg = new RegExp(match, "y" + mods);
                const mrk = this.mark();
                reg.lastIndex = mrk.overallPos;
                const res = this.tryConsume(reg);
                if(cr) {
                    cr.record(mrk, res, {
                        kind: "RegexMatch",
                        // We substring from 3 to len - 1 to strip off the
                        // non-capture group syntax added as a WebKit workaround
                        literal: match.substring(3, match.length - 1),
                        negated: this.negating,
                    });
                }
                return res;
            });
    }
    private tryConsume(reg: RegExp): Nullable<string> {
        const res = reg.exec(this.input);
        if (res) {
            let lineJmp = 0;
            let lind = -1;
            for (let i = 0; i < res[0].length; ++i) {
                if (res[0][i] === "\n") {
                    ++lineJmp;
                    lind = i;
                }
            }
            this.pos = {
                overallPos: reg.lastIndex,
                line: this.pos.line + lineJmp,
                offset: lind === -1 ? this.pos.offset + res[0].length : (res[0].length - lind - 1)
            };
            return res[0];
        }
        return null;
    }
    // @ts-ignore: noConsume may not be called
    private noConsume<T>(fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn();
        this.reset(mrk);
        return res;
    }
    // @ts-ignore: negate may not be called
    private negate<T>(fn: $$RuleType<T>): Nullable<boolean> {
        const mrk = this.mark();
        const oneg = this.negating;
        this.negating = !oneg;
        const res = fn();
        this.negating = oneg;
        this.reset(mrk);
        return res === null ? true : null;
    }
    // @ts-ignore: Memoise may not be used
    private memoise<K>(rule: $$RuleType<K>, memo: Map<number, [Nullable<K>, PosInfo]>): Nullable<K> {
        const $scope$pos = this.mark();
        const $scope$memoRes = memo.get($scope$pos.overallPos);
        if(this.memoSafe && $scope$memoRes !== undefined) {
        this.reset($scope$memoRes[1]);
        return $scope$memoRes[0];
        }
        const $scope$result = rule();
        if(this.memoSafe)
        memo.set($scope$pos.overallPos, [$scope$result, this.mark()]);
        return $scope$result;
    }
    private match$EOF(et?: ErrorTracker): Nullable<{kind: ASTKinds.$EOF}> {
        const res: {kind: ASTKinds.$EOF} | null = this.finished() ? { kind: ASTKinds.$EOF } : null;
        if(et)
            et.record(this.mark(), res, { kind: "EOF", negated: this.negating });
        return res;
    }
}
export function parse(s: string): ParseResult {
    const p = new Parser(s);
    return p.parse();
}
export interface ParseResult {
    ast: Nullable<AWN>;
    errs: SyntaxErr[];
}
export interface PosInfo {
    readonly overallPos: number;
    readonly line: number;
    readonly offset: number;
}
export interface RegexMatch {
    readonly kind: "RegexMatch";
    readonly negated: boolean;
    readonly literal: string;
}
export type EOFMatch = { kind: "EOF"; negated: boolean };
export type MatchAttempt = RegexMatch | EOFMatch;
export class SyntaxErr {
    public pos: PosInfo;
    public expmatches: MatchAttempt[];
    constructor(pos: PosInfo, expmatches: MatchAttempt[]) {
        this.pos = pos;
        this.expmatches = [...expmatches];
    }
    public toString(): string {
        return `Syntax Error at line ${this.pos.line}:${this.pos.offset}. Expected one of ${this.expmatches.map(x => x.kind === "EOF" ? " EOF" : ` ${x.negated ? 'not ': ''}'${x.literal}'`)}`;
    }
}
class ErrorTracker {
    private mxpos: PosInfo = {overallPos: -1, line: -1, offset: -1};
    private regexset: Set<string> = new Set();
    private pmatches: MatchAttempt[] = [];
    public record(pos: PosInfo, result: any, att: MatchAttempt) {
        if ((result === null) === att.negated)
            return;
        if (pos.overallPos > this.mxpos.overallPos) {
            this.mxpos = pos;
            this.pmatches = [];
            this.regexset.clear()
        }
        if (this.mxpos.overallPos === pos.overallPos) {
            if(att.kind === "RegexMatch") {
                if(!this.regexset.has(att.literal))
                    this.pmatches.push(att);
                this.regexset.add(att.literal);
            } else {
                this.pmatches.push(att);
            }
        }
    }
    public getErr(): SyntaxErr | null {
        if (this.mxpos.overallPos !== -1)
            return new SyntaxErr(this.mxpos, this.pmatches);
        return null;
    }
}