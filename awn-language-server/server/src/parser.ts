/* AutoGenerated Code, changes may be overwritten
* INPUT GRAMMAR:
* AWNRoot := ws block=Block* ws $
* //in a block, each entry must be separated by a linebreak, optional spacing at the start
* //because each entry must be delimited with a linebreak, an extra line is required at the end of the doc currently
* Block :=
* 	  pos=@ 'INCLUDES:' include=Include+
* 	| pos=@ 'include' include=Include
* 	| pos=@ 'TYPES:' type=Type+
* 	| pos=@ 'VARIABLES:' var=ConVar+
* 	| pos=@ 'CONSTANTS:' const=ConVar+
* 	| pos=@ 'FUNCTIONS:' func=Function+
* 	| pos=@ 'PROCESSES:' proc=Process+
* 	| pos=@ 'proc' proc=Process
* 	| pos=@ 'ALIASES:' alias=Alias+
* Include := ws posS=@ name=Name posE=@ os lb
* Type := ws posS=@ typeName=TypeName posE=@ typeExprW={os '\=' os typeExpr=TE }? os lb
* ConVar :=
* 	  ws typeExpr=TE sp posS=@ nameFirst=Name posE=@ namesMore={ws ',' ws posS=@ name=Name posE=@ }* os lb .typeDeclaredFirst = boolean{return true}
* 	| ws posS=@ name=Name posE=@ os '\:' os typeExpr=TE os lb .typeDeclaredFirst = boolean{return false}
* Function :=
* 	  ws posS=@ name=Name posE=@ os '\:' os typeExpr=TE os lb
* 	| ws posS=@ name=Infix posE=@ os '\:' os typeExpr=TE os lb
* Process :=
* 	  ws pos1S=@ nameFirst=Name pos1E=@ os '\(' pos2S=@ argFirst=Name? pos2E=@ argsMore={',' os posS=@ name=Name posE=@ }* '\)' os '\:\=' lb sp proc=SPE os lb
* 	| ws posS=@ name=Name posE=@ os '\:\=' proc=SPE os lb
* Alias :=
* 	  ws pos1S=@ nameFirst=Name pos1E=@ os '\:\=' sp pos2S=@ argFirst=Name? os pos2E=@ argsMore={',' os posS=@ name=Name posE=@ }* os lb
* 	| ws posS=@ name=Name posE=@ os '\:\=' sp dataExp=DE os lb
* //============
* // TYPE EXPRESSIONS
* //============
* TE := '\(' os typeExpr=TE os '\)' typeExprMore=TE1?
* 	.typetype = string{
* 		return "brackets"
* 	}
* 	| pos=@ 'Pow' '\(' os typeExpr=TE os '\)' typeExprMore=TE1?
* 	.typetype = string{
* 		return "pow"
* 	}
* 	| '\[' os typeExpr=TE os '\]' typeExprMore=TE1?
* 	.typetype = string{
* 		return "list"
* 	}
* 	| posS=@ typename=TypeName posE=@ typeExprMore=TE1?
* 	.typetype = string{
* 		return "name"
* 	}
* TE1 := os '\->' os typeExpr=TE typeExprMore=TE1?
* 	.typetype = string{
* 		return "function"
* 	}
* 	| os '\+->' os typeExpr=TE typeExprMore=TE1?
* 	.typetype = string{
* 		return "part_function"
* 	}
* 	| products={pos=@ ' x ' typeExpr=TE}* typeExprMore=TE1?
* 	.typetype = string{
* 		return "product"
* 	}
* //==================
* // SP EXPRESSIONS
* //==================
* SPE :=
* 	  '\[' os posDES=@ dataExp=DE posDEE=@ os '\]' lb sp proc=SPE procMore=SPE1?
* 	.procType = string {
* 		return "guard"
* 	}
* 	| '\[\[' os posA=@ name=Name posB=@ os '\:\=' os posC=@ dataExpAssignment=DE posD=@ os '\]\]' lb sp proc=SPE procMore=SPE1?
* 	.procType = string {
* 		return "assignment"
* 	}
* 	| pos=@ 'unicast' '\(' posA=@ dataExpL=DE posB=@ ';' os dataExpR=DE posC=@ '\)' '.' ws procL=SPE ws '>' procR=SPE procMore=SPE1?
* 	.procType = string {
* 		return "unicast"
* 	} 
* 	| pos=@ 'broadcast' '\(' posA=@ dataExp=DE posB=@ '\)' '.' ws proc=SPE procMore=SPE1?
* 	.procType = string {
* 		return "broadcast"
* 	}
* 	| pos=@ 'groupcast' '\(' posA=@ dataExpL=DE posB=@ ';' os dataExpR=DE posC=@ '\)' '.' ws proc=SPE procMore=SPE1?
* 	.procType = string {
* 		return "groupcast"
* 	}
* 	| pos=@ 'send' '\(' posA=@ dataExp=DE posB=@ '\)' '.' ws proc=SPE procMore=SPE1?
* 	.procType = string {
* 		return "send"
* 	}
* 	| pos=@ 'deliver' '\(' posA=@ dataExp=DE posB=@ '\)' '.' ws proc=SPE procMore=SPE1?
* 	.procType = string {
* 		return "deliver"
* 	}
* 	| pos=@ 'receive' '\(' posS=@ name=Name posE=@ dataExpList={ '\[' dataExp=DE '\]' }* '\)' '.' ws proc=SPE procMore=SPE1?
* 	.procType = string {
* 		return "receive"
* 	}
* 	| '\(' ws proc=SPE ws '\)' procMore=SPE1?
* 	.procType = string {
* 		return "brackets"
* 	}
* 	| posS=@ !'unicast' !'broadcast' !'groupcast' !'send' !'deliver' !'receive' name=Name posE=@ '\(' dataExpFirst=DE? dataExpW={',' os dataExp=DE}* '\)' procMore=SPE1?
* 	.procType = string {
* 		return "call"
* 	}
* SPE1 := lb sp '\+' lb sp proc=SPE procMore=SPE1?
* .procType = string {
* 		return "choice"
* 	}
* //===============
* // DATA EXPRESSIONS
* //===============
* DE :=
* 	'{' '\(' posS=@ name=Name posE=@ ',' dataExpLeft=DE '\)' ' | ' dataExpRight=DE '}' dataExpMore=DE1?
* 	.dataExpType = string {
* 		return "partial"
* 	}
* 	| '{' posS=@ name=Name posE=@ ' | ' dataExpRight=DE '}' dataExpMore=DE1?
* 	.dataExpType = string {
* 		return "set"
* 	}
* 	| '{' dataExp=DE '}' dataExpMore=DE1?
* 	.dataExpType = string {
* 		return "singleton"
* 	}
* 	| pos=@ 'lambda ' posS=@ name=Name '. ' dataExp=DE dataExpMore=DE1?
* 	.dataExpType = string {
* 		return "lambda"
* 	}
* 	| pos=@ 'forall ' posS=@ name=Name '. ' dataExp=DE dataExpMore=DE1?
* 	.dataExpType = string {
* 		return "forall"
* 	}
* 	| pos=@ 'exists ' posS=@ name=Name '. ' dataExp=DE dataExpMore=DE1?
* 	.dataExpType = string {
* 		return "exists"
* 	}
* 	| posN=@ name={Name | Infix} posNEnd=@ '\(' os posS=@ dataExp=DE posE=@ os '\)' dataExpMore=DE1?
* 	.dataExpType = string {
* 		return "function"
* 	}
* 	| '\(' dataExp=DE '\)' dataExpMore=DE1?
* 	.dataExpType = string {
* 		return "brackets"
* 	}
* 	| posS=@ name=Name posE=@ dataExpMore=DE1?
* 	.dataExpType = string {
* 		return "name"
* 	}
* DE1 := 
* 	os posS=@ '\->' posE=@ os dataExp=DE dataExpMore=DE1?
* 	.dataExpType = string {
* 		return "implicates"
* 	}
* 	| os posS=@ '<\->' posE=@ os dataExp=DE dataExpMore=DE1?
* 	.dataExpType = string {
* 		return "iff"
* 	}
* 	| os posS=@ '\&' posE=@ os dataExp=DE dataExpMore=DE1?
* 	.dataExpType = string {
* 		return "and"
* 	}
* 	| os posS=@ '\|' posE=@ os dataExp=DE dataExpMore=DE1?
* 	.dataExpType = string {
* 		return "or"
* 	}
* 	| os posS=@ '\=' posE=@ os dataExp=DE dataExpMore=DE1?
* 	.dataExpType = string {
* 		return "eq"
* 	}
* 	| os posS=@ '\!\=' posE=@ os dataExp=DE dataExpMore=DE1?
* 	.dataExpType = string {
* 		return "neq"
* 	}
* 	| os posS=@ '>\=' posE=@ os dataExp=DE dataExpMore=DE1?
* 	.dataExpType = string {
* 		return "gtreq"
* 	}
* 	| os posS=@ '<\=' posE=@ os dataExp=DE dataExpMore=DE1?
* 	.dataExpType = string {
* 		return "leseq"
* 	}
* 	| os posS=@ '>' posE=@ os dataExp=DE dataExpMore=DE1?
* 	.dataExpType = string {
* 		return "gtr"
* 	}
* 	| os posS=@ '<' posE=@ os dataExp=DE dataExpMore=DE1?
* 	.dataExpType = string {
* 		return "les"
* 	}
* 	| os posS=@ '\:' posE=@ os dataExp=DE dataExpMore=DE1?
* 	.dataExpType = string {
* 		return "col"
* 	}
* 	| os posS=@ func=Infix posE=@ os dataExp=DE dataExpMore=DE1?
* 	.dataExpType = string {
* 		return "infix"
* 	}
* 	| objects={pos=@ os ',' os dataExp=DE}* dataExpMore=DE1?
* 	.dataExpType = string {
* 		return "tuple"
* 	}
* //=============
* //  BASIC
* //=============
* // In the original grammar, some checking (through RATS functions) is done to differentiate
* // between different kinds of Infix, and different kinds of Name. Currently, I have all infixes
* // as 'Infix', and for Names have 'Name' and 'TypeName', which are currenlty identical. The
* // grammar uses them for different things, so I'll keep them separate to make things easier later
* // when I am hopefully able to split them up.
* TypeName := name=Name
* 	.value = string {return name.value}
* Name := nameString=NameString 
* 	.value = string {return nameString.value}
* NameString := prefix={pre=NameChar* dot='\.' post=NameString} 
* 	.value = string {
* 		return prefix.pre.map(NameChar => NameChar.value).join('') + '.' + prefix.post.value
* 	}
* 	| final=NameChar+
* 	.value = string{
* 		return final.map(NameChar=> NameChar.value).join('')
* 	}
* NameChar := char='[a-zA-Z0-9_]'
* 	.value = string{return char}
* // their infix also allows colon ':', but this is incompatible because infix function definitions are ended with a colon 
* Infix := char='[\*\+\=\-<>\!\&\\|]'+
* 	.value = string{return char.join("")}
* ws := {sp | lb}* 						//any whitespace
* os := {' ' | '\t' | '\v'}*				//optional spacing (within one line)
* sp := {' ' | '\t' | '\v'}+				//1 or more spaces/tabs
* lb := {'\n' | '\r\n'}+					//1 or more linebreaks 	
*/
type Nullable<T> = T | null;
type $$RuleType<T> = () => Nullable<T>;
export interface ASTNodeIntf {
    kind: ASTKinds;
}
export enum ASTKinds {
    AWNRoot = "AWNRoot",
    Block_1 = "Block_1",
    Block_2 = "Block_2",
    Block_3 = "Block_3",
    Block_4 = "Block_4",
    Block_5 = "Block_5",
    Block_6 = "Block_6",
    Block_7 = "Block_7",
    Block_8 = "Block_8",
    Block_9 = "Block_9",
    Include = "Include",
    Type = "Type",
    Type_$0 = "Type_$0",
    ConVar_1 = "ConVar_1",
    ConVar_2 = "ConVar_2",
    ConVar_$0 = "ConVar_$0",
    Function_1 = "Function_1",
    Function_2 = "Function_2",
    Process_1 = "Process_1",
    Process_2 = "Process_2",
    Process_$0 = "Process_$0",
    Alias_1 = "Alias_1",
    Alias_2 = "Alias_2",
    Alias_$0 = "Alias_$0",
    TE_1 = "TE_1",
    TE_2 = "TE_2",
    TE_3 = "TE_3",
    TE_4 = "TE_4",
    TE1_1 = "TE1_1",
    TE1_2 = "TE1_2",
    TE1_3 = "TE1_3",
    TE1_$0 = "TE1_$0",
    SPE_1 = "SPE_1",
    SPE_2 = "SPE_2",
    SPE_3 = "SPE_3",
    SPE_4 = "SPE_4",
    SPE_5 = "SPE_5",
    SPE_6 = "SPE_6",
    SPE_7 = "SPE_7",
    SPE_8 = "SPE_8",
    SPE_9 = "SPE_9",
    SPE_10 = "SPE_10",
    SPE_$0 = "SPE_$0",
    SPE_$1 = "SPE_$1",
    SPE1 = "SPE1",
    DE_1 = "DE_1",
    DE_2 = "DE_2",
    DE_3 = "DE_3",
    DE_4 = "DE_4",
    DE_5 = "DE_5",
    DE_6 = "DE_6",
    DE_7 = "DE_7",
    DE_8 = "DE_8",
    DE_9 = "DE_9",
    DE_$0_1 = "DE_$0_1",
    DE_$0_2 = "DE_$0_2",
    DE1_1 = "DE1_1",
    DE1_2 = "DE1_2",
    DE1_3 = "DE1_3",
    DE1_4 = "DE1_4",
    DE1_5 = "DE1_5",
    DE1_6 = "DE1_6",
    DE1_7 = "DE1_7",
    DE1_8 = "DE1_8",
    DE1_9 = "DE1_9",
    DE1_10 = "DE1_10",
    DE1_11 = "DE1_11",
    DE1_12 = "DE1_12",
    DE1_13 = "DE1_13",
    DE1_$0 = "DE1_$0",
    TypeName = "TypeName",
    Name = "Name",
    NameString_1 = "NameString_1",
    NameString_2 = "NameString_2",
    NameString_$0 = "NameString_$0",
    NameChar = "NameChar",
    Infix = "Infix",
    ws = "ws",
    ws_$0_1 = "ws_$0_1",
    ws_$0_2 = "ws_$0_2",
    os = "os",
    os_$0_1 = "os_$0_1",
    os_$0_2 = "os_$0_2",
    os_$0_3 = "os_$0_3",
    sp = "sp",
    sp_$0_1 = "sp_$0_1",
    sp_$0_2 = "sp_$0_2",
    sp_$0_3 = "sp_$0_3",
    lb = "lb",
    lb_$0_1 = "lb_$0_1",
    lb_$0_2 = "lb_$0_2",
    $EOF = "$EOF",
}
export interface AWNRoot {
    kind: ASTKinds.AWNRoot;
    block: Block[];
}
export type Block = Block_1 | Block_2 | Block_3 | Block_4 | Block_5 | Block_6 | Block_7 | Block_8 | Block_9;
export interface Block_1 {
    kind: ASTKinds.Block_1;
    pos: PosInfo;
    include: [Include, ...Include[]];
}
export interface Block_2 {
    kind: ASTKinds.Block_2;
    pos: PosInfo;
    include: Include;
}
export interface Block_3 {
    kind: ASTKinds.Block_3;
    pos: PosInfo;
    type: [Type, ...Type[]];
}
export interface Block_4 {
    kind: ASTKinds.Block_4;
    pos: PosInfo;
    var: [ConVar, ...ConVar[]];
}
export interface Block_5 {
    kind: ASTKinds.Block_5;
    pos: PosInfo;
    const: [ConVar, ...ConVar[]];
}
export interface Block_6 {
    kind: ASTKinds.Block_6;
    pos: PosInfo;
    func: [Function, ...Function[]];
}
export interface Block_7 {
    kind: ASTKinds.Block_7;
    pos: PosInfo;
    proc: [Process, ...Process[]];
}
export interface Block_8 {
    kind: ASTKinds.Block_8;
    pos: PosInfo;
    proc: Process;
}
export interface Block_9 {
    kind: ASTKinds.Block_9;
    pos: PosInfo;
    alias: [Alias, ...Alias[]];
}
export interface Include {
    kind: ASTKinds.Include;
    posS: PosInfo;
    name: Name;
    posE: PosInfo;
}
export interface Type {
    kind: ASTKinds.Type;
    posS: PosInfo;
    typeName: TypeName;
    posE: PosInfo;
    typeExprW: Nullable<Type_$0>;
}
export interface Type_$0 {
    kind: ASTKinds.Type_$0;
    typeExpr: TE;
}
export type ConVar = ConVar_1 | ConVar_2;
export class ConVar_1 {
    public kind: ASTKinds.ConVar_1 = ASTKinds.ConVar_1;
    public typeExpr: TE;
    public posS: PosInfo;
    public nameFirst: Name;
    public posE: PosInfo;
    public namesMore: ConVar_$0[];
    public typeDeclaredFirst: boolean;
    constructor(typeExpr: TE, posS: PosInfo, nameFirst: Name, posE: PosInfo, namesMore: ConVar_$0[]){
        this.typeExpr = typeExpr;
        this.posS = posS;
        this.nameFirst = nameFirst;
        this.posE = posE;
        this.namesMore = namesMore;
        this.typeDeclaredFirst = ((): boolean => {
        return true
        })();
    }
}
export class ConVar_2 {
    public kind: ASTKinds.ConVar_2 = ASTKinds.ConVar_2;
    public posS: PosInfo;
    public name: Name;
    public posE: PosInfo;
    public typeExpr: TE;
    public typeDeclaredFirst: boolean;
    constructor(posS: PosInfo, name: Name, posE: PosInfo, typeExpr: TE){
        this.posS = posS;
        this.name = name;
        this.posE = posE;
        this.typeExpr = typeExpr;
        this.typeDeclaredFirst = ((): boolean => {
        return false
        })();
    }
}
export interface ConVar_$0 {
    kind: ASTKinds.ConVar_$0;
    posS: PosInfo;
    name: Name;
    posE: PosInfo;
}
export type Function = Function_1 | Function_2;
export interface Function_1 {
    kind: ASTKinds.Function_1;
    posS: PosInfo;
    name: Name;
    posE: PosInfo;
    typeExpr: TE;
}
export interface Function_2 {
    kind: ASTKinds.Function_2;
    posS: PosInfo;
    name: Infix;
    posE: PosInfo;
    typeExpr: TE;
}
export type Process = Process_1 | Process_2;
export interface Process_1 {
    kind: ASTKinds.Process_1;
    pos1S: PosInfo;
    nameFirst: Name;
    pos1E: PosInfo;
    pos2S: PosInfo;
    argFirst: Nullable<Name>;
    pos2E: PosInfo;
    argsMore: Process_$0[];
    proc: SPE;
}
export interface Process_2 {
    kind: ASTKinds.Process_2;
    posS: PosInfo;
    name: Name;
    posE: PosInfo;
    proc: SPE;
}
export interface Process_$0 {
    kind: ASTKinds.Process_$0;
    posS: PosInfo;
    name: Name;
    posE: PosInfo;
}
export type Alias = Alias_1 | Alias_2;
export interface Alias_1 {
    kind: ASTKinds.Alias_1;
    pos1S: PosInfo;
    nameFirst: Name;
    pos1E: PosInfo;
    pos2S: PosInfo;
    argFirst: Nullable<Name>;
    pos2E: PosInfo;
    argsMore: Alias_$0[];
}
export interface Alias_2 {
    kind: ASTKinds.Alias_2;
    posS: PosInfo;
    name: Name;
    posE: PosInfo;
    dataExp: DE;
}
export interface Alias_$0 {
    kind: ASTKinds.Alias_$0;
    posS: PosInfo;
    name: Name;
    posE: PosInfo;
}
export type TE = TE_1 | TE_2 | TE_3 | TE_4;
export class TE_1 {
    public kind: ASTKinds.TE_1 = ASTKinds.TE_1;
    public typeExpr: TE;
    public typeExprMore: Nullable<TE1>;
    public typetype: string;
    constructor(typeExpr: TE, typeExprMore: Nullable<TE1>){
        this.typeExpr = typeExpr;
        this.typeExprMore = typeExprMore;
        this.typetype = ((): string => {
        return "brackets"
        })();
    }
}
export class TE_2 {
    public kind: ASTKinds.TE_2 = ASTKinds.TE_2;
    public pos: PosInfo;
    public typeExpr: TE;
    public typeExprMore: Nullable<TE1>;
    public typetype: string;
    constructor(pos: PosInfo, typeExpr: TE, typeExprMore: Nullable<TE1>){
        this.pos = pos;
        this.typeExpr = typeExpr;
        this.typeExprMore = typeExprMore;
        this.typetype = ((): string => {
        return "pow"
        })();
    }
}
export class TE_3 {
    public kind: ASTKinds.TE_3 = ASTKinds.TE_3;
    public typeExpr: TE;
    public typeExprMore: Nullable<TE1>;
    public typetype: string;
    constructor(typeExpr: TE, typeExprMore: Nullable<TE1>){
        this.typeExpr = typeExpr;
        this.typeExprMore = typeExprMore;
        this.typetype = ((): string => {
        return "list"
        })();
    }
}
export class TE_4 {
    public kind: ASTKinds.TE_4 = ASTKinds.TE_4;
    public posS: PosInfo;
    public typename: TypeName;
    public posE: PosInfo;
    public typeExprMore: Nullable<TE1>;
    public typetype: string;
    constructor(posS: PosInfo, typename: TypeName, posE: PosInfo, typeExprMore: Nullable<TE1>){
        this.posS = posS;
        this.typename = typename;
        this.posE = posE;
        this.typeExprMore = typeExprMore;
        this.typetype = ((): string => {
        return "name"
        })();
    }
}
export type TE1 = TE1_1 | TE1_2 | TE1_3;
export class TE1_1 {
    public kind: ASTKinds.TE1_1 = ASTKinds.TE1_1;
    public typeExpr: TE;
    public typeExprMore: Nullable<TE1>;
    public typetype: string;
    constructor(typeExpr: TE, typeExprMore: Nullable<TE1>){
        this.typeExpr = typeExpr;
        this.typeExprMore = typeExprMore;
        this.typetype = ((): string => {
        return "function"
        })();
    }
}
export class TE1_2 {
    public kind: ASTKinds.TE1_2 = ASTKinds.TE1_2;
    public typeExpr: TE;
    public typeExprMore: Nullable<TE1>;
    public typetype: string;
    constructor(typeExpr: TE, typeExprMore: Nullable<TE1>){
        this.typeExpr = typeExpr;
        this.typeExprMore = typeExprMore;
        this.typetype = ((): string => {
        return "part_function"
        })();
    }
}
export class TE1_3 {
    public kind: ASTKinds.TE1_3 = ASTKinds.TE1_3;
    public products: TE1_$0[];
    public typeExprMore: Nullable<TE1>;
    public typetype: string;
    constructor(products: TE1_$0[], typeExprMore: Nullable<TE1>){
        this.products = products;
        this.typeExprMore = typeExprMore;
        this.typetype = ((): string => {
        return "product"
        })();
    }
}
export interface TE1_$0 {
    kind: ASTKinds.TE1_$0;
    pos: PosInfo;
    typeExpr: TE;
}
export type SPE = SPE_1 | SPE_2 | SPE_3 | SPE_4 | SPE_5 | SPE_6 | SPE_7 | SPE_8 | SPE_9 | SPE_10;
export class SPE_1 {
    public kind: ASTKinds.SPE_1 = ASTKinds.SPE_1;
    public posDES: PosInfo;
    public dataExp: DE;
    public posDEE: PosInfo;
    public proc: SPE;
    public procMore: Nullable<SPE1>;
    public procType: string;
    constructor(posDES: PosInfo, dataExp: DE, posDEE: PosInfo, proc: SPE, procMore: Nullable<SPE1>){
        this.posDES = posDES;
        this.dataExp = dataExp;
        this.posDEE = posDEE;
        this.proc = proc;
        this.procMore = procMore;
        this.procType = ((): string => {
        return "guard"
        })();
    }
}
export class SPE_2 {
    public kind: ASTKinds.SPE_2 = ASTKinds.SPE_2;
    public posA: PosInfo;
    public name: Name;
    public posB: PosInfo;
    public posC: PosInfo;
    public dataExpAssignment: DE;
    public posD: PosInfo;
    public proc: SPE;
    public procMore: Nullable<SPE1>;
    public procType: string;
    constructor(posA: PosInfo, name: Name, posB: PosInfo, posC: PosInfo, dataExpAssignment: DE, posD: PosInfo, proc: SPE, procMore: Nullable<SPE1>){
        this.posA = posA;
        this.name = name;
        this.posB = posB;
        this.posC = posC;
        this.dataExpAssignment = dataExpAssignment;
        this.posD = posD;
        this.proc = proc;
        this.procMore = procMore;
        this.procType = ((): string => {
        return "assignment"
        })();
    }
}
export class SPE_3 {
    public kind: ASTKinds.SPE_3 = ASTKinds.SPE_3;
    public pos: PosInfo;
    public posA: PosInfo;
    public dataExpL: DE;
    public posB: PosInfo;
    public dataExpR: DE;
    public posC: PosInfo;
    public procL: SPE;
    public procR: SPE;
    public procMore: Nullable<SPE1>;
    public procType: string;
    constructor(pos: PosInfo, posA: PosInfo, dataExpL: DE, posB: PosInfo, dataExpR: DE, posC: PosInfo, procL: SPE, procR: SPE, procMore: Nullable<SPE1>){
        this.pos = pos;
        this.posA = posA;
        this.dataExpL = dataExpL;
        this.posB = posB;
        this.dataExpR = dataExpR;
        this.posC = posC;
        this.procL = procL;
        this.procR = procR;
        this.procMore = procMore;
        this.procType = ((): string => {
        return "unicast"
        })();
    }
}
export class SPE_4 {
    public kind: ASTKinds.SPE_4 = ASTKinds.SPE_4;
    public pos: PosInfo;
    public posA: PosInfo;
    public dataExp: DE;
    public posB: PosInfo;
    public proc: SPE;
    public procMore: Nullable<SPE1>;
    public procType: string;
    constructor(pos: PosInfo, posA: PosInfo, dataExp: DE, posB: PosInfo, proc: SPE, procMore: Nullable<SPE1>){
        this.pos = pos;
        this.posA = posA;
        this.dataExp = dataExp;
        this.posB = posB;
        this.proc = proc;
        this.procMore = procMore;
        this.procType = ((): string => {
        return "broadcast"
        })();
    }
}
export class SPE_5 {
    public kind: ASTKinds.SPE_5 = ASTKinds.SPE_5;
    public pos: PosInfo;
    public posA: PosInfo;
    public dataExpL: DE;
    public posB: PosInfo;
    public dataExpR: DE;
    public posC: PosInfo;
    public proc: SPE;
    public procMore: Nullable<SPE1>;
    public procType: string;
    constructor(pos: PosInfo, posA: PosInfo, dataExpL: DE, posB: PosInfo, dataExpR: DE, posC: PosInfo, proc: SPE, procMore: Nullable<SPE1>){
        this.pos = pos;
        this.posA = posA;
        this.dataExpL = dataExpL;
        this.posB = posB;
        this.dataExpR = dataExpR;
        this.posC = posC;
        this.proc = proc;
        this.procMore = procMore;
        this.procType = ((): string => {
        return "groupcast"
        })();
    }
}
export class SPE_6 {
    public kind: ASTKinds.SPE_6 = ASTKinds.SPE_6;
    public pos: PosInfo;
    public posA: PosInfo;
    public dataExp: DE;
    public posB: PosInfo;
    public proc: SPE;
    public procMore: Nullable<SPE1>;
    public procType: string;
    constructor(pos: PosInfo, posA: PosInfo, dataExp: DE, posB: PosInfo, proc: SPE, procMore: Nullable<SPE1>){
        this.pos = pos;
        this.posA = posA;
        this.dataExp = dataExp;
        this.posB = posB;
        this.proc = proc;
        this.procMore = procMore;
        this.procType = ((): string => {
        return "send"
        })();
    }
}
export class SPE_7 {
    public kind: ASTKinds.SPE_7 = ASTKinds.SPE_7;
    public pos: PosInfo;
    public posA: PosInfo;
    public dataExp: DE;
    public posB: PosInfo;
    public proc: SPE;
    public procMore: Nullable<SPE1>;
    public procType: string;
    constructor(pos: PosInfo, posA: PosInfo, dataExp: DE, posB: PosInfo, proc: SPE, procMore: Nullable<SPE1>){
        this.pos = pos;
        this.posA = posA;
        this.dataExp = dataExp;
        this.posB = posB;
        this.proc = proc;
        this.procMore = procMore;
        this.procType = ((): string => {
        return "deliver"
        })();
    }
}
export class SPE_8 {
    public kind: ASTKinds.SPE_8 = ASTKinds.SPE_8;
    public pos: PosInfo;
    public posS: PosInfo;
    public name: Name;
    public posE: PosInfo;
    public dataExpList: SPE_$0[];
    public proc: SPE;
    public procMore: Nullable<SPE1>;
    public procType: string;
    constructor(pos: PosInfo, posS: PosInfo, name: Name, posE: PosInfo, dataExpList: SPE_$0[], proc: SPE, procMore: Nullable<SPE1>){
        this.pos = pos;
        this.posS = posS;
        this.name = name;
        this.posE = posE;
        this.dataExpList = dataExpList;
        this.proc = proc;
        this.procMore = procMore;
        this.procType = ((): string => {
        return "receive"
        })();
    }
}
export class SPE_9 {
    public kind: ASTKinds.SPE_9 = ASTKinds.SPE_9;
    public proc: SPE;
    public procMore: Nullable<SPE1>;
    public procType: string;
    constructor(proc: SPE, procMore: Nullable<SPE1>){
        this.proc = proc;
        this.procMore = procMore;
        this.procType = ((): string => {
        return "brackets"
        })();
    }
}
export class SPE_10 {
    public kind: ASTKinds.SPE_10 = ASTKinds.SPE_10;
    public posS: PosInfo;
    public name: Name;
    public posE: PosInfo;
    public dataExpFirst: Nullable<DE>;
    public dataExpW: SPE_$1[];
    public procMore: Nullable<SPE1>;
    public procType: string;
    constructor(posS: PosInfo, name: Name, posE: PosInfo, dataExpFirst: Nullable<DE>, dataExpW: SPE_$1[], procMore: Nullable<SPE1>){
        this.posS = posS;
        this.name = name;
        this.posE = posE;
        this.dataExpFirst = dataExpFirst;
        this.dataExpW = dataExpW;
        this.procMore = procMore;
        this.procType = ((): string => {
        return "call"
        })();
    }
}
export interface SPE_$0 {
    kind: ASTKinds.SPE_$0;
    dataExp: DE;
}
export interface SPE_$1 {
    kind: ASTKinds.SPE_$1;
    dataExp: DE;
}
export class SPE1 {
    public kind: ASTKinds.SPE1 = ASTKinds.SPE1;
    public proc: SPE;
    public procMore: Nullable<SPE1>;
    public procType: string;
    constructor(proc: SPE, procMore: Nullable<SPE1>){
        this.proc = proc;
        this.procMore = procMore;
        this.procType = ((): string => {
        return "choice"
        })();
    }
}
export type DE = DE_1 | DE_2 | DE_3 | DE_4 | DE_5 | DE_6 | DE_7 | DE_8 | DE_9;
export class DE_1 {
    public kind: ASTKinds.DE_1 = ASTKinds.DE_1;
    public posS: PosInfo;
    public name: Name;
    public posE: PosInfo;
    public dataExpLeft: DE;
    public dataExpRight: DE;
    public dataExpMore: Nullable<DE1>;
    public dataExpType: string;
    constructor(posS: PosInfo, name: Name, posE: PosInfo, dataExpLeft: DE, dataExpRight: DE, dataExpMore: Nullable<DE1>){
        this.posS = posS;
        this.name = name;
        this.posE = posE;
        this.dataExpLeft = dataExpLeft;
        this.dataExpRight = dataExpRight;
        this.dataExpMore = dataExpMore;
        this.dataExpType = ((): string => {
        return "partial"
        })();
    }
}
export class DE_2 {
    public kind: ASTKinds.DE_2 = ASTKinds.DE_2;
    public posS: PosInfo;
    public name: Name;
    public posE: PosInfo;
    public dataExpRight: DE;
    public dataExpMore: Nullable<DE1>;
    public dataExpType: string;
    constructor(posS: PosInfo, name: Name, posE: PosInfo, dataExpRight: DE, dataExpMore: Nullable<DE1>){
        this.posS = posS;
        this.name = name;
        this.posE = posE;
        this.dataExpRight = dataExpRight;
        this.dataExpMore = dataExpMore;
        this.dataExpType = ((): string => {
        return "set"
        })();
    }
}
export class DE_3 {
    public kind: ASTKinds.DE_3 = ASTKinds.DE_3;
    public dataExp: DE;
    public dataExpMore: Nullable<DE1>;
    public dataExpType: string;
    constructor(dataExp: DE, dataExpMore: Nullable<DE1>){
        this.dataExp = dataExp;
        this.dataExpMore = dataExpMore;
        this.dataExpType = ((): string => {
        return "singleton"
        })();
    }
}
export class DE_4 {
    public kind: ASTKinds.DE_4 = ASTKinds.DE_4;
    public pos: PosInfo;
    public posS: PosInfo;
    public name: Name;
    public dataExp: DE;
    public dataExpMore: Nullable<DE1>;
    public dataExpType: string;
    constructor(pos: PosInfo, posS: PosInfo, name: Name, dataExp: DE, dataExpMore: Nullable<DE1>){
        this.pos = pos;
        this.posS = posS;
        this.name = name;
        this.dataExp = dataExp;
        this.dataExpMore = dataExpMore;
        this.dataExpType = ((): string => {
        return "lambda"
        })();
    }
}
export class DE_5 {
    public kind: ASTKinds.DE_5 = ASTKinds.DE_5;
    public pos: PosInfo;
    public posS: PosInfo;
    public name: Name;
    public dataExp: DE;
    public dataExpMore: Nullable<DE1>;
    public dataExpType: string;
    constructor(pos: PosInfo, posS: PosInfo, name: Name, dataExp: DE, dataExpMore: Nullable<DE1>){
        this.pos = pos;
        this.posS = posS;
        this.name = name;
        this.dataExp = dataExp;
        this.dataExpMore = dataExpMore;
        this.dataExpType = ((): string => {
        return "forall"
        })();
    }
}
export class DE_6 {
    public kind: ASTKinds.DE_6 = ASTKinds.DE_6;
    public pos: PosInfo;
    public posS: PosInfo;
    public name: Name;
    public dataExp: DE;
    public dataExpMore: Nullable<DE1>;
    public dataExpType: string;
    constructor(pos: PosInfo, posS: PosInfo, name: Name, dataExp: DE, dataExpMore: Nullable<DE1>){
        this.pos = pos;
        this.posS = posS;
        this.name = name;
        this.dataExp = dataExp;
        this.dataExpMore = dataExpMore;
        this.dataExpType = ((): string => {
        return "exists"
        })();
    }
}
export class DE_7 {
    public kind: ASTKinds.DE_7 = ASTKinds.DE_7;
    public posN: PosInfo;
    public name: DE_$0;
    public posNEnd: PosInfo;
    public posS: PosInfo;
    public dataExp: DE;
    public posE: PosInfo;
    public dataExpMore: Nullable<DE1>;
    public dataExpType: string;
    constructor(posN: PosInfo, name: DE_$0, posNEnd: PosInfo, posS: PosInfo, dataExp: DE, posE: PosInfo, dataExpMore: Nullable<DE1>){
        this.posN = posN;
        this.name = name;
        this.posNEnd = posNEnd;
        this.posS = posS;
        this.dataExp = dataExp;
        this.posE = posE;
        this.dataExpMore = dataExpMore;
        this.dataExpType = ((): string => {
        return "function"
        })();
    }
}
export class DE_8 {
    public kind: ASTKinds.DE_8 = ASTKinds.DE_8;
    public dataExp: DE;
    public dataExpMore: Nullable<DE1>;
    public dataExpType: string;
    constructor(dataExp: DE, dataExpMore: Nullable<DE1>){
        this.dataExp = dataExp;
        this.dataExpMore = dataExpMore;
        this.dataExpType = ((): string => {
        return "brackets"
        })();
    }
}
export class DE_9 {
    public kind: ASTKinds.DE_9 = ASTKinds.DE_9;
    public posS: PosInfo;
    public name: Name;
    public posE: PosInfo;
    public dataExpMore: Nullable<DE1>;
    public dataExpType: string;
    constructor(posS: PosInfo, name: Name, posE: PosInfo, dataExpMore: Nullable<DE1>){
        this.posS = posS;
        this.name = name;
        this.posE = posE;
        this.dataExpMore = dataExpMore;
        this.dataExpType = ((): string => {
        return "name"
        })();
    }
}
export type DE_$0 = DE_$0_1 | DE_$0_2;
export type DE_$0_1 = Name;
export type DE_$0_2 = Infix;
export type DE1 = DE1_1 | DE1_2 | DE1_3 | DE1_4 | DE1_5 | DE1_6 | DE1_7 | DE1_8 | DE1_9 | DE1_10 | DE1_11 | DE1_12 | DE1_13;
export class DE1_1 {
    public kind: ASTKinds.DE1_1 = ASTKinds.DE1_1;
    public posS: PosInfo;
    public posE: PosInfo;
    public dataExp: DE;
    public dataExpMore: Nullable<DE1>;
    public dataExpType: string;
    constructor(posS: PosInfo, posE: PosInfo, dataExp: DE, dataExpMore: Nullable<DE1>){
        this.posS = posS;
        this.posE = posE;
        this.dataExp = dataExp;
        this.dataExpMore = dataExpMore;
        this.dataExpType = ((): string => {
        return "implicates"
        })();
    }
}
export class DE1_2 {
    public kind: ASTKinds.DE1_2 = ASTKinds.DE1_2;
    public posS: PosInfo;
    public posE: PosInfo;
    public dataExp: DE;
    public dataExpMore: Nullable<DE1>;
    public dataExpType: string;
    constructor(posS: PosInfo, posE: PosInfo, dataExp: DE, dataExpMore: Nullable<DE1>){
        this.posS = posS;
        this.posE = posE;
        this.dataExp = dataExp;
        this.dataExpMore = dataExpMore;
        this.dataExpType = ((): string => {
        return "iff"
        })();
    }
}
export class DE1_3 {
    public kind: ASTKinds.DE1_3 = ASTKinds.DE1_3;
    public posS: PosInfo;
    public posE: PosInfo;
    public dataExp: DE;
    public dataExpMore: Nullable<DE1>;
    public dataExpType: string;
    constructor(posS: PosInfo, posE: PosInfo, dataExp: DE, dataExpMore: Nullable<DE1>){
        this.posS = posS;
        this.posE = posE;
        this.dataExp = dataExp;
        this.dataExpMore = dataExpMore;
        this.dataExpType = ((): string => {
        return "and"
        })();
    }
}
export class DE1_4 {
    public kind: ASTKinds.DE1_4 = ASTKinds.DE1_4;
    public posS: PosInfo;
    public posE: PosInfo;
    public dataExp: DE;
    public dataExpMore: Nullable<DE1>;
    public dataExpType: string;
    constructor(posS: PosInfo, posE: PosInfo, dataExp: DE, dataExpMore: Nullable<DE1>){
        this.posS = posS;
        this.posE = posE;
        this.dataExp = dataExp;
        this.dataExpMore = dataExpMore;
        this.dataExpType = ((): string => {
        return "or"
        })();
    }
}
export class DE1_5 {
    public kind: ASTKinds.DE1_5 = ASTKinds.DE1_5;
    public posS: PosInfo;
    public posE: PosInfo;
    public dataExp: DE;
    public dataExpMore: Nullable<DE1>;
    public dataExpType: string;
    constructor(posS: PosInfo, posE: PosInfo, dataExp: DE, dataExpMore: Nullable<DE1>){
        this.posS = posS;
        this.posE = posE;
        this.dataExp = dataExp;
        this.dataExpMore = dataExpMore;
        this.dataExpType = ((): string => {
        return "eq"
        })();
    }
}
export class DE1_6 {
    public kind: ASTKinds.DE1_6 = ASTKinds.DE1_6;
    public posS: PosInfo;
    public posE: PosInfo;
    public dataExp: DE;
    public dataExpMore: Nullable<DE1>;
    public dataExpType: string;
    constructor(posS: PosInfo, posE: PosInfo, dataExp: DE, dataExpMore: Nullable<DE1>){
        this.posS = posS;
        this.posE = posE;
        this.dataExp = dataExp;
        this.dataExpMore = dataExpMore;
        this.dataExpType = ((): string => {
        return "neq"
        })();
    }
}
export class DE1_7 {
    public kind: ASTKinds.DE1_7 = ASTKinds.DE1_7;
    public posS: PosInfo;
    public posE: PosInfo;
    public dataExp: DE;
    public dataExpMore: Nullable<DE1>;
    public dataExpType: string;
    constructor(posS: PosInfo, posE: PosInfo, dataExp: DE, dataExpMore: Nullable<DE1>){
        this.posS = posS;
        this.posE = posE;
        this.dataExp = dataExp;
        this.dataExpMore = dataExpMore;
        this.dataExpType = ((): string => {
        return "gtreq"
        })();
    }
}
export class DE1_8 {
    public kind: ASTKinds.DE1_8 = ASTKinds.DE1_8;
    public posS: PosInfo;
    public posE: PosInfo;
    public dataExp: DE;
    public dataExpMore: Nullable<DE1>;
    public dataExpType: string;
    constructor(posS: PosInfo, posE: PosInfo, dataExp: DE, dataExpMore: Nullable<DE1>){
        this.posS = posS;
        this.posE = posE;
        this.dataExp = dataExp;
        this.dataExpMore = dataExpMore;
        this.dataExpType = ((): string => {
        return "leseq"
        })();
    }
}
export class DE1_9 {
    public kind: ASTKinds.DE1_9 = ASTKinds.DE1_9;
    public posS: PosInfo;
    public posE: PosInfo;
    public dataExp: DE;
    public dataExpMore: Nullable<DE1>;
    public dataExpType: string;
    constructor(posS: PosInfo, posE: PosInfo, dataExp: DE, dataExpMore: Nullable<DE1>){
        this.posS = posS;
        this.posE = posE;
        this.dataExp = dataExp;
        this.dataExpMore = dataExpMore;
        this.dataExpType = ((): string => {
        return "gtr"
        })();
    }
}
export class DE1_10 {
    public kind: ASTKinds.DE1_10 = ASTKinds.DE1_10;
    public posS: PosInfo;
    public posE: PosInfo;
    public dataExp: DE;
    public dataExpMore: Nullable<DE1>;
    public dataExpType: string;
    constructor(posS: PosInfo, posE: PosInfo, dataExp: DE, dataExpMore: Nullable<DE1>){
        this.posS = posS;
        this.posE = posE;
        this.dataExp = dataExp;
        this.dataExpMore = dataExpMore;
        this.dataExpType = ((): string => {
        return "les"
        })();
    }
}
export class DE1_11 {
    public kind: ASTKinds.DE1_11 = ASTKinds.DE1_11;
    public posS: PosInfo;
    public posE: PosInfo;
    public dataExp: DE;
    public dataExpMore: Nullable<DE1>;
    public dataExpType: string;
    constructor(posS: PosInfo, posE: PosInfo, dataExp: DE, dataExpMore: Nullable<DE1>){
        this.posS = posS;
        this.posE = posE;
        this.dataExp = dataExp;
        this.dataExpMore = dataExpMore;
        this.dataExpType = ((): string => {
        return "col"
        })();
    }
}
export class DE1_12 {
    public kind: ASTKinds.DE1_12 = ASTKinds.DE1_12;
    public posS: PosInfo;
    public func: Infix;
    public posE: PosInfo;
    public dataExp: DE;
    public dataExpMore: Nullable<DE1>;
    public dataExpType: string;
    constructor(posS: PosInfo, func: Infix, posE: PosInfo, dataExp: DE, dataExpMore: Nullable<DE1>){
        this.posS = posS;
        this.func = func;
        this.posE = posE;
        this.dataExp = dataExp;
        this.dataExpMore = dataExpMore;
        this.dataExpType = ((): string => {
        return "infix"
        })();
    }
}
export class DE1_13 {
    public kind: ASTKinds.DE1_13 = ASTKinds.DE1_13;
    public objects: DE1_$0[];
    public dataExpMore: Nullable<DE1>;
    public dataExpType: string;
    constructor(objects: DE1_$0[], dataExpMore: Nullable<DE1>){
        this.objects = objects;
        this.dataExpMore = dataExpMore;
        this.dataExpType = ((): string => {
        return "tuple"
        })();
    }
}
export interface DE1_$0 {
    kind: ASTKinds.DE1_$0;
    pos: PosInfo;
    dataExp: DE;
}
export class TypeName {
    public kind: ASTKinds.TypeName = ASTKinds.TypeName;
    public name: Name;
    public value: string;
    constructor(name: Name){
        this.name = name;
        this.value = ((): string => {
        return name.value
        })();
    }
}
export class Name {
    public kind: ASTKinds.Name = ASTKinds.Name;
    public nameString: NameString;
    public value: string;
    constructor(nameString: NameString){
        this.nameString = nameString;
        this.value = ((): string => {
        return nameString.value
        })();
    }
}
export type NameString = NameString_1 | NameString_2;
export class NameString_1 {
    public kind: ASTKinds.NameString_1 = ASTKinds.NameString_1;
    public prefix: NameString_$0;
    public value: string;
    constructor(prefix: NameString_$0){
        this.prefix = prefix;
        this.value = ((): string => {
        return prefix.pre.map(NameChar => NameChar.value).join('') + '.' + prefix.post.value
        })();
    }
}
export class NameString_2 {
    public kind: ASTKinds.NameString_2 = ASTKinds.NameString_2;
    public final: [NameChar, ...NameChar[]];
    public value: string;
    constructor(final: [NameChar, ...NameChar[]]){
        this.final = final;
        this.value = ((): string => {
        return final.map(NameChar=> NameChar.value).join('')
        })();
    }
}
export interface NameString_$0 {
    kind: ASTKinds.NameString_$0;
    pre: NameChar[];
    dot: string;
    post: NameString;
}
export class NameChar {
    public kind: ASTKinds.NameChar = ASTKinds.NameChar;
    public char: string;
    public value: string;
    constructor(char: string){
        this.char = char;
        this.value = ((): string => {
        return char
        })();
    }
}
export class Infix {
    public kind: ASTKinds.Infix = ASTKinds.Infix;
    public char: [string, ...string[]];
    public value: string;
    constructor(char: [string, ...string[]]){
        this.char = char;
        this.value = ((): string => {
        return char.join("")
        })();
    }
}
export type ws = ws_$0[];
export type ws_$0 = ws_$0_1 | ws_$0_2;
export type ws_$0_1 = sp;
export type ws_$0_2 = lb;
export type os = os_$0[];
export type os_$0 = os_$0_1 | os_$0_2 | os_$0_3;
export type os_$0_1 = string;
export type os_$0_2 = string;
export type os_$0_3 = string;
export type sp = [sp_$0, ...sp_$0[]];
export type sp_$0 = sp_$0_1 | sp_$0_2 | sp_$0_3;
export type sp_$0_1 = string;
export type sp_$0_2 = string;
export type sp_$0_3 = string;
export type lb = [lb_$0, ...lb_$0[]];
export type lb_$0 = lb_$0_1 | lb_$0_2;
export type lb_$0_1 = string;
export type lb_$0_2 = string;
export class Parser {
    private readonly input: string;
    private pos: PosInfo;
    private negating: boolean = false;
    private memoSafe: boolean = true;
    constructor(input: string) {
        this.pos = {overallPos: 0, line: 1, offset: 0};
        this.input = input;
    }
    public reset(pos: PosInfo) {
        this.pos = pos;
    }
    public finished(): boolean {
        return this.pos.overallPos === this.input.length;
    }
    public clearMemos(): void {
        this.$scope$TE1$memo.clear();
        this.$scope$DE1$memo.clear();
    }
    protected $scope$TE1$memo: Map<number, [Nullable<TE1>, PosInfo]> = new Map();
    protected $scope$DE1$memo: Map<number, [Nullable<DE1>, PosInfo]> = new Map();
    public matchAWNRoot($$dpth: number, $$cr?: ErrorTracker): Nullable<AWNRoot> {
        return this.run<AWNRoot>($$dpth,
            () => {
                let $scope$block: Nullable<Block[]>;
                let $$res: Nullable<AWNRoot> = null;
                if (true
                    && this.matchws($$dpth + 1, $$cr) !== null
                    && ($scope$block = this.loop<Block>(() => this.matchBlock($$dpth + 1, $$cr), 0, -1)) !== null
                    && this.matchws($$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.AWNRoot, block: $scope$block};
                }
                return $$res;
            });
    }
    public matchBlock($$dpth: number, $$cr?: ErrorTracker): Nullable<Block> {
        return this.choice<Block>([
            () => this.matchBlock_1($$dpth + 1, $$cr),
            () => this.matchBlock_2($$dpth + 1, $$cr),
            () => this.matchBlock_3($$dpth + 1, $$cr),
            () => this.matchBlock_4($$dpth + 1, $$cr),
            () => this.matchBlock_5($$dpth + 1, $$cr),
            () => this.matchBlock_6($$dpth + 1, $$cr),
            () => this.matchBlock_7($$dpth + 1, $$cr),
            () => this.matchBlock_8($$dpth + 1, $$cr),
            () => this.matchBlock_9($$dpth + 1, $$cr),
        ]);
    }
    public matchBlock_1($$dpth: number, $$cr?: ErrorTracker): Nullable<Block_1> {
        return this.run<Block_1>($$dpth,
            () => {
                let $scope$pos: Nullable<PosInfo>;
                let $scope$include: Nullable<[Include, ...Include[]]>;
                let $$res: Nullable<Block_1> = null;
                if (true
                    && ($scope$pos = this.mark()) !== null
                    && this.regexAccept(String.raw`(?:INCLUDES:)`, "", $$dpth + 1, $$cr) !== null
                    && ($scope$include = this.loopPlus<Include>(() => this.matchInclude($$dpth + 1, $$cr))) !== null
                ) {
                    $$res = {kind: ASTKinds.Block_1, pos: $scope$pos, include: $scope$include};
                }
                return $$res;
            });
    }
    public matchBlock_2($$dpth: number, $$cr?: ErrorTracker): Nullable<Block_2> {
        return this.run<Block_2>($$dpth,
            () => {
                let $scope$pos: Nullable<PosInfo>;
                let $scope$include: Nullable<Include>;
                let $$res: Nullable<Block_2> = null;
                if (true
                    && ($scope$pos = this.mark()) !== null
                    && this.regexAccept(String.raw`(?:include)`, "", $$dpth + 1, $$cr) !== null
                    && ($scope$include = this.matchInclude($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.Block_2, pos: $scope$pos, include: $scope$include};
                }
                return $$res;
            });
    }
    public matchBlock_3($$dpth: number, $$cr?: ErrorTracker): Nullable<Block_3> {
        return this.run<Block_3>($$dpth,
            () => {
                let $scope$pos: Nullable<PosInfo>;
                let $scope$type: Nullable<[Type, ...Type[]]>;
                let $$res: Nullable<Block_3> = null;
                if (true
                    && ($scope$pos = this.mark()) !== null
                    && this.regexAccept(String.raw`(?:TYPES:)`, "", $$dpth + 1, $$cr) !== null
                    && ($scope$type = this.loopPlus<Type>(() => this.matchType($$dpth + 1, $$cr))) !== null
                ) {
                    $$res = {kind: ASTKinds.Block_3, pos: $scope$pos, type: $scope$type};
                }
                return $$res;
            });
    }
    public matchBlock_4($$dpth: number, $$cr?: ErrorTracker): Nullable<Block_4> {
        return this.run<Block_4>($$dpth,
            () => {
                let $scope$pos: Nullable<PosInfo>;
                let $scope$var: Nullable<[ConVar, ...ConVar[]]>;
                let $$res: Nullable<Block_4> = null;
                if (true
                    && ($scope$pos = this.mark()) !== null
                    && this.regexAccept(String.raw`(?:VARIABLES:)`, "", $$dpth + 1, $$cr) !== null
                    && ($scope$var = this.loopPlus<ConVar>(() => this.matchConVar($$dpth + 1, $$cr))) !== null
                ) {
                    $$res = {kind: ASTKinds.Block_4, pos: $scope$pos, var: $scope$var};
                }
                return $$res;
            });
    }
    public matchBlock_5($$dpth: number, $$cr?: ErrorTracker): Nullable<Block_5> {
        return this.run<Block_5>($$dpth,
            () => {
                let $scope$pos: Nullable<PosInfo>;
                let $scope$const: Nullable<[ConVar, ...ConVar[]]>;
                let $$res: Nullable<Block_5> = null;
                if (true
                    && ($scope$pos = this.mark()) !== null
                    && this.regexAccept(String.raw`(?:CONSTANTS:)`, "", $$dpth + 1, $$cr) !== null
                    && ($scope$const = this.loopPlus<ConVar>(() => this.matchConVar($$dpth + 1, $$cr))) !== null
                ) {
                    $$res = {kind: ASTKinds.Block_5, pos: $scope$pos, const: $scope$const};
                }
                return $$res;
            });
    }
    public matchBlock_6($$dpth: number, $$cr?: ErrorTracker): Nullable<Block_6> {
        return this.run<Block_6>($$dpth,
            () => {
                let $scope$pos: Nullable<PosInfo>;
                let $scope$func: Nullable<[Function, ...Function[]]>;
                let $$res: Nullable<Block_6> = null;
                if (true
                    && ($scope$pos = this.mark()) !== null
                    && this.regexAccept(String.raw`(?:FUNCTIONS:)`, "", $$dpth + 1, $$cr) !== null
                    && ($scope$func = this.loopPlus<Function>(() => this.matchFunction($$dpth + 1, $$cr))) !== null
                ) {
                    $$res = {kind: ASTKinds.Block_6, pos: $scope$pos, func: $scope$func};
                }
                return $$res;
            });
    }
    public matchBlock_7($$dpth: number, $$cr?: ErrorTracker): Nullable<Block_7> {
        return this.run<Block_7>($$dpth,
            () => {
                let $scope$pos: Nullable<PosInfo>;
                let $scope$proc: Nullable<[Process, ...Process[]]>;
                let $$res: Nullable<Block_7> = null;
                if (true
                    && ($scope$pos = this.mark()) !== null
                    && this.regexAccept(String.raw`(?:PROCESSES:)`, "", $$dpth + 1, $$cr) !== null
                    && ($scope$proc = this.loopPlus<Process>(() => this.matchProcess($$dpth + 1, $$cr))) !== null
                ) {
                    $$res = {kind: ASTKinds.Block_7, pos: $scope$pos, proc: $scope$proc};
                }
                return $$res;
            });
    }
    public matchBlock_8($$dpth: number, $$cr?: ErrorTracker): Nullable<Block_8> {
        return this.run<Block_8>($$dpth,
            () => {
                let $scope$pos: Nullable<PosInfo>;
                let $scope$proc: Nullable<Process>;
                let $$res: Nullable<Block_8> = null;
                if (true
                    && ($scope$pos = this.mark()) !== null
                    && this.regexAccept(String.raw`(?:proc)`, "", $$dpth + 1, $$cr) !== null
                    && ($scope$proc = this.matchProcess($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.Block_8, pos: $scope$pos, proc: $scope$proc};
                }
                return $$res;
            });
    }
    public matchBlock_9($$dpth: number, $$cr?: ErrorTracker): Nullable<Block_9> {
        return this.run<Block_9>($$dpth,
            () => {
                let $scope$pos: Nullable<PosInfo>;
                let $scope$alias: Nullable<[Alias, ...Alias[]]>;
                let $$res: Nullable<Block_9> = null;
                if (true
                    && ($scope$pos = this.mark()) !== null
                    && this.regexAccept(String.raw`(?:ALIASES:)`, "", $$dpth + 1, $$cr) !== null
                    && ($scope$alias = this.loopPlus<Alias>(() => this.matchAlias($$dpth + 1, $$cr))) !== null
                ) {
                    $$res = {kind: ASTKinds.Block_9, pos: $scope$pos, alias: $scope$alias};
                }
                return $$res;
            });
    }
    public matchInclude($$dpth: number, $$cr?: ErrorTracker): Nullable<Include> {
        return this.run<Include>($$dpth,
            () => {
                let $scope$posS: Nullable<PosInfo>;
                let $scope$name: Nullable<Name>;
                let $scope$posE: Nullable<PosInfo>;
                let $$res: Nullable<Include> = null;
                if (true
                    && this.matchws($$dpth + 1, $$cr) !== null
                    && ($scope$posS = this.mark()) !== null
                    && ($scope$name = this.matchName($$dpth + 1, $$cr)) !== null
                    && ($scope$posE = this.mark()) !== null
                    && this.matchos($$dpth + 1, $$cr) !== null
                    && this.matchlb($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.Include, posS: $scope$posS, name: $scope$name, posE: $scope$posE};
                }
                return $$res;
            });
    }
    public matchType($$dpth: number, $$cr?: ErrorTracker): Nullable<Type> {
        return this.run<Type>($$dpth,
            () => {
                let $scope$posS: Nullable<PosInfo>;
                let $scope$typeName: Nullable<TypeName>;
                let $scope$posE: Nullable<PosInfo>;
                let $scope$typeExprW: Nullable<Nullable<Type_$0>>;
                let $$res: Nullable<Type> = null;
                if (true
                    && this.matchws($$dpth + 1, $$cr) !== null
                    && ($scope$posS = this.mark()) !== null
                    && ($scope$typeName = this.matchTypeName($$dpth + 1, $$cr)) !== null
                    && ($scope$posE = this.mark()) !== null
                    && (($scope$typeExprW = this.matchType_$0($$dpth + 1, $$cr)) || true)
                    && this.matchos($$dpth + 1, $$cr) !== null
                    && this.matchlb($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.Type, posS: $scope$posS, typeName: $scope$typeName, posE: $scope$posE, typeExprW: $scope$typeExprW};
                }
                return $$res;
            });
    }
    public matchType_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<Type_$0> {
        return this.run<Type_$0>($$dpth,
            () => {
                let $scope$typeExpr: Nullable<TE>;
                let $$res: Nullable<Type_$0> = null;
                if (true
                    && this.matchos($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\=)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchos($$dpth + 1, $$cr) !== null
                    && ($scope$typeExpr = this.matchTE($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.Type_$0, typeExpr: $scope$typeExpr};
                }
                return $$res;
            });
    }
    public matchConVar($$dpth: number, $$cr?: ErrorTracker): Nullable<ConVar> {
        return this.choice<ConVar>([
            () => this.matchConVar_1($$dpth + 1, $$cr),
            () => this.matchConVar_2($$dpth + 1, $$cr),
        ]);
    }
    public matchConVar_1($$dpth: number, $$cr?: ErrorTracker): Nullable<ConVar_1> {
        return this.run<ConVar_1>($$dpth,
            () => {
                let $scope$typeExpr: Nullable<TE>;
                let $scope$posS: Nullable<PosInfo>;
                let $scope$nameFirst: Nullable<Name>;
                let $scope$posE: Nullable<PosInfo>;
                let $scope$namesMore: Nullable<ConVar_$0[]>;
                let $$res: Nullable<ConVar_1> = null;
                if (true
                    && this.matchws($$dpth + 1, $$cr) !== null
                    && ($scope$typeExpr = this.matchTE($$dpth + 1, $$cr)) !== null
                    && this.matchsp($$dpth + 1, $$cr) !== null
                    && ($scope$posS = this.mark()) !== null
                    && ($scope$nameFirst = this.matchName($$dpth + 1, $$cr)) !== null
                    && ($scope$posE = this.mark()) !== null
                    && ($scope$namesMore = this.loop<ConVar_$0>(() => this.matchConVar_$0($$dpth + 1, $$cr), 0, -1)) !== null
                    && this.matchos($$dpth + 1, $$cr) !== null
                    && this.matchlb($$dpth + 1, $$cr) !== null
                ) {
                    $$res = new ConVar_1($scope$typeExpr, $scope$posS, $scope$nameFirst, $scope$posE, $scope$namesMore);
                }
                return $$res;
            });
    }
    public matchConVar_2($$dpth: number, $$cr?: ErrorTracker): Nullable<ConVar_2> {
        return this.run<ConVar_2>($$dpth,
            () => {
                let $scope$posS: Nullable<PosInfo>;
                let $scope$name: Nullable<Name>;
                let $scope$posE: Nullable<PosInfo>;
                let $scope$typeExpr: Nullable<TE>;
                let $$res: Nullable<ConVar_2> = null;
                if (true
                    && this.matchws($$dpth + 1, $$cr) !== null
                    && ($scope$posS = this.mark()) !== null
                    && ($scope$name = this.matchName($$dpth + 1, $$cr)) !== null
                    && ($scope$posE = this.mark()) !== null
                    && this.matchos($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\:)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchos($$dpth + 1, $$cr) !== null
                    && ($scope$typeExpr = this.matchTE($$dpth + 1, $$cr)) !== null
                    && this.matchos($$dpth + 1, $$cr) !== null
                    && this.matchlb($$dpth + 1, $$cr) !== null
                ) {
                    $$res = new ConVar_2($scope$posS, $scope$name, $scope$posE, $scope$typeExpr);
                }
                return $$res;
            });
    }
    public matchConVar_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<ConVar_$0> {
        return this.run<ConVar_$0>($$dpth,
            () => {
                let $scope$posS: Nullable<PosInfo>;
                let $scope$name: Nullable<Name>;
                let $scope$posE: Nullable<PosInfo>;
                let $$res: Nullable<ConVar_$0> = null;
                if (true
                    && this.matchws($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:,)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchws($$dpth + 1, $$cr) !== null
                    && ($scope$posS = this.mark()) !== null
                    && ($scope$name = this.matchName($$dpth + 1, $$cr)) !== null
                    && ($scope$posE = this.mark()) !== null
                ) {
                    $$res = {kind: ASTKinds.ConVar_$0, posS: $scope$posS, name: $scope$name, posE: $scope$posE};
                }
                return $$res;
            });
    }
    public matchFunction($$dpth: number, $$cr?: ErrorTracker): Nullable<Function> {
        return this.choice<Function>([
            () => this.matchFunction_1($$dpth + 1, $$cr),
            () => this.matchFunction_2($$dpth + 1, $$cr),
        ]);
    }
    public matchFunction_1($$dpth: number, $$cr?: ErrorTracker): Nullable<Function_1> {
        return this.run<Function_1>($$dpth,
            () => {
                let $scope$posS: Nullable<PosInfo>;
                let $scope$name: Nullable<Name>;
                let $scope$posE: Nullable<PosInfo>;
                let $scope$typeExpr: Nullable<TE>;
                let $$res: Nullable<Function_1> = null;
                if (true
                    && this.matchws($$dpth + 1, $$cr) !== null
                    && ($scope$posS = this.mark()) !== null
                    && ($scope$name = this.matchName($$dpth + 1, $$cr)) !== null
                    && ($scope$posE = this.mark()) !== null
                    && this.matchos($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\:)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchos($$dpth + 1, $$cr) !== null
                    && ($scope$typeExpr = this.matchTE($$dpth + 1, $$cr)) !== null
                    && this.matchos($$dpth + 1, $$cr) !== null
                    && this.matchlb($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.Function_1, posS: $scope$posS, name: $scope$name, posE: $scope$posE, typeExpr: $scope$typeExpr};
                }
                return $$res;
            });
    }
    public matchFunction_2($$dpth: number, $$cr?: ErrorTracker): Nullable<Function_2> {
        return this.run<Function_2>($$dpth,
            () => {
                let $scope$posS: Nullable<PosInfo>;
                let $scope$name: Nullable<Infix>;
                let $scope$posE: Nullable<PosInfo>;
                let $scope$typeExpr: Nullable<TE>;
                let $$res: Nullable<Function_2> = null;
                if (true
                    && this.matchws($$dpth + 1, $$cr) !== null
                    && ($scope$posS = this.mark()) !== null
                    && ($scope$name = this.matchInfix($$dpth + 1, $$cr)) !== null
                    && ($scope$posE = this.mark()) !== null
                    && this.matchos($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\:)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchos($$dpth + 1, $$cr) !== null
                    && ($scope$typeExpr = this.matchTE($$dpth + 1, $$cr)) !== null
                    && this.matchos($$dpth + 1, $$cr) !== null
                    && this.matchlb($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.Function_2, posS: $scope$posS, name: $scope$name, posE: $scope$posE, typeExpr: $scope$typeExpr};
                }
                return $$res;
            });
    }
    public matchProcess($$dpth: number, $$cr?: ErrorTracker): Nullable<Process> {
        return this.choice<Process>([
            () => this.matchProcess_1($$dpth + 1, $$cr),
            () => this.matchProcess_2($$dpth + 1, $$cr),
        ]);
    }
    public matchProcess_1($$dpth: number, $$cr?: ErrorTracker): Nullable<Process_1> {
        return this.run<Process_1>($$dpth,
            () => {
                let $scope$pos1S: Nullable<PosInfo>;
                let $scope$nameFirst: Nullable<Name>;
                let $scope$pos1E: Nullable<PosInfo>;
                let $scope$pos2S: Nullable<PosInfo>;
                let $scope$argFirst: Nullable<Nullable<Name>>;
                let $scope$pos2E: Nullable<PosInfo>;
                let $scope$argsMore: Nullable<Process_$0[]>;
                let $scope$proc: Nullable<SPE>;
                let $$res: Nullable<Process_1> = null;
                if (true
                    && this.matchws($$dpth + 1, $$cr) !== null
                    && ($scope$pos1S = this.mark()) !== null
                    && ($scope$nameFirst = this.matchName($$dpth + 1, $$cr)) !== null
                    && ($scope$pos1E = this.mark()) !== null
                    && this.matchos($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\()`, "", $$dpth + 1, $$cr) !== null
                    && ($scope$pos2S = this.mark()) !== null
                    && (($scope$argFirst = this.matchName($$dpth + 1, $$cr)) || true)
                    && ($scope$pos2E = this.mark()) !== null
                    && ($scope$argsMore = this.loop<Process_$0>(() => this.matchProcess_$0($$dpth + 1, $$cr), 0, -1)) !== null
                    && this.regexAccept(String.raw`(?:\))`, "", $$dpth + 1, $$cr) !== null
                    && this.matchos($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\:\=)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchlb($$dpth + 1, $$cr) !== null
                    && this.matchsp($$dpth + 1, $$cr) !== null
                    && ($scope$proc = this.matchSPE($$dpth + 1, $$cr)) !== null
                    && this.matchos($$dpth + 1, $$cr) !== null
                    && this.matchlb($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.Process_1, pos1S: $scope$pos1S, nameFirst: $scope$nameFirst, pos1E: $scope$pos1E, pos2S: $scope$pos2S, argFirst: $scope$argFirst, pos2E: $scope$pos2E, argsMore: $scope$argsMore, proc: $scope$proc};
                }
                return $$res;
            });
    }
    public matchProcess_2($$dpth: number, $$cr?: ErrorTracker): Nullable<Process_2> {
        return this.run<Process_2>($$dpth,
            () => {
                let $scope$posS: Nullable<PosInfo>;
                let $scope$name: Nullable<Name>;
                let $scope$posE: Nullable<PosInfo>;
                let $scope$proc: Nullable<SPE>;
                let $$res: Nullable<Process_2> = null;
                if (true
                    && this.matchws($$dpth + 1, $$cr) !== null
                    && ($scope$posS = this.mark()) !== null
                    && ($scope$name = this.matchName($$dpth + 1, $$cr)) !== null
                    && ($scope$posE = this.mark()) !== null
                    && this.matchos($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\:\=)`, "", $$dpth + 1, $$cr) !== null
                    && ($scope$proc = this.matchSPE($$dpth + 1, $$cr)) !== null
                    && this.matchos($$dpth + 1, $$cr) !== null
                    && this.matchlb($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.Process_2, posS: $scope$posS, name: $scope$name, posE: $scope$posE, proc: $scope$proc};
                }
                return $$res;
            });
    }
    public matchProcess_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<Process_$0> {
        return this.run<Process_$0>($$dpth,
            () => {
                let $scope$posS: Nullable<PosInfo>;
                let $scope$name: Nullable<Name>;
                let $scope$posE: Nullable<PosInfo>;
                let $$res: Nullable<Process_$0> = null;
                if (true
                    && this.regexAccept(String.raw`(?:,)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchos($$dpth + 1, $$cr) !== null
                    && ($scope$posS = this.mark()) !== null
                    && ($scope$name = this.matchName($$dpth + 1, $$cr)) !== null
                    && ($scope$posE = this.mark()) !== null
                ) {
                    $$res = {kind: ASTKinds.Process_$0, posS: $scope$posS, name: $scope$name, posE: $scope$posE};
                }
                return $$res;
            });
    }
    public matchAlias($$dpth: number, $$cr?: ErrorTracker): Nullable<Alias> {
        return this.choice<Alias>([
            () => this.matchAlias_1($$dpth + 1, $$cr),
            () => this.matchAlias_2($$dpth + 1, $$cr),
        ]);
    }
    public matchAlias_1($$dpth: number, $$cr?: ErrorTracker): Nullable<Alias_1> {
        return this.run<Alias_1>($$dpth,
            () => {
                let $scope$pos1S: Nullable<PosInfo>;
                let $scope$nameFirst: Nullable<Name>;
                let $scope$pos1E: Nullable<PosInfo>;
                let $scope$pos2S: Nullable<PosInfo>;
                let $scope$argFirst: Nullable<Nullable<Name>>;
                let $scope$pos2E: Nullable<PosInfo>;
                let $scope$argsMore: Nullable<Alias_$0[]>;
                let $$res: Nullable<Alias_1> = null;
                if (true
                    && this.matchws($$dpth + 1, $$cr) !== null
                    && ($scope$pos1S = this.mark()) !== null
                    && ($scope$nameFirst = this.matchName($$dpth + 1, $$cr)) !== null
                    && ($scope$pos1E = this.mark()) !== null
                    && this.matchos($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\:\=)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchsp($$dpth + 1, $$cr) !== null
                    && ($scope$pos2S = this.mark()) !== null
                    && (($scope$argFirst = this.matchName($$dpth + 1, $$cr)) || true)
                    && this.matchos($$dpth + 1, $$cr) !== null
                    && ($scope$pos2E = this.mark()) !== null
                    && ($scope$argsMore = this.loop<Alias_$0>(() => this.matchAlias_$0($$dpth + 1, $$cr), 0, -1)) !== null
                    && this.matchos($$dpth + 1, $$cr) !== null
                    && this.matchlb($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.Alias_1, pos1S: $scope$pos1S, nameFirst: $scope$nameFirst, pos1E: $scope$pos1E, pos2S: $scope$pos2S, argFirst: $scope$argFirst, pos2E: $scope$pos2E, argsMore: $scope$argsMore};
                }
                return $$res;
            });
    }
    public matchAlias_2($$dpth: number, $$cr?: ErrorTracker): Nullable<Alias_2> {
        return this.run<Alias_2>($$dpth,
            () => {
                let $scope$posS: Nullable<PosInfo>;
                let $scope$name: Nullable<Name>;
                let $scope$posE: Nullable<PosInfo>;
                let $scope$dataExp: Nullable<DE>;
                let $$res: Nullable<Alias_2> = null;
                if (true
                    && this.matchws($$dpth + 1, $$cr) !== null
                    && ($scope$posS = this.mark()) !== null
                    && ($scope$name = this.matchName($$dpth + 1, $$cr)) !== null
                    && ($scope$posE = this.mark()) !== null
                    && this.matchos($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\:\=)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchsp($$dpth + 1, $$cr) !== null
                    && ($scope$dataExp = this.matchDE($$dpth + 1, $$cr)) !== null
                    && this.matchos($$dpth + 1, $$cr) !== null
                    && this.matchlb($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.Alias_2, posS: $scope$posS, name: $scope$name, posE: $scope$posE, dataExp: $scope$dataExp};
                }
                return $$res;
            });
    }
    public matchAlias_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<Alias_$0> {
        return this.run<Alias_$0>($$dpth,
            () => {
                let $scope$posS: Nullable<PosInfo>;
                let $scope$name: Nullable<Name>;
                let $scope$posE: Nullable<PosInfo>;
                let $$res: Nullable<Alias_$0> = null;
                if (true
                    && this.regexAccept(String.raw`(?:,)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchos($$dpth + 1, $$cr) !== null
                    && ($scope$posS = this.mark()) !== null
                    && ($scope$name = this.matchName($$dpth + 1, $$cr)) !== null
                    && ($scope$posE = this.mark()) !== null
                ) {
                    $$res = {kind: ASTKinds.Alias_$0, posS: $scope$posS, name: $scope$name, posE: $scope$posE};
                }
                return $$res;
            });
    }
    public matchTE($$dpth: number, $$cr?: ErrorTracker): Nullable<TE> {
        return this.choice<TE>([
            () => this.matchTE_1($$dpth + 1, $$cr),
            () => this.matchTE_2($$dpth + 1, $$cr),
            () => this.matchTE_3($$dpth + 1, $$cr),
            () => this.matchTE_4($$dpth + 1, $$cr),
        ]);
    }
    public matchTE_1($$dpth: number, $$cr?: ErrorTracker): Nullable<TE_1> {
        return this.run<TE_1>($$dpth,
            () => {
                let $scope$typeExpr: Nullable<TE>;
                let $scope$typeExprMore: Nullable<Nullable<TE1>>;
                let $$res: Nullable<TE_1> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\()`, "", $$dpth + 1, $$cr) !== null
                    && this.matchos($$dpth + 1, $$cr) !== null
                    && ($scope$typeExpr = this.matchTE($$dpth + 1, $$cr)) !== null
                    && this.matchos($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\))`, "", $$dpth + 1, $$cr) !== null
                    && (($scope$typeExprMore = this.matchTE1($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = new TE_1($scope$typeExpr, $scope$typeExprMore);
                }
                return $$res;
            });
    }
    public matchTE_2($$dpth: number, $$cr?: ErrorTracker): Nullable<TE_2> {
        return this.run<TE_2>($$dpth,
            () => {
                let $scope$pos: Nullable<PosInfo>;
                let $scope$typeExpr: Nullable<TE>;
                let $scope$typeExprMore: Nullable<Nullable<TE1>>;
                let $$res: Nullable<TE_2> = null;
                if (true
                    && ($scope$pos = this.mark()) !== null
                    && this.regexAccept(String.raw`(?:Pow)`, "", $$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\()`, "", $$dpth + 1, $$cr) !== null
                    && this.matchos($$dpth + 1, $$cr) !== null
                    && ($scope$typeExpr = this.matchTE($$dpth + 1, $$cr)) !== null
                    && this.matchos($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\))`, "", $$dpth + 1, $$cr) !== null
                    && (($scope$typeExprMore = this.matchTE1($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = new TE_2($scope$pos, $scope$typeExpr, $scope$typeExprMore);
                }
                return $$res;
            });
    }
    public matchTE_3($$dpth: number, $$cr?: ErrorTracker): Nullable<TE_3> {
        return this.run<TE_3>($$dpth,
            () => {
                let $scope$typeExpr: Nullable<TE>;
                let $scope$typeExprMore: Nullable<Nullable<TE1>>;
                let $$res: Nullable<TE_3> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\[)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchos($$dpth + 1, $$cr) !== null
                    && ($scope$typeExpr = this.matchTE($$dpth + 1, $$cr)) !== null
                    && this.matchos($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\])`, "", $$dpth + 1, $$cr) !== null
                    && (($scope$typeExprMore = this.matchTE1($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = new TE_3($scope$typeExpr, $scope$typeExprMore);
                }
                return $$res;
            });
    }
    public matchTE_4($$dpth: number, $$cr?: ErrorTracker): Nullable<TE_4> {
        return this.run<TE_4>($$dpth,
            () => {
                let $scope$posS: Nullable<PosInfo>;
                let $scope$typename: Nullable<TypeName>;
                let $scope$posE: Nullable<PosInfo>;
                let $scope$typeExprMore: Nullable<Nullable<TE1>>;
                let $$res: Nullable<TE_4> = null;
                if (true
                    && ($scope$posS = this.mark()) !== null
                    && ($scope$typename = this.matchTypeName($$dpth + 1, $$cr)) !== null
                    && ($scope$posE = this.mark()) !== null
                    && (($scope$typeExprMore = this.matchTE1($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = new TE_4($scope$posS, $scope$typename, $scope$posE, $scope$typeExprMore);
                }
                return $$res;
            });
    }
    public matchTE1($$dpth: number, $$cr?: ErrorTracker): Nullable<TE1> {
        const fn = () => {
            return this.choice<TE1>([
                () => this.matchTE1_1($$dpth + 1, $$cr),
                () => this.matchTE1_2($$dpth + 1, $$cr),
                () => this.matchTE1_3($$dpth + 1, $$cr),
            ]);
        };
        const $scope$pos = this.mark();
        const memo = this.$scope$TE1$memo.get($scope$pos.overallPos);
        if(memo !== undefined) {
            this.reset(memo[1]);
            return memo[0];
        }
        const $scope$oldMemoSafe = this.memoSafe;
        this.memoSafe = false;
        this.$scope$TE1$memo.set($scope$pos.overallPos, [null, $scope$pos]);
        let lastRes: Nullable<TE1> = null;
        let lastPos: PosInfo = $scope$pos;
        for(;;) {
            this.reset($scope$pos);
            const res = fn();
            const end = this.mark();
            if(end.overallPos <= lastPos.overallPos)
                break;
            lastRes = res;
            lastPos = end;
            this.$scope$TE1$memo.set($scope$pos.overallPos, [lastRes, lastPos]);
        }
        this.reset(lastPos);
        this.memoSafe = $scope$oldMemoSafe;
        return lastRes;
    }
    public matchTE1_1($$dpth: number, $$cr?: ErrorTracker): Nullable<TE1_1> {
        return this.run<TE1_1>($$dpth,
            () => {
                let $scope$typeExpr: Nullable<TE>;
                let $scope$typeExprMore: Nullable<Nullable<TE1>>;
                let $$res: Nullable<TE1_1> = null;
                if (true
                    && this.matchos($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\->)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchos($$dpth + 1, $$cr) !== null
                    && ($scope$typeExpr = this.matchTE($$dpth + 1, $$cr)) !== null
                    && (($scope$typeExprMore = this.matchTE1($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = new TE1_1($scope$typeExpr, $scope$typeExprMore);
                }
                return $$res;
            });
    }
    public matchTE1_2($$dpth: number, $$cr?: ErrorTracker): Nullable<TE1_2> {
        return this.run<TE1_2>($$dpth,
            () => {
                let $scope$typeExpr: Nullable<TE>;
                let $scope$typeExprMore: Nullable<Nullable<TE1>>;
                let $$res: Nullable<TE1_2> = null;
                if (true
                    && this.matchos($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\+->)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchos($$dpth + 1, $$cr) !== null
                    && ($scope$typeExpr = this.matchTE($$dpth + 1, $$cr)) !== null
                    && (($scope$typeExprMore = this.matchTE1($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = new TE1_2($scope$typeExpr, $scope$typeExprMore);
                }
                return $$res;
            });
    }
    public matchTE1_3($$dpth: number, $$cr?: ErrorTracker): Nullable<TE1_3> {
        return this.run<TE1_3>($$dpth,
            () => {
                let $scope$products: Nullable<TE1_$0[]>;
                let $scope$typeExprMore: Nullable<Nullable<TE1>>;
                let $$res: Nullable<TE1_3> = null;
                if (true
                    && ($scope$products = this.loop<TE1_$0>(() => this.matchTE1_$0($$dpth + 1, $$cr), 0, -1)) !== null
                    && (($scope$typeExprMore = this.matchTE1($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = new TE1_3($scope$products, $scope$typeExprMore);
                }
                return $$res;
            });
    }
    public matchTE1_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<TE1_$0> {
        return this.run<TE1_$0>($$dpth,
            () => {
                let $scope$pos: Nullable<PosInfo>;
                let $scope$typeExpr: Nullable<TE>;
                let $$res: Nullable<TE1_$0> = null;
                if (true
                    && ($scope$pos = this.mark()) !== null
                    && this.regexAccept(String.raw`(?: x )`, "", $$dpth + 1, $$cr) !== null
                    && ($scope$typeExpr = this.matchTE($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.TE1_$0, pos: $scope$pos, typeExpr: $scope$typeExpr};
                }
                return $$res;
            });
    }
    public matchSPE($$dpth: number, $$cr?: ErrorTracker): Nullable<SPE> {
        return this.choice<SPE>([
            () => this.matchSPE_1($$dpth + 1, $$cr),
            () => this.matchSPE_2($$dpth + 1, $$cr),
            () => this.matchSPE_3($$dpth + 1, $$cr),
            () => this.matchSPE_4($$dpth + 1, $$cr),
            () => this.matchSPE_5($$dpth + 1, $$cr),
            () => this.matchSPE_6($$dpth + 1, $$cr),
            () => this.matchSPE_7($$dpth + 1, $$cr),
            () => this.matchSPE_8($$dpth + 1, $$cr),
            () => this.matchSPE_9($$dpth + 1, $$cr),
            () => this.matchSPE_10($$dpth + 1, $$cr),
        ]);
    }
    public matchSPE_1($$dpth: number, $$cr?: ErrorTracker): Nullable<SPE_1> {
        return this.run<SPE_1>($$dpth,
            () => {
                let $scope$posDES: Nullable<PosInfo>;
                let $scope$dataExp: Nullable<DE>;
                let $scope$posDEE: Nullable<PosInfo>;
                let $scope$proc: Nullable<SPE>;
                let $scope$procMore: Nullable<Nullable<SPE1>>;
                let $$res: Nullable<SPE_1> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\[)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchos($$dpth + 1, $$cr) !== null
                    && ($scope$posDES = this.mark()) !== null
                    && ($scope$dataExp = this.matchDE($$dpth + 1, $$cr)) !== null
                    && ($scope$posDEE = this.mark()) !== null
                    && this.matchos($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\])`, "", $$dpth + 1, $$cr) !== null
                    && this.matchlb($$dpth + 1, $$cr) !== null
                    && this.matchsp($$dpth + 1, $$cr) !== null
                    && ($scope$proc = this.matchSPE($$dpth + 1, $$cr)) !== null
                    && (($scope$procMore = this.matchSPE1($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = new SPE_1($scope$posDES, $scope$dataExp, $scope$posDEE, $scope$proc, $scope$procMore);
                }
                return $$res;
            });
    }
    public matchSPE_2($$dpth: number, $$cr?: ErrorTracker): Nullable<SPE_2> {
        return this.run<SPE_2>($$dpth,
            () => {
                let $scope$posA: Nullable<PosInfo>;
                let $scope$name: Nullable<Name>;
                let $scope$posB: Nullable<PosInfo>;
                let $scope$posC: Nullable<PosInfo>;
                let $scope$dataExpAssignment: Nullable<DE>;
                let $scope$posD: Nullable<PosInfo>;
                let $scope$proc: Nullable<SPE>;
                let $scope$procMore: Nullable<Nullable<SPE1>>;
                let $$res: Nullable<SPE_2> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\[\[)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchos($$dpth + 1, $$cr) !== null
                    && ($scope$posA = this.mark()) !== null
                    && ($scope$name = this.matchName($$dpth + 1, $$cr)) !== null
                    && ($scope$posB = this.mark()) !== null
                    && this.matchos($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\:\=)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchos($$dpth + 1, $$cr) !== null
                    && ($scope$posC = this.mark()) !== null
                    && ($scope$dataExpAssignment = this.matchDE($$dpth + 1, $$cr)) !== null
                    && ($scope$posD = this.mark()) !== null
                    && this.matchos($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\]\])`, "", $$dpth + 1, $$cr) !== null
                    && this.matchlb($$dpth + 1, $$cr) !== null
                    && this.matchsp($$dpth + 1, $$cr) !== null
                    && ($scope$proc = this.matchSPE($$dpth + 1, $$cr)) !== null
                    && (($scope$procMore = this.matchSPE1($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = new SPE_2($scope$posA, $scope$name, $scope$posB, $scope$posC, $scope$dataExpAssignment, $scope$posD, $scope$proc, $scope$procMore);
                }
                return $$res;
            });
    }
    public matchSPE_3($$dpth: number, $$cr?: ErrorTracker): Nullable<SPE_3> {
        return this.run<SPE_3>($$dpth,
            () => {
                let $scope$pos: Nullable<PosInfo>;
                let $scope$posA: Nullable<PosInfo>;
                let $scope$dataExpL: Nullable<DE>;
                let $scope$posB: Nullable<PosInfo>;
                let $scope$dataExpR: Nullable<DE>;
                let $scope$posC: Nullable<PosInfo>;
                let $scope$procL: Nullable<SPE>;
                let $scope$procR: Nullable<SPE>;
                let $scope$procMore: Nullable<Nullable<SPE1>>;
                let $$res: Nullable<SPE_3> = null;
                if (true
                    && ($scope$pos = this.mark()) !== null
                    && this.regexAccept(String.raw`(?:unicast)`, "", $$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\()`, "", $$dpth + 1, $$cr) !== null
                    && ($scope$posA = this.mark()) !== null
                    && ($scope$dataExpL = this.matchDE($$dpth + 1, $$cr)) !== null
                    && ($scope$posB = this.mark()) !== null
                    && this.regexAccept(String.raw`(?:;)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchos($$dpth + 1, $$cr) !== null
                    && ($scope$dataExpR = this.matchDE($$dpth + 1, $$cr)) !== null
                    && ($scope$posC = this.mark()) !== null
                    && this.regexAccept(String.raw`(?:\))`, "", $$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:.)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchws($$dpth + 1, $$cr) !== null
                    && ($scope$procL = this.matchSPE($$dpth + 1, $$cr)) !== null
                    && this.matchws($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:>)`, "", $$dpth + 1, $$cr) !== null
                    && ($scope$procR = this.matchSPE($$dpth + 1, $$cr)) !== null
                    && (($scope$procMore = this.matchSPE1($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = new SPE_3($scope$pos, $scope$posA, $scope$dataExpL, $scope$posB, $scope$dataExpR, $scope$posC, $scope$procL, $scope$procR, $scope$procMore);
                }
                return $$res;
            });
    }
    public matchSPE_4($$dpth: number, $$cr?: ErrorTracker): Nullable<SPE_4> {
        return this.run<SPE_4>($$dpth,
            () => {
                let $scope$pos: Nullable<PosInfo>;
                let $scope$posA: Nullable<PosInfo>;
                let $scope$dataExp: Nullable<DE>;
                let $scope$posB: Nullable<PosInfo>;
                let $scope$proc: Nullable<SPE>;
                let $scope$procMore: Nullable<Nullable<SPE1>>;
                let $$res: Nullable<SPE_4> = null;
                if (true
                    && ($scope$pos = this.mark()) !== null
                    && this.regexAccept(String.raw`(?:broadcast)`, "", $$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\()`, "", $$dpth + 1, $$cr) !== null
                    && ($scope$posA = this.mark()) !== null
                    && ($scope$dataExp = this.matchDE($$dpth + 1, $$cr)) !== null
                    && ($scope$posB = this.mark()) !== null
                    && this.regexAccept(String.raw`(?:\))`, "", $$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:.)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchws($$dpth + 1, $$cr) !== null
                    && ($scope$proc = this.matchSPE($$dpth + 1, $$cr)) !== null
                    && (($scope$procMore = this.matchSPE1($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = new SPE_4($scope$pos, $scope$posA, $scope$dataExp, $scope$posB, $scope$proc, $scope$procMore);
                }
                return $$res;
            });
    }
    public matchSPE_5($$dpth: number, $$cr?: ErrorTracker): Nullable<SPE_5> {
        return this.run<SPE_5>($$dpth,
            () => {
                let $scope$pos: Nullable<PosInfo>;
                let $scope$posA: Nullable<PosInfo>;
                let $scope$dataExpL: Nullable<DE>;
                let $scope$posB: Nullable<PosInfo>;
                let $scope$dataExpR: Nullable<DE>;
                let $scope$posC: Nullable<PosInfo>;
                let $scope$proc: Nullable<SPE>;
                let $scope$procMore: Nullable<Nullable<SPE1>>;
                let $$res: Nullable<SPE_5> = null;
                if (true
                    && ($scope$pos = this.mark()) !== null
                    && this.regexAccept(String.raw`(?:groupcast)`, "", $$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\()`, "", $$dpth + 1, $$cr) !== null
                    && ($scope$posA = this.mark()) !== null
                    && ($scope$dataExpL = this.matchDE($$dpth + 1, $$cr)) !== null
                    && ($scope$posB = this.mark()) !== null
                    && this.regexAccept(String.raw`(?:;)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchos($$dpth + 1, $$cr) !== null
                    && ($scope$dataExpR = this.matchDE($$dpth + 1, $$cr)) !== null
                    && ($scope$posC = this.mark()) !== null
                    && this.regexAccept(String.raw`(?:\))`, "", $$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:.)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchws($$dpth + 1, $$cr) !== null
                    && ($scope$proc = this.matchSPE($$dpth + 1, $$cr)) !== null
                    && (($scope$procMore = this.matchSPE1($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = new SPE_5($scope$pos, $scope$posA, $scope$dataExpL, $scope$posB, $scope$dataExpR, $scope$posC, $scope$proc, $scope$procMore);
                }
                return $$res;
            });
    }
    public matchSPE_6($$dpth: number, $$cr?: ErrorTracker): Nullable<SPE_6> {
        return this.run<SPE_6>($$dpth,
            () => {
                let $scope$pos: Nullable<PosInfo>;
                let $scope$posA: Nullable<PosInfo>;
                let $scope$dataExp: Nullable<DE>;
                let $scope$posB: Nullable<PosInfo>;
                let $scope$proc: Nullable<SPE>;
                let $scope$procMore: Nullable<Nullable<SPE1>>;
                let $$res: Nullable<SPE_6> = null;
                if (true
                    && ($scope$pos = this.mark()) !== null
                    && this.regexAccept(String.raw`(?:send)`, "", $$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\()`, "", $$dpth + 1, $$cr) !== null
                    && ($scope$posA = this.mark()) !== null
                    && ($scope$dataExp = this.matchDE($$dpth + 1, $$cr)) !== null
                    && ($scope$posB = this.mark()) !== null
                    && this.regexAccept(String.raw`(?:\))`, "", $$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:.)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchws($$dpth + 1, $$cr) !== null
                    && ($scope$proc = this.matchSPE($$dpth + 1, $$cr)) !== null
                    && (($scope$procMore = this.matchSPE1($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = new SPE_6($scope$pos, $scope$posA, $scope$dataExp, $scope$posB, $scope$proc, $scope$procMore);
                }
                return $$res;
            });
    }
    public matchSPE_7($$dpth: number, $$cr?: ErrorTracker): Nullable<SPE_7> {
        return this.run<SPE_7>($$dpth,
            () => {
                let $scope$pos: Nullable<PosInfo>;
                let $scope$posA: Nullable<PosInfo>;
                let $scope$dataExp: Nullable<DE>;
                let $scope$posB: Nullable<PosInfo>;
                let $scope$proc: Nullable<SPE>;
                let $scope$procMore: Nullable<Nullable<SPE1>>;
                let $$res: Nullable<SPE_7> = null;
                if (true
                    && ($scope$pos = this.mark()) !== null
                    && this.regexAccept(String.raw`(?:deliver)`, "", $$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\()`, "", $$dpth + 1, $$cr) !== null
                    && ($scope$posA = this.mark()) !== null
                    && ($scope$dataExp = this.matchDE($$dpth + 1, $$cr)) !== null
                    && ($scope$posB = this.mark()) !== null
                    && this.regexAccept(String.raw`(?:\))`, "", $$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:.)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchws($$dpth + 1, $$cr) !== null
                    && ($scope$proc = this.matchSPE($$dpth + 1, $$cr)) !== null
                    && (($scope$procMore = this.matchSPE1($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = new SPE_7($scope$pos, $scope$posA, $scope$dataExp, $scope$posB, $scope$proc, $scope$procMore);
                }
                return $$res;
            });
    }
    public matchSPE_8($$dpth: number, $$cr?: ErrorTracker): Nullable<SPE_8> {
        return this.run<SPE_8>($$dpth,
            () => {
                let $scope$pos: Nullable<PosInfo>;
                let $scope$posS: Nullable<PosInfo>;
                let $scope$name: Nullable<Name>;
                let $scope$posE: Nullable<PosInfo>;
                let $scope$dataExpList: Nullable<SPE_$0[]>;
                let $scope$proc: Nullable<SPE>;
                let $scope$procMore: Nullable<Nullable<SPE1>>;
                let $$res: Nullable<SPE_8> = null;
                if (true
                    && ($scope$pos = this.mark()) !== null
                    && this.regexAccept(String.raw`(?:receive)`, "", $$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\()`, "", $$dpth + 1, $$cr) !== null
                    && ($scope$posS = this.mark()) !== null
                    && ($scope$name = this.matchName($$dpth + 1, $$cr)) !== null
                    && ($scope$posE = this.mark()) !== null
                    && ($scope$dataExpList = this.loop<SPE_$0>(() => this.matchSPE_$0($$dpth + 1, $$cr), 0, -1)) !== null
                    && this.regexAccept(String.raw`(?:\))`, "", $$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:.)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchws($$dpth + 1, $$cr) !== null
                    && ($scope$proc = this.matchSPE($$dpth + 1, $$cr)) !== null
                    && (($scope$procMore = this.matchSPE1($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = new SPE_8($scope$pos, $scope$posS, $scope$name, $scope$posE, $scope$dataExpList, $scope$proc, $scope$procMore);
                }
                return $$res;
            });
    }
    public matchSPE_9($$dpth: number, $$cr?: ErrorTracker): Nullable<SPE_9> {
        return this.run<SPE_9>($$dpth,
            () => {
                let $scope$proc: Nullable<SPE>;
                let $scope$procMore: Nullable<Nullable<SPE1>>;
                let $$res: Nullable<SPE_9> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\()`, "", $$dpth + 1, $$cr) !== null
                    && this.matchws($$dpth + 1, $$cr) !== null
                    && ($scope$proc = this.matchSPE($$dpth + 1, $$cr)) !== null
                    && this.matchws($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\))`, "", $$dpth + 1, $$cr) !== null
                    && (($scope$procMore = this.matchSPE1($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = new SPE_9($scope$proc, $scope$procMore);
                }
                return $$res;
            });
    }
    public matchSPE_10($$dpth: number, $$cr?: ErrorTracker): Nullable<SPE_10> {
        return this.run<SPE_10>($$dpth,
            () => {
                let $scope$posS: Nullable<PosInfo>;
                let $scope$name: Nullable<Name>;
                let $scope$posE: Nullable<PosInfo>;
                let $scope$dataExpFirst: Nullable<Nullable<DE>>;
                let $scope$dataExpW: Nullable<SPE_$1[]>;
                let $scope$procMore: Nullable<Nullable<SPE1>>;
                let $$res: Nullable<SPE_10> = null;
                if (true
                    && ($scope$posS = this.mark()) !== null
                    && this.negate(() => this.regexAccept(String.raw`(?:unicast)`, "", $$dpth + 1, $$cr)) !== null
                    && this.negate(() => this.regexAccept(String.raw`(?:broadcast)`, "", $$dpth + 1, $$cr)) !== null
                    && this.negate(() => this.regexAccept(String.raw`(?:groupcast)`, "", $$dpth + 1, $$cr)) !== null
                    && this.negate(() => this.regexAccept(String.raw`(?:send)`, "", $$dpth + 1, $$cr)) !== null
                    && this.negate(() => this.regexAccept(String.raw`(?:deliver)`, "", $$dpth + 1, $$cr)) !== null
                    && this.negate(() => this.regexAccept(String.raw`(?:receive)`, "", $$dpth + 1, $$cr)) !== null
                    && ($scope$name = this.matchName($$dpth + 1, $$cr)) !== null
                    && ($scope$posE = this.mark()) !== null
                    && this.regexAccept(String.raw`(?:\()`, "", $$dpth + 1, $$cr) !== null
                    && (($scope$dataExpFirst = this.matchDE($$dpth + 1, $$cr)) || true)
                    && ($scope$dataExpW = this.loop<SPE_$1>(() => this.matchSPE_$1($$dpth + 1, $$cr), 0, -1)) !== null
                    && this.regexAccept(String.raw`(?:\))`, "", $$dpth + 1, $$cr) !== null
                    && (($scope$procMore = this.matchSPE1($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = new SPE_10($scope$posS, $scope$name, $scope$posE, $scope$dataExpFirst, $scope$dataExpW, $scope$procMore);
                }
                return $$res;
            });
    }
    public matchSPE_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<SPE_$0> {
        return this.run<SPE_$0>($$dpth,
            () => {
                let $scope$dataExp: Nullable<DE>;
                let $$res: Nullable<SPE_$0> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\[)`, "", $$dpth + 1, $$cr) !== null
                    && ($scope$dataExp = this.matchDE($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:\])`, "", $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.SPE_$0, dataExp: $scope$dataExp};
                }
                return $$res;
            });
    }
    public matchSPE_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<SPE_$1> {
        return this.run<SPE_$1>($$dpth,
            () => {
                let $scope$dataExp: Nullable<DE>;
                let $$res: Nullable<SPE_$1> = null;
                if (true
                    && this.regexAccept(String.raw`(?:,)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchos($$dpth + 1, $$cr) !== null
                    && ($scope$dataExp = this.matchDE($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.SPE_$1, dataExp: $scope$dataExp};
                }
                return $$res;
            });
    }
    public matchSPE1($$dpth: number, $$cr?: ErrorTracker): Nullable<SPE1> {
        return this.run<SPE1>($$dpth,
            () => {
                let $scope$proc: Nullable<SPE>;
                let $scope$procMore: Nullable<Nullable<SPE1>>;
                let $$res: Nullable<SPE1> = null;
                if (true
                    && this.matchlb($$dpth + 1, $$cr) !== null
                    && this.matchsp($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\+)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchlb($$dpth + 1, $$cr) !== null
                    && this.matchsp($$dpth + 1, $$cr) !== null
                    && ($scope$proc = this.matchSPE($$dpth + 1, $$cr)) !== null
                    && (($scope$procMore = this.matchSPE1($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = new SPE1($scope$proc, $scope$procMore);
                }
                return $$res;
            });
    }
    public matchDE($$dpth: number, $$cr?: ErrorTracker): Nullable<DE> {
        return this.choice<DE>([
            () => this.matchDE_1($$dpth + 1, $$cr),
            () => this.matchDE_2($$dpth + 1, $$cr),
            () => this.matchDE_3($$dpth + 1, $$cr),
            () => this.matchDE_4($$dpth + 1, $$cr),
            () => this.matchDE_5($$dpth + 1, $$cr),
            () => this.matchDE_6($$dpth + 1, $$cr),
            () => this.matchDE_7($$dpth + 1, $$cr),
            () => this.matchDE_8($$dpth + 1, $$cr),
            () => this.matchDE_9($$dpth + 1, $$cr),
        ]);
    }
    public matchDE_1($$dpth: number, $$cr?: ErrorTracker): Nullable<DE_1> {
        return this.run<DE_1>($$dpth,
            () => {
                let $scope$posS: Nullable<PosInfo>;
                let $scope$name: Nullable<Name>;
                let $scope$posE: Nullable<PosInfo>;
                let $scope$dataExpLeft: Nullable<DE>;
                let $scope$dataExpRight: Nullable<DE>;
                let $scope$dataExpMore: Nullable<Nullable<DE1>>;
                let $$res: Nullable<DE_1> = null;
                if (true
                    && this.regexAccept(String.raw`(?:{)`, "", $$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\()`, "", $$dpth + 1, $$cr) !== null
                    && ($scope$posS = this.mark()) !== null
                    && ($scope$name = this.matchName($$dpth + 1, $$cr)) !== null
                    && ($scope$posE = this.mark()) !== null
                    && this.regexAccept(String.raw`(?:,)`, "", $$dpth + 1, $$cr) !== null
                    && ($scope$dataExpLeft = this.matchDE($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:\))`, "", $$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?: | )`, "", $$dpth + 1, $$cr) !== null
                    && ($scope$dataExpRight = this.matchDE($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:})`, "", $$dpth + 1, $$cr) !== null
                    && (($scope$dataExpMore = this.matchDE1($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = new DE_1($scope$posS, $scope$name, $scope$posE, $scope$dataExpLeft, $scope$dataExpRight, $scope$dataExpMore);
                }
                return $$res;
            });
    }
    public matchDE_2($$dpth: number, $$cr?: ErrorTracker): Nullable<DE_2> {
        return this.run<DE_2>($$dpth,
            () => {
                let $scope$posS: Nullable<PosInfo>;
                let $scope$name: Nullable<Name>;
                let $scope$posE: Nullable<PosInfo>;
                let $scope$dataExpRight: Nullable<DE>;
                let $scope$dataExpMore: Nullable<Nullable<DE1>>;
                let $$res: Nullable<DE_2> = null;
                if (true
                    && this.regexAccept(String.raw`(?:{)`, "", $$dpth + 1, $$cr) !== null
                    && ($scope$posS = this.mark()) !== null
                    && ($scope$name = this.matchName($$dpth + 1, $$cr)) !== null
                    && ($scope$posE = this.mark()) !== null
                    && this.regexAccept(String.raw`(?: | )`, "", $$dpth + 1, $$cr) !== null
                    && ($scope$dataExpRight = this.matchDE($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:})`, "", $$dpth + 1, $$cr) !== null
                    && (($scope$dataExpMore = this.matchDE1($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = new DE_2($scope$posS, $scope$name, $scope$posE, $scope$dataExpRight, $scope$dataExpMore);
                }
                return $$res;
            });
    }
    public matchDE_3($$dpth: number, $$cr?: ErrorTracker): Nullable<DE_3> {
        return this.run<DE_3>($$dpth,
            () => {
                let $scope$dataExp: Nullable<DE>;
                let $scope$dataExpMore: Nullable<Nullable<DE1>>;
                let $$res: Nullable<DE_3> = null;
                if (true
                    && this.regexAccept(String.raw`(?:{)`, "", $$dpth + 1, $$cr) !== null
                    && ($scope$dataExp = this.matchDE($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:})`, "", $$dpth + 1, $$cr) !== null
                    && (($scope$dataExpMore = this.matchDE1($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = new DE_3($scope$dataExp, $scope$dataExpMore);
                }
                return $$res;
            });
    }
    public matchDE_4($$dpth: number, $$cr?: ErrorTracker): Nullable<DE_4> {
        return this.run<DE_4>($$dpth,
            () => {
                let $scope$pos: Nullable<PosInfo>;
                let $scope$posS: Nullable<PosInfo>;
                let $scope$name: Nullable<Name>;
                let $scope$dataExp: Nullable<DE>;
                let $scope$dataExpMore: Nullable<Nullable<DE1>>;
                let $$res: Nullable<DE_4> = null;
                if (true
                    && ($scope$pos = this.mark()) !== null
                    && this.regexAccept(String.raw`(?:lambda )`, "", $$dpth + 1, $$cr) !== null
                    && ($scope$posS = this.mark()) !== null
                    && ($scope$name = this.matchName($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:. )`, "", $$dpth + 1, $$cr) !== null
                    && ($scope$dataExp = this.matchDE($$dpth + 1, $$cr)) !== null
                    && (($scope$dataExpMore = this.matchDE1($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = new DE_4($scope$pos, $scope$posS, $scope$name, $scope$dataExp, $scope$dataExpMore);
                }
                return $$res;
            });
    }
    public matchDE_5($$dpth: number, $$cr?: ErrorTracker): Nullable<DE_5> {
        return this.run<DE_5>($$dpth,
            () => {
                let $scope$pos: Nullable<PosInfo>;
                let $scope$posS: Nullable<PosInfo>;
                let $scope$name: Nullable<Name>;
                let $scope$dataExp: Nullable<DE>;
                let $scope$dataExpMore: Nullable<Nullable<DE1>>;
                let $$res: Nullable<DE_5> = null;
                if (true
                    && ($scope$pos = this.mark()) !== null
                    && this.regexAccept(String.raw`(?:forall )`, "", $$dpth + 1, $$cr) !== null
                    && ($scope$posS = this.mark()) !== null
                    && ($scope$name = this.matchName($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:. )`, "", $$dpth + 1, $$cr) !== null
                    && ($scope$dataExp = this.matchDE($$dpth + 1, $$cr)) !== null
                    && (($scope$dataExpMore = this.matchDE1($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = new DE_5($scope$pos, $scope$posS, $scope$name, $scope$dataExp, $scope$dataExpMore);
                }
                return $$res;
            });
    }
    public matchDE_6($$dpth: number, $$cr?: ErrorTracker): Nullable<DE_6> {
        return this.run<DE_6>($$dpth,
            () => {
                let $scope$pos: Nullable<PosInfo>;
                let $scope$posS: Nullable<PosInfo>;
                let $scope$name: Nullable<Name>;
                let $scope$dataExp: Nullable<DE>;
                let $scope$dataExpMore: Nullable<Nullable<DE1>>;
                let $$res: Nullable<DE_6> = null;
                if (true
                    && ($scope$pos = this.mark()) !== null
                    && this.regexAccept(String.raw`(?:exists )`, "", $$dpth + 1, $$cr) !== null
                    && ($scope$posS = this.mark()) !== null
                    && ($scope$name = this.matchName($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:. )`, "", $$dpth + 1, $$cr) !== null
                    && ($scope$dataExp = this.matchDE($$dpth + 1, $$cr)) !== null
                    && (($scope$dataExpMore = this.matchDE1($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = new DE_6($scope$pos, $scope$posS, $scope$name, $scope$dataExp, $scope$dataExpMore);
                }
                return $$res;
            });
    }
    public matchDE_7($$dpth: number, $$cr?: ErrorTracker): Nullable<DE_7> {
        return this.run<DE_7>($$dpth,
            () => {
                let $scope$posN: Nullable<PosInfo>;
                let $scope$name: Nullable<DE_$0>;
                let $scope$posNEnd: Nullable<PosInfo>;
                let $scope$posS: Nullable<PosInfo>;
                let $scope$dataExp: Nullable<DE>;
                let $scope$posE: Nullable<PosInfo>;
                let $scope$dataExpMore: Nullable<Nullable<DE1>>;
                let $$res: Nullable<DE_7> = null;
                if (true
                    && ($scope$posN = this.mark()) !== null
                    && ($scope$name = this.matchDE_$0($$dpth + 1, $$cr)) !== null
                    && ($scope$posNEnd = this.mark()) !== null
                    && this.regexAccept(String.raw`(?:\()`, "", $$dpth + 1, $$cr) !== null
                    && this.matchos($$dpth + 1, $$cr) !== null
                    && ($scope$posS = this.mark()) !== null
                    && ($scope$dataExp = this.matchDE($$dpth + 1, $$cr)) !== null
                    && ($scope$posE = this.mark()) !== null
                    && this.matchos($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\))`, "", $$dpth + 1, $$cr) !== null
                    && (($scope$dataExpMore = this.matchDE1($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = new DE_7($scope$posN, $scope$name, $scope$posNEnd, $scope$posS, $scope$dataExp, $scope$posE, $scope$dataExpMore);
                }
                return $$res;
            });
    }
    public matchDE_8($$dpth: number, $$cr?: ErrorTracker): Nullable<DE_8> {
        return this.run<DE_8>($$dpth,
            () => {
                let $scope$dataExp: Nullable<DE>;
                let $scope$dataExpMore: Nullable<Nullable<DE1>>;
                let $$res: Nullable<DE_8> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\()`, "", $$dpth + 1, $$cr) !== null
                    && ($scope$dataExp = this.matchDE($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:\))`, "", $$dpth + 1, $$cr) !== null
                    && (($scope$dataExpMore = this.matchDE1($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = new DE_8($scope$dataExp, $scope$dataExpMore);
                }
                return $$res;
            });
    }
    public matchDE_9($$dpth: number, $$cr?: ErrorTracker): Nullable<DE_9> {
        return this.run<DE_9>($$dpth,
            () => {
                let $scope$posS: Nullable<PosInfo>;
                let $scope$name: Nullable<Name>;
                let $scope$posE: Nullable<PosInfo>;
                let $scope$dataExpMore: Nullable<Nullable<DE1>>;
                let $$res: Nullable<DE_9> = null;
                if (true
                    && ($scope$posS = this.mark()) !== null
                    && ($scope$name = this.matchName($$dpth + 1, $$cr)) !== null
                    && ($scope$posE = this.mark()) !== null
                    && (($scope$dataExpMore = this.matchDE1($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = new DE_9($scope$posS, $scope$name, $scope$posE, $scope$dataExpMore);
                }
                return $$res;
            });
    }
    public matchDE_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<DE_$0> {
        return this.choice<DE_$0>([
            () => this.matchDE_$0_1($$dpth + 1, $$cr),
            () => this.matchDE_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchDE_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<DE_$0_1> {
        return this.matchName($$dpth + 1, $$cr);
    }
    public matchDE_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<DE_$0_2> {
        return this.matchInfix($$dpth + 1, $$cr);
    }
    public matchDE1($$dpth: number, $$cr?: ErrorTracker): Nullable<DE1> {
        const fn = () => {
            return this.choice<DE1>([
                () => this.matchDE1_1($$dpth + 1, $$cr),
                () => this.matchDE1_2($$dpth + 1, $$cr),
                () => this.matchDE1_3($$dpth + 1, $$cr),
                () => this.matchDE1_4($$dpth + 1, $$cr),
                () => this.matchDE1_5($$dpth + 1, $$cr),
                () => this.matchDE1_6($$dpth + 1, $$cr),
                () => this.matchDE1_7($$dpth + 1, $$cr),
                () => this.matchDE1_8($$dpth + 1, $$cr),
                () => this.matchDE1_9($$dpth + 1, $$cr),
                () => this.matchDE1_10($$dpth + 1, $$cr),
                () => this.matchDE1_11($$dpth + 1, $$cr),
                () => this.matchDE1_12($$dpth + 1, $$cr),
                () => this.matchDE1_13($$dpth + 1, $$cr),
            ]);
        };
        const $scope$pos = this.mark();
        const memo = this.$scope$DE1$memo.get($scope$pos.overallPos);
        if(memo !== undefined) {
            this.reset(memo[1]);
            return memo[0];
        }
        const $scope$oldMemoSafe = this.memoSafe;
        this.memoSafe = false;
        this.$scope$DE1$memo.set($scope$pos.overallPos, [null, $scope$pos]);
        let lastRes: Nullable<DE1> = null;
        let lastPos: PosInfo = $scope$pos;
        for(;;) {
            this.reset($scope$pos);
            const res = fn();
            const end = this.mark();
            if(end.overallPos <= lastPos.overallPos)
                break;
            lastRes = res;
            lastPos = end;
            this.$scope$DE1$memo.set($scope$pos.overallPos, [lastRes, lastPos]);
        }
        this.reset(lastPos);
        this.memoSafe = $scope$oldMemoSafe;
        return lastRes;
    }
    public matchDE1_1($$dpth: number, $$cr?: ErrorTracker): Nullable<DE1_1> {
        return this.run<DE1_1>($$dpth,
            () => {
                let $scope$posS: Nullable<PosInfo>;
                let $scope$posE: Nullable<PosInfo>;
                let $scope$dataExp: Nullable<DE>;
                let $scope$dataExpMore: Nullable<Nullable<DE1>>;
                let $$res: Nullable<DE1_1> = null;
                if (true
                    && this.matchos($$dpth + 1, $$cr) !== null
                    && ($scope$posS = this.mark()) !== null
                    && this.regexAccept(String.raw`(?:\->)`, "", $$dpth + 1, $$cr) !== null
                    && ($scope$posE = this.mark()) !== null
                    && this.matchos($$dpth + 1, $$cr) !== null
                    && ($scope$dataExp = this.matchDE($$dpth + 1, $$cr)) !== null
                    && (($scope$dataExpMore = this.matchDE1($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = new DE1_1($scope$posS, $scope$posE, $scope$dataExp, $scope$dataExpMore);
                }
                return $$res;
            });
    }
    public matchDE1_2($$dpth: number, $$cr?: ErrorTracker): Nullable<DE1_2> {
        return this.run<DE1_2>($$dpth,
            () => {
                let $scope$posS: Nullable<PosInfo>;
                let $scope$posE: Nullable<PosInfo>;
                let $scope$dataExp: Nullable<DE>;
                let $scope$dataExpMore: Nullable<Nullable<DE1>>;
                let $$res: Nullable<DE1_2> = null;
                if (true
                    && this.matchos($$dpth + 1, $$cr) !== null
                    && ($scope$posS = this.mark()) !== null
                    && this.regexAccept(String.raw`(?:<\->)`, "", $$dpth + 1, $$cr) !== null
                    && ($scope$posE = this.mark()) !== null
                    && this.matchos($$dpth + 1, $$cr) !== null
                    && ($scope$dataExp = this.matchDE($$dpth + 1, $$cr)) !== null
                    && (($scope$dataExpMore = this.matchDE1($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = new DE1_2($scope$posS, $scope$posE, $scope$dataExp, $scope$dataExpMore);
                }
                return $$res;
            });
    }
    public matchDE1_3($$dpth: number, $$cr?: ErrorTracker): Nullable<DE1_3> {
        return this.run<DE1_3>($$dpth,
            () => {
                let $scope$posS: Nullable<PosInfo>;
                let $scope$posE: Nullable<PosInfo>;
                let $scope$dataExp: Nullable<DE>;
                let $scope$dataExpMore: Nullable<Nullable<DE1>>;
                let $$res: Nullable<DE1_3> = null;
                if (true
                    && this.matchos($$dpth + 1, $$cr) !== null
                    && ($scope$posS = this.mark()) !== null
                    && this.regexAccept(String.raw`(?:\&)`, "", $$dpth + 1, $$cr) !== null
                    && ($scope$posE = this.mark()) !== null
                    && this.matchos($$dpth + 1, $$cr) !== null
                    && ($scope$dataExp = this.matchDE($$dpth + 1, $$cr)) !== null
                    && (($scope$dataExpMore = this.matchDE1($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = new DE1_3($scope$posS, $scope$posE, $scope$dataExp, $scope$dataExpMore);
                }
                return $$res;
            });
    }
    public matchDE1_4($$dpth: number, $$cr?: ErrorTracker): Nullable<DE1_4> {
        return this.run<DE1_4>($$dpth,
            () => {
                let $scope$posS: Nullable<PosInfo>;
                let $scope$posE: Nullable<PosInfo>;
                let $scope$dataExp: Nullable<DE>;
                let $scope$dataExpMore: Nullable<Nullable<DE1>>;
                let $$res: Nullable<DE1_4> = null;
                if (true
                    && this.matchos($$dpth + 1, $$cr) !== null
                    && ($scope$posS = this.mark()) !== null
                    && this.regexAccept(String.raw`(?:\|)`, "", $$dpth + 1, $$cr) !== null
                    && ($scope$posE = this.mark()) !== null
                    && this.matchos($$dpth + 1, $$cr) !== null
                    && ($scope$dataExp = this.matchDE($$dpth + 1, $$cr)) !== null
                    && (($scope$dataExpMore = this.matchDE1($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = new DE1_4($scope$posS, $scope$posE, $scope$dataExp, $scope$dataExpMore);
                }
                return $$res;
            });
    }
    public matchDE1_5($$dpth: number, $$cr?: ErrorTracker): Nullable<DE1_5> {
        return this.run<DE1_5>($$dpth,
            () => {
                let $scope$posS: Nullable<PosInfo>;
                let $scope$posE: Nullable<PosInfo>;
                let $scope$dataExp: Nullable<DE>;
                let $scope$dataExpMore: Nullable<Nullable<DE1>>;
                let $$res: Nullable<DE1_5> = null;
                if (true
                    && this.matchos($$dpth + 1, $$cr) !== null
                    && ($scope$posS = this.mark()) !== null
                    && this.regexAccept(String.raw`(?:\=)`, "", $$dpth + 1, $$cr) !== null
                    && ($scope$posE = this.mark()) !== null
                    && this.matchos($$dpth + 1, $$cr) !== null
                    && ($scope$dataExp = this.matchDE($$dpth + 1, $$cr)) !== null
                    && (($scope$dataExpMore = this.matchDE1($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = new DE1_5($scope$posS, $scope$posE, $scope$dataExp, $scope$dataExpMore);
                }
                return $$res;
            });
    }
    public matchDE1_6($$dpth: number, $$cr?: ErrorTracker): Nullable<DE1_6> {
        return this.run<DE1_6>($$dpth,
            () => {
                let $scope$posS: Nullable<PosInfo>;
                let $scope$posE: Nullable<PosInfo>;
                let $scope$dataExp: Nullable<DE>;
                let $scope$dataExpMore: Nullable<Nullable<DE1>>;
                let $$res: Nullable<DE1_6> = null;
                if (true
                    && this.matchos($$dpth + 1, $$cr) !== null
                    && ($scope$posS = this.mark()) !== null
                    && this.regexAccept(String.raw`(?:\!\=)`, "", $$dpth + 1, $$cr) !== null
                    && ($scope$posE = this.mark()) !== null
                    && this.matchos($$dpth + 1, $$cr) !== null
                    && ($scope$dataExp = this.matchDE($$dpth + 1, $$cr)) !== null
                    && (($scope$dataExpMore = this.matchDE1($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = new DE1_6($scope$posS, $scope$posE, $scope$dataExp, $scope$dataExpMore);
                }
                return $$res;
            });
    }
    public matchDE1_7($$dpth: number, $$cr?: ErrorTracker): Nullable<DE1_7> {
        return this.run<DE1_7>($$dpth,
            () => {
                let $scope$posS: Nullable<PosInfo>;
                let $scope$posE: Nullable<PosInfo>;
                let $scope$dataExp: Nullable<DE>;
                let $scope$dataExpMore: Nullable<Nullable<DE1>>;
                let $$res: Nullable<DE1_7> = null;
                if (true
                    && this.matchos($$dpth + 1, $$cr) !== null
                    && ($scope$posS = this.mark()) !== null
                    && this.regexAccept(String.raw`(?:>\=)`, "", $$dpth + 1, $$cr) !== null
                    && ($scope$posE = this.mark()) !== null
                    && this.matchos($$dpth + 1, $$cr) !== null
                    && ($scope$dataExp = this.matchDE($$dpth + 1, $$cr)) !== null
                    && (($scope$dataExpMore = this.matchDE1($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = new DE1_7($scope$posS, $scope$posE, $scope$dataExp, $scope$dataExpMore);
                }
                return $$res;
            });
    }
    public matchDE1_8($$dpth: number, $$cr?: ErrorTracker): Nullable<DE1_8> {
        return this.run<DE1_8>($$dpth,
            () => {
                let $scope$posS: Nullable<PosInfo>;
                let $scope$posE: Nullable<PosInfo>;
                let $scope$dataExp: Nullable<DE>;
                let $scope$dataExpMore: Nullable<Nullable<DE1>>;
                let $$res: Nullable<DE1_8> = null;
                if (true
                    && this.matchos($$dpth + 1, $$cr) !== null
                    && ($scope$posS = this.mark()) !== null
                    && this.regexAccept(String.raw`(?:<\=)`, "", $$dpth + 1, $$cr) !== null
                    && ($scope$posE = this.mark()) !== null
                    && this.matchos($$dpth + 1, $$cr) !== null
                    && ($scope$dataExp = this.matchDE($$dpth + 1, $$cr)) !== null
                    && (($scope$dataExpMore = this.matchDE1($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = new DE1_8($scope$posS, $scope$posE, $scope$dataExp, $scope$dataExpMore);
                }
                return $$res;
            });
    }
    public matchDE1_9($$dpth: number, $$cr?: ErrorTracker): Nullable<DE1_9> {
        return this.run<DE1_9>($$dpth,
            () => {
                let $scope$posS: Nullable<PosInfo>;
                let $scope$posE: Nullable<PosInfo>;
                let $scope$dataExp: Nullable<DE>;
                let $scope$dataExpMore: Nullable<Nullable<DE1>>;
                let $$res: Nullable<DE1_9> = null;
                if (true
                    && this.matchos($$dpth + 1, $$cr) !== null
                    && ($scope$posS = this.mark()) !== null
                    && this.regexAccept(String.raw`(?:>)`, "", $$dpth + 1, $$cr) !== null
                    && ($scope$posE = this.mark()) !== null
                    && this.matchos($$dpth + 1, $$cr) !== null
                    && ($scope$dataExp = this.matchDE($$dpth + 1, $$cr)) !== null
                    && (($scope$dataExpMore = this.matchDE1($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = new DE1_9($scope$posS, $scope$posE, $scope$dataExp, $scope$dataExpMore);
                }
                return $$res;
            });
    }
    public matchDE1_10($$dpth: number, $$cr?: ErrorTracker): Nullable<DE1_10> {
        return this.run<DE1_10>($$dpth,
            () => {
                let $scope$posS: Nullable<PosInfo>;
                let $scope$posE: Nullable<PosInfo>;
                let $scope$dataExp: Nullable<DE>;
                let $scope$dataExpMore: Nullable<Nullable<DE1>>;
                let $$res: Nullable<DE1_10> = null;
                if (true
                    && this.matchos($$dpth + 1, $$cr) !== null
                    && ($scope$posS = this.mark()) !== null
                    && this.regexAccept(String.raw`(?:<)`, "", $$dpth + 1, $$cr) !== null
                    && ($scope$posE = this.mark()) !== null
                    && this.matchos($$dpth + 1, $$cr) !== null
                    && ($scope$dataExp = this.matchDE($$dpth + 1, $$cr)) !== null
                    && (($scope$dataExpMore = this.matchDE1($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = new DE1_10($scope$posS, $scope$posE, $scope$dataExp, $scope$dataExpMore);
                }
                return $$res;
            });
    }
    public matchDE1_11($$dpth: number, $$cr?: ErrorTracker): Nullable<DE1_11> {
        return this.run<DE1_11>($$dpth,
            () => {
                let $scope$posS: Nullable<PosInfo>;
                let $scope$posE: Nullable<PosInfo>;
                let $scope$dataExp: Nullable<DE>;
                let $scope$dataExpMore: Nullable<Nullable<DE1>>;
                let $$res: Nullable<DE1_11> = null;
                if (true
                    && this.matchos($$dpth + 1, $$cr) !== null
                    && ($scope$posS = this.mark()) !== null
                    && this.regexAccept(String.raw`(?:\:)`, "", $$dpth + 1, $$cr) !== null
                    && ($scope$posE = this.mark()) !== null
                    && this.matchos($$dpth + 1, $$cr) !== null
                    && ($scope$dataExp = this.matchDE($$dpth + 1, $$cr)) !== null
                    && (($scope$dataExpMore = this.matchDE1($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = new DE1_11($scope$posS, $scope$posE, $scope$dataExp, $scope$dataExpMore);
                }
                return $$res;
            });
    }
    public matchDE1_12($$dpth: number, $$cr?: ErrorTracker): Nullable<DE1_12> {
        return this.run<DE1_12>($$dpth,
            () => {
                let $scope$posS: Nullable<PosInfo>;
                let $scope$func: Nullable<Infix>;
                let $scope$posE: Nullable<PosInfo>;
                let $scope$dataExp: Nullable<DE>;
                let $scope$dataExpMore: Nullable<Nullable<DE1>>;
                let $$res: Nullable<DE1_12> = null;
                if (true
                    && this.matchos($$dpth + 1, $$cr) !== null
                    && ($scope$posS = this.mark()) !== null
                    && ($scope$func = this.matchInfix($$dpth + 1, $$cr)) !== null
                    && ($scope$posE = this.mark()) !== null
                    && this.matchos($$dpth + 1, $$cr) !== null
                    && ($scope$dataExp = this.matchDE($$dpth + 1, $$cr)) !== null
                    && (($scope$dataExpMore = this.matchDE1($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = new DE1_12($scope$posS, $scope$func, $scope$posE, $scope$dataExp, $scope$dataExpMore);
                }
                return $$res;
            });
    }
    public matchDE1_13($$dpth: number, $$cr?: ErrorTracker): Nullable<DE1_13> {
        return this.run<DE1_13>($$dpth,
            () => {
                let $scope$objects: Nullable<DE1_$0[]>;
                let $scope$dataExpMore: Nullable<Nullable<DE1>>;
                let $$res: Nullable<DE1_13> = null;
                if (true
                    && ($scope$objects = this.loop<DE1_$0>(() => this.matchDE1_$0($$dpth + 1, $$cr), 0, -1)) !== null
                    && (($scope$dataExpMore = this.matchDE1($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = new DE1_13($scope$objects, $scope$dataExpMore);
                }
                return $$res;
            });
    }
    public matchDE1_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<DE1_$0> {
        return this.run<DE1_$0>($$dpth,
            () => {
                let $scope$pos: Nullable<PosInfo>;
                let $scope$dataExp: Nullable<DE>;
                let $$res: Nullable<DE1_$0> = null;
                if (true
                    && ($scope$pos = this.mark()) !== null
                    && this.matchos($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:,)`, "", $$dpth + 1, $$cr) !== null
                    && this.matchos($$dpth + 1, $$cr) !== null
                    && ($scope$dataExp = this.matchDE($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.DE1_$0, pos: $scope$pos, dataExp: $scope$dataExp};
                }
                return $$res;
            });
    }
    public matchTypeName($$dpth: number, $$cr?: ErrorTracker): Nullable<TypeName> {
        return this.run<TypeName>($$dpth,
            () => {
                let $scope$name: Nullable<Name>;
                let $$res: Nullable<TypeName> = null;
                if (true
                    && ($scope$name = this.matchName($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new TypeName($scope$name);
                }
                return $$res;
            });
    }
    public matchName($$dpth: number, $$cr?: ErrorTracker): Nullable<Name> {
        return this.run<Name>($$dpth,
            () => {
                let $scope$nameString: Nullable<NameString>;
                let $$res: Nullable<Name> = null;
                if (true
                    && ($scope$nameString = this.matchNameString($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new Name($scope$nameString);
                }
                return $$res;
            });
    }
    public matchNameString($$dpth: number, $$cr?: ErrorTracker): Nullable<NameString> {
        return this.choice<NameString>([
            () => this.matchNameString_1($$dpth + 1, $$cr),
            () => this.matchNameString_2($$dpth + 1, $$cr),
        ]);
    }
    public matchNameString_1($$dpth: number, $$cr?: ErrorTracker): Nullable<NameString_1> {
        return this.run<NameString_1>($$dpth,
            () => {
                let $scope$prefix: Nullable<NameString_$0>;
                let $$res: Nullable<NameString_1> = null;
                if (true
                    && ($scope$prefix = this.matchNameString_$0($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new NameString_1($scope$prefix);
                }
                return $$res;
            });
    }
    public matchNameString_2($$dpth: number, $$cr?: ErrorTracker): Nullable<NameString_2> {
        return this.run<NameString_2>($$dpth,
            () => {
                let $scope$final: Nullable<[NameChar, ...NameChar[]]>;
                let $$res: Nullable<NameString_2> = null;
                if (true
                    && ($scope$final = this.loopPlus<NameChar>(() => this.matchNameChar($$dpth + 1, $$cr))) !== null
                ) {
                    $$res = new NameString_2($scope$final);
                }
                return $$res;
            });
    }
    public matchNameString_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<NameString_$0> {
        return this.run<NameString_$0>($$dpth,
            () => {
                let $scope$pre: Nullable<NameChar[]>;
                let $scope$dot: Nullable<string>;
                let $scope$post: Nullable<NameString>;
                let $$res: Nullable<NameString_$0> = null;
                if (true
                    && ($scope$pre = this.loop<NameChar>(() => this.matchNameChar($$dpth + 1, $$cr), 0, -1)) !== null
                    && ($scope$dot = this.regexAccept(String.raw`(?:\.)`, "", $$dpth + 1, $$cr)) !== null
                    && ($scope$post = this.matchNameString($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.NameString_$0, pre: $scope$pre, dot: $scope$dot, post: $scope$post};
                }
                return $$res;
            });
    }
    public matchNameChar($$dpth: number, $$cr?: ErrorTracker): Nullable<NameChar> {
        return this.run<NameChar>($$dpth,
            () => {
                let $scope$char: Nullable<string>;
                let $$res: Nullable<NameChar> = null;
                if (true
                    && ($scope$char = this.regexAccept(String.raw`(?:[a-zA-Z0-9_])`, "", $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new NameChar($scope$char);
                }
                return $$res;
            });
    }
    public matchInfix($$dpth: number, $$cr?: ErrorTracker): Nullable<Infix> {
        return this.run<Infix>($$dpth,
            () => {
                let $scope$char: Nullable<[string, ...string[]]>;
                let $$res: Nullable<Infix> = null;
                if (true
                    && ($scope$char = this.loopPlus<string>(() => this.regexAccept(String.raw`(?:[\*\+\=\-<>\!\&\\|])`, "", $$dpth + 1, $$cr))) !== null
                ) {
                    $$res = new Infix($scope$char);
                }
                return $$res;
            });
    }
    public matchws($$dpth: number, $$cr?: ErrorTracker): Nullable<ws> {
        return this.loop<ws_$0>(() => this.matchws_$0($$dpth + 1, $$cr), 0, -1);
    }
    public matchws_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<ws_$0> {
        return this.choice<ws_$0>([
            () => this.matchws_$0_1($$dpth + 1, $$cr),
            () => this.matchws_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchws_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<ws_$0_1> {
        return this.matchsp($$dpth + 1, $$cr);
    }
    public matchws_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<ws_$0_2> {
        return this.matchlb($$dpth + 1, $$cr);
    }
    public matchos($$dpth: number, $$cr?: ErrorTracker): Nullable<os> {
        return this.loop<os_$0>(() => this.matchos_$0($$dpth + 1, $$cr), 0, -1);
    }
    public matchos_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<os_$0> {
        return this.choice<os_$0>([
            () => this.matchos_$0_1($$dpth + 1, $$cr),
            () => this.matchos_$0_2($$dpth + 1, $$cr),
            () => this.matchos_$0_3($$dpth + 1, $$cr),
        ]);
    }
    public matchos_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<os_$0_1> {
        return this.regexAccept(String.raw`(?: )`, "", $$dpth + 1, $$cr);
    }
    public matchos_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<os_$0_2> {
        return this.regexAccept(String.raw`(?:\t)`, "", $$dpth + 1, $$cr);
    }
    public matchos_$0_3($$dpth: number, $$cr?: ErrorTracker): Nullable<os_$0_3> {
        return this.regexAccept(String.raw`(?:\v)`, "", $$dpth + 1, $$cr);
    }
    public matchsp($$dpth: number, $$cr?: ErrorTracker): Nullable<sp> {
        return this.loopPlus<sp_$0>(() => this.matchsp_$0($$dpth + 1, $$cr));
    }
    public matchsp_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<sp_$0> {
        return this.choice<sp_$0>([
            () => this.matchsp_$0_1($$dpth + 1, $$cr),
            () => this.matchsp_$0_2($$dpth + 1, $$cr),
            () => this.matchsp_$0_3($$dpth + 1, $$cr),
        ]);
    }
    public matchsp_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<sp_$0_1> {
        return this.regexAccept(String.raw`(?: )`, "", $$dpth + 1, $$cr);
    }
    public matchsp_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<sp_$0_2> {
        return this.regexAccept(String.raw`(?:\t)`, "", $$dpth + 1, $$cr);
    }
    public matchsp_$0_3($$dpth: number, $$cr?: ErrorTracker): Nullable<sp_$0_3> {
        return this.regexAccept(String.raw`(?:\v)`, "", $$dpth + 1, $$cr);
    }
    public matchlb($$dpth: number, $$cr?: ErrorTracker): Nullable<lb> {
        return this.loopPlus<lb_$0>(() => this.matchlb_$0($$dpth + 1, $$cr));
    }
    public matchlb_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<lb_$0> {
        return this.choice<lb_$0>([
            () => this.matchlb_$0_1($$dpth + 1, $$cr),
            () => this.matchlb_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchlb_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<lb_$0_1> {
        return this.regexAccept(String.raw`(?:\n)`, "", $$dpth + 1, $$cr);
    }
    public matchlb_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<lb_$0_2> {
        return this.regexAccept(String.raw`(?:\r\n)`, "", $$dpth + 1, $$cr);
    }
    public test(): boolean {
        const mrk = this.mark();
        const res = this.matchAWNRoot(0);
        const ans = res !== null;
        this.reset(mrk);
        return ans;
    }
    public parse(): ParseResult {
        const mrk = this.mark();
        const res = this.matchAWNRoot(0);
        if (res)
            return {ast: res, errs: []};
        this.reset(mrk);
        const rec = new ErrorTracker();
        this.clearMemos();
        this.matchAWNRoot(0, rec);
        const err = rec.getErr()
        return {ast: res, errs: err !== null ? [err] : []}
    }
    public mark(): PosInfo {
        return this.pos;
    }
    // @ts-ignore: loopPlus may not be called
    private loopPlus<T>(func: $$RuleType<T>): Nullable<[T, ...T[]]> {
        return this.loop(func, 1, -1) as Nullable<[T, ...T[]]>;
    }
    private loop<T>(func: $$RuleType<T>, lb: number, ub: number): Nullable<T[]> {
        const mrk = this.mark();
        const res: T[] = [];
        while (ub === -1 || res.length < ub) {
            const preMrk = this.mark();
            const t = func();
            if (t === null || this.pos.overallPos === preMrk.overallPos) {
                break;
            }
            res.push(t);
        }
        if (res.length >= lb) {
            return res;
        }
        this.reset(mrk);
        return null;
    }
    private run<T>($$dpth: number, fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn()
        if (res !== null)
            return res;
        this.reset(mrk);
        return null;
    }
    // @ts-ignore: choice may not be called
    private choice<T>(fns: Array<$$RuleType<T>>): Nullable<T> {
        for (const f of fns) {
            const res = f();
            if (res !== null) {
                return res;
            }
        }
        return null;
    }
    private regexAccept(match: string, mods: string, dpth: number, cr?: ErrorTracker): Nullable<string> {
        return this.run<string>(dpth,
            () => {
                const reg = new RegExp(match, "y" + mods);
                const mrk = this.mark();
                reg.lastIndex = mrk.overallPos;
                const res = this.tryConsume(reg);
                if(cr) {
                    cr.record(mrk, res, {
                        kind: "RegexMatch",
                        // We substring from 3 to len - 1 to strip off the
                        // non-capture group syntax added as a WebKit workaround
                        literal: match.substring(3, match.length - 1),
                        negated: this.negating,
                    });
                }
                return res;
            });
    }
    private tryConsume(reg: RegExp): Nullable<string> {
        const res = reg.exec(this.input);
        if (res) {
            let lineJmp = 0;
            let lind = -1;
            for (let i = 0; i < res[0].length; ++i) {
                if (res[0][i] === "\n") {
                    ++lineJmp;
                    lind = i;
                }
            }
            this.pos = {
                overallPos: reg.lastIndex,
                line: this.pos.line + lineJmp,
                offset: lind === -1 ? this.pos.offset + res[0].length : (res[0].length - lind - 1)
            };
            return res[0];
        }
        return null;
    }
    // @ts-ignore: noConsume may not be called
    private noConsume<T>(fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn();
        this.reset(mrk);
        return res;
    }
    // @ts-ignore: negate may not be called
    private negate<T>(fn: $$RuleType<T>): Nullable<boolean> {
        const mrk = this.mark();
        const oneg = this.negating;
        this.negating = !oneg;
        const res = fn();
        this.negating = oneg;
        this.reset(mrk);
        return res === null ? true : null;
    }
    // @ts-ignore: Memoise may not be used
    private memoise<K>(rule: $$RuleType<K>, memo: Map<number, [Nullable<K>, PosInfo]>): Nullable<K> {
        const $scope$pos = this.mark();
        const $scope$memoRes = memo.get($scope$pos.overallPos);
        if(this.memoSafe && $scope$memoRes !== undefined) {
        this.reset($scope$memoRes[1]);
        return $scope$memoRes[0];
        }
        const $scope$result = rule();
        if(this.memoSafe)
        memo.set($scope$pos.overallPos, [$scope$result, this.mark()]);
        return $scope$result;
    }
    private match$EOF(et?: ErrorTracker): Nullable<{kind: ASTKinds.$EOF}> {
        const res: {kind: ASTKinds.$EOF} | null = this.finished() ? { kind: ASTKinds.$EOF } : null;
        if(et)
            et.record(this.mark(), res, { kind: "EOF", negated: this.negating });
        return res;
    }
}
export function parse(s: string): ParseResult {
    const p = new Parser(s);
    return p.parse();
}
export interface ParseResult {
    ast: Nullable<AWNRoot>;
    errs: SyntaxErr[];
}
export interface PosInfo {
    readonly overallPos: number;
    readonly line: number;
    readonly offset: number;
}
export interface RegexMatch {
    readonly kind: "RegexMatch";
    readonly negated: boolean;
    readonly literal: string;
}
export type EOFMatch = { kind: "EOF"; negated: boolean };
export type MatchAttempt = RegexMatch | EOFMatch;
export class SyntaxErr {
    public pos: PosInfo;
    public expmatches: MatchAttempt[];
    constructor(pos: PosInfo, expmatches: MatchAttempt[]) {
        this.pos = pos;
        this.expmatches = [...expmatches];
    }
    public toString(): string {
        return `Syntax Error at line ${this.pos.line}:${this.pos.offset}. Expected one of ${this.expmatches.map(x => x.kind === "EOF" ? " EOF" : ` ${x.negated ? 'not ': ''}'${x.literal}'`)}`;
    }
}
class ErrorTracker {
    private mxpos: PosInfo = {overallPos: -1, line: -1, offset: -1};
    private regexset: Set<string> = new Set();
    private pmatches: MatchAttempt[] = [];
    public record(pos: PosInfo, result: any, att: MatchAttempt) {
        if ((result === null) === att.negated)
            return;
        if (pos.overallPos > this.mxpos.overallPos) {
            this.mxpos = pos;
            this.pmatches = [];
            this.regexset.clear()
        }
        if (this.mxpos.overallPos === pos.overallPos) {
            if(att.kind === "RegexMatch") {
                if(!this.regexset.has(att.literal))
                    this.pmatches.push(att);
                this.regexset.add(att.literal);
            } else {
                this.pmatches.push(att);
            }
        }
    }
    public getErr(): SyntaxErr | null {
        if (this.mxpos.overallPos !== -1)
            return new SyntaxErr(this.mxpos, this.pmatches);
        return null;
    }
}