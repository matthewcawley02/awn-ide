AWNRoot := ws block=Block* $

//in a block, each entry must be separated by a linebreak, optional spacing at the start
//because each entry must be delimited with a linebreak, an extra line is required at the end of the doc currently

Block :=
	  'INCLUDES:' include=Include+
	| 'include' include=Include
	| 'TYPES:' type=Type+
	| 'VARIABLES:' var=ConVar+
	| 'CONSTANTS:' const=ConVar+
	| 'FUNCTIONS:' func=Function+
	| 'PROCESSES:' proc=Process+
	| 'proc' proc=Process

Include := sp name=Name lb

Type := sp typeName=TypeName typeExprW={'\=' typeExpr=TE }? lb

ConVar :=
	  sp typeExpr=TE sp nameFirst=Name namesMore={',' name=Name}* lb
	| sp name=Name '\: ' typeExpr=TE lb

Function :=
	  sp name=Name '\: ' typeExpr=TE lb
	| sp name=Infix '\: ' binTypeExpr=BTE lb

Process :=
	  sp name=Name '\(' nameFirst=Name? namesMore={',' name=Name}* '\)' '\:\=' lb sp proc=SPE lb
	| sp name=Name '\:\=' proc=SPE lb

//============
// TYPE EXPRESSIONS
//============

TE := '\(' typeExpr=TE '\)' typeExprMore=TE1?
	.typetype = string{
		return "brackets"
	}
	| 'Pow' '\(' typeExpr=TE '\)' typeExprMore=TE1?
	.typetype = string{
		return "pow"
	}
	| '\[' typeExpr=TE '\]' typeExprMore=TE1?
	.typetype = string{
		return "list"
	}
	| typename=TypeName typeExprMore=TE1?
	.typetype = string{
		return "name"
	}

TE1 := '\-\>' typeExpr=TE typeExprMore=TE1?
	.typetype = string{
		return "function"
	}
	| '\+->' typeExpr=TE typeExprMore=TE1?
	.typetype = string{
		return "part_function"
	}
	| {' x ' typeExpr=TE}* typeExprMore=TE1?
	.typetype = string{
		return "product"
	}


// for l x r
//	.exprList = TE[]{
//		const l = [left]
//        l.push(...right.map(r => r.typeExpr));
//       return l
//	}

BTE :=
	  left=BTE_AUX ' x ' right=BTE_AUX '->' typeExpr=TE
	| left=BTE_AUX ' x ' right=BTE_AUX '\+->' typeExpr=TE

BTE_AUX :=
	  name=TypeName
	.typetype = string {
		return "name"
	}
	| '\(' typeExpr=TE '\)'
	.typetype = string {
		return "brackets"
	}
	| 'Pow' '\(' typeExpr=TE '\)'
	.typetype = string {
		return "pow"
	}
	| '\[' typeExpr=TE '\]'
	.typetype = string {
		return "list"
	}

//==================
// SP EXPRESSIONS
//==================

SPE :=
	  '\[' dataExp=DE '\]' proc=SPE procMore=SPE1?
	.procType = string {
		return "guard"
	}
	| '\[\[' name=Name dataExpList={'\[' dataExp=DE '\]' }* ':=' dataExpAssignment=DE '\]\]' lb sp proc=SPE procMore=SPE1?
	.procType = string {
		return "assignment"
	}
	| 'unicast' '\(' dataExpL=DE ', ' dataExpR=DE '\)' '.' procL=SPE lb sp '>' procR=SPE procMore=SPE1?
	.procType = string {
		return "unicast"
	}
	| 'broadcast' '\(' dataExp=DE '\)' '.' lb sp proc=SPE procMore=SPE1?
	.procType = string {
		return "broadcast"
	}
	| 'groupcast' '\(' dataExpL=DE ', ' dataExpR=DE '\)' '.' lb sp proc=SPE procMore=SPE1?
	.procType = string {
		return "groupcast"
	}
	| 'send' '\(' dataExp=DE '\)' '.' lb sp proc=SPE procMore=SPE1?
	.procType = string {
		return "send"
	}
	| 'deliver' '\(' dataExp=DE '\)' '.' lb sp proc=SPE procMore=SPE1?
	.procType = string {
		return "deliver"
	}
	| 'receive' '\(' name=Name dataExpList={ '\[' dataExp=DE '\]' }* '\)' '.' lb sp proc=SPE procMore=SPE1?
	.procType = string {
		return "receive"
	}
	| '\(' proc=SPE '\)' procMore=SPE1?
	.procType = string {
		return "brackets"
	}
	| name=Name '\(' dataExpFirst=DE? dataExpW={',' dataExp=DE}+ '\)' procMore=SPE1?
	.procType = string {
		return "call"
	}
	| name=Name procMore=SPE1?
	.procType = string {
		return "name"
	}

SPE1 := lb sp '\+' proc=SPE procMore=SPE1?
.procType = string {
		return "choice"
	}

//===============
// DATA EXPRESSIONS
//===============

//currently have not implemented the "DB brack" ones

DE :=
	  '{' dataExp=DE '}' dataExpMore=DE1?
	.dataExpType = string {
		return "singleton"
	}
	| '{' '\(' name=Name ',' dataExpLeft=DE '\)' '|' dataExpRight=DE '}' dataExpMore=DE1?
	.dataExpType = string {
		return "partial"
	}
	| '{' name=Name '|' dataExpRight=DE '}' dataExpMore=DE1?
	.dataExpType = string {
		return "set"
	}
	| 'lambda ' name=Name '.' dataExp=DE dataExpMore=DE1?
	.dataExpType = string {
		return "lambda"
	}
	| 'forall ' name=Name '.' dataExp=DE dataExpMore=DE1?
	.dataExpType = string {
		return "forall"
	}
	| 'exists ' name=Name '.' dataExp=DE dataExpMore=DE1?
	.dataExpType = string {
		return "exists"
	}
	| '\(' dataExp=DE '\)' dataExpMore=DE1?
	.dataExpType = string {
		return "brackets"
	}
	| name=Name dataExpMore=DE1?
	.dataExpType = string {
		return "name"
	}

DE1 := 
	  sp dataExp=DE dataExpMore=DE1?
	  .dataExpType = string {
		return "function"
	}
	| dataExpW={',' dataExp=DE}+ dataExpMore=DE1?
	.dataExpType = string {
		return "tuple"
	}
	| '->' dataExp=DE dataExpMore=DE1?
	.dataExpType = string {
		return "implicates"
	}
	| '<->' dataExp=DE dataExpMore=DE1?
	.dataExpType = string {
		return "iff"
	}
	| '&' dataExp=DE dataExpMore=DE1?
	.dataExpType = string {
		return "and"
	}
	| '|' dataExp=DE dataExpMore=DE1?
	.dataExpType = string {
		return "or"
	}
	| '=' dataExp=DE dataExpMore=DE1?
	.dataExpType = string {
		return "eq"
	}
	| '!=' dataExp=DE dataExpMore=DE1?
	.dataExpType = string {
		return "neq"
	}
	| '>=' dataExp=DE dataExpMore=DE1?
	.dataExpType = string {
		return "gtreq"
	}
	| '<=' dataExp=DE dataExpMore=DE1?
	.dataExpType = string {
		return "leseq"
	}
	| '>' dataExp=DE dataExpMore=DE1?
	.dataExpType = string {
		return "gtr"
	}
	| '<' dataExp=DE dataExpMore=DE1?
	.dataExpType = string {
		return "les"
	}
	| func=Infix dataExp=DE dataExpMore=DE1?
	.dataExpType = string {
		return "infix"
	}


//=============
//  BASIC
//=============

// In the original grammar, some checking (through RATS functions) is done to differentiate
// between different kinds of Infix, and different kinds of Name. Currently, I have all infixes
// as 'Infix', and for Names have 'Name' and 'TypeName', which are currenlty identical. The
// grammar uses them for different things, so I'll keep them separate to make things easier later
// when I am hopefully able to split them up.

TypeName := name=Name
	.value = string {return name.value}

Name := nameString=NameString 
	.value = string {return nameString.value}

NameString := prefix={pre=NameChar* dot='\.' post=NameString} 
	.value = string {
		return prefix.pre.map(NameChar => NameChar.value).join('') + '.' + prefix.post.value
	}
	| final=NameChar+
	.value = string{
		return final.map(NameChar=> NameChar.value).join('')
	}

NameChar := char='[a-zA-Z0-9]' //simplified for now
	.value = string{return char}

Infix := char='[\*\+-<\=>\!\&|\\]+' //Currently "InfixOps"
	.value = string{return char}

ws := {sp | lb}* 						//any whitespace

sp := {' ' | '\t' | '\v'}+				//1 or more spaces/tabs

lb := {'\n' | '\r\n'}+					//1 or more linebreaks 	