AWNRoot := ws block=Block* ws $

//in a block, each entry must be separated by a linebreak, optional spacing at the start
//because each entry must be delimited with a linebreak, an extra line is required at the end of the doc (i get around this by adding a newline to the end of the doc before parsing)

Block :=
	  os pos=@ 'INCLUDES:' include=Include+
	| os pos=@ 'include' include=Include
	| os pos=@ 'TYPES:' type=Type+
	| os pos=@ 'VARIABLES:' var=ConVar+
	| os pos=@ 'CONSTANTS:' const=ConVar+
	| os pos=@ 'FUNCTIONS:' func=Function+
	| os pos=@ 'PROCESSES:' proc=Process+
	| os pos=@ 'proc' proc=Process
	| os pos=@ 'ALIASES:' alias=Alias+

Include := ws posS=@ name=Name posE=@ os lb

Type := ws posS=@ typeName=TypeName posE=@ typeExprW={os '\=' os typeExpr=TE }? os lb

ConVar :=
	  ws typeExpr=TE sp posS=@ nameFirst=Name posE=@ namesMore={ws ',' ws posS=@ name=Name posE=@ }* os lb .typeDeclaredFirst = boolean{return true}
	| ws posS=@ name=Name posE=@ os '\:' os typeExpr=TE os lb .typeDeclaredFirst = boolean{return false}

Function :=
	  ws posS=@ name=Name posE=@ os '\:' os typeExpr=TE os lb
	| ws posS=@ name=Infix posE=@ os '\:' os typeExpr=TE os lb

Process :=
	  ws pos1S=@ nameFirst=Name pos1E=@ os '\(' os pos2S=@ argFirst=Name? pos2E=@ argsMore={',' os posS=@ name=Name posE=@ }* os '\)' os '\:\=' ws proc=SPE os lb
	| ws posS=@ name=Name posE=@ os '\:\=' ws proc=SPE os lb

Alias :=
	  ws pos1S=@ nameFirst=Name pos1E=@ os '\:\=' sp '\"' os pos2S=@ argFirst=Name? os pos2E=@ argsMore={',' os posS=@ name=Name posE=@ }* os '\"' os lb
	| ws posS=@ name=Name posE=@ os '\:\=' sp '\"' os dataExp=DE os '\"' os lb

//============
// TYPE EXPRESSIONS
//============

TE := '\(' os typeExpr=TE os '\)' typeExprMore=TE1?
	.typetype = string{
		return "brackets"
	}
	| pos=@ 'Pow' '\(' os typeExpr=TE os '\)' typeExprMore=TE1?
	.typetype = string{
		return "pow"
	}
	| '\[' os typeExpr=TE os '\]' typeExprMore=TE1?
	.typetype = string{
		return "list"
	}
	| posS=@ typename=TypeName posE=@ typeExprMore=TE1?
	.typetype = string{
		return "name"
	}

TE1 := os '\->' os typeExpr=TE typeExprMore=TE1?
	.typetype = string{
		return "function"
	}
	| os '\+->' os typeExpr=TE typeExprMore=TE1?
	.typetype = string{
		return "part_function"
	}
	| products={pos=@ ' x ' typeExpr=TE}* typeExprMore=TE1?
	.typetype = string{
		return "product"
	}


//==================
// SP EXPRESSIONS
//==================

SPE :=
	  '\[' os posDES=@ dataExp=DE posDEE=@ os '\]' ws proc=SPE procMore=SPE1?
	.procType = string {
		return "guard"
	}
	| '\[\[' os posA=@ name=Name os posB=@ ves={'\[' os posS=@ de=DE posE=@ os '\]'}* os '\:\=' os posC=@ dataExpAssignment=DE posD=@ os '\]\]' ws proc=SPE procMore=SPE1?
	.procType = string {
		return "assignment"
	}
	| pos=@ 'unicast' '\(' os posA=@ dataExpL=DE os posB=@ '\;' os dataExpR=DE posC=@ '\)' os '.' ws proc=SPE procMore=SPE1?
	.procType = string {
		return "unicast"
	} 
	| pos=@ 'broadcast' '\(' os posA=@ dataExp=DE os posB=@ '\)' os '.' ws proc=SPE procMore=SPE1?
	.procType = string {
		return "broadcast"
	}
	| pos=@ 'groupcast' '\(' os posA=@ dataExpL=DE os posB=@ '\;' os dataExpR=DE posC=@ '\)' os '.' ws proc=SPE procMore=SPE1?
	.procType = string {
		return "groupcast"
	}
	| pos=@ 'send' '\(' os posA=@ dataExp=DE os posB=@ '\)' os '.' ws proc=SPE procMore=SPE1?
	.procType = string {
		return "send"
	}
	| pos=@ 'deliver' '\(' os posA=@ dataExp=DE os posB=@ '\)' os '.' ws proc=SPE procMore=SPE1?
	.procType = string {
		return "deliver"
	}
	| pos=@ 'receive' '\(' os posS=@ name=Name os posE=@ dataExpList={ '\[' os dataExp=DE os '\]' }* '\)' os '.' ws proc=SPE procMore=SPE1?
	.procType = string {
		return "receive"
	}
	| '\(' ws proc=SPE ws '\)' procMore=SPE1?
	.procType = string {
		return "brackets"
	}
	| posS=@ !'unicast' !'broadcast' !'groupcast' !'send' !'deliver' !'receive' name=Name posE=@ os '\(' os dataExpFirst=DE? dataExpW={',' os dataExp=DE}* os '\)' procMore=SPE1?
	.procType = string {
		return "call"
	}

SPE1 := ws '\+' ws proc=SPE procMore=SPE1?
.procType = string {
		return "choice"
	}

//===============
// DATA EXPRESSIONS
//===============

DE :=
	'{' os '\(' os posS=@ name=Name os posE=@ ',' os dataExpLeft=DE os '\)' os '\|' os DEPosS=@ dataExpRight=DE DEPosE=@ os '}' dataExpMore=DE1?
	.dataExpType = string {
		return "partial"
	}
	| '{' os posS=@ name=Name os posE=@ '\|' os DEPosS=@ dataExpRight=DE DEPosE=@ os '}' dataExpMore=DE1?
	.dataExpType = string {
		return "set"
	}
	| '{' os dataExp=DE os '}' dataExpMore=DE1?
	.dataExpType = string {
		return "singleton"
	}
	| pos=@ 'lambda ' os posS=@ name=Name os '.' os dataExp=DE dataExpMore=DE1?
	.dataExpType = string {
		return "lambda"
	}
	| pos=@ 'forall ' os posS=@ name=Name os '.' os dataExp=DE dataExpMore=DE1?
	.dataExpType = string {
		return "forall"
	}
	| pos=@ 'exists ' os posS=@ name=Name os '.' os dataExp=DE dataExpMore=DE1?
	.dataExpType = string {
		return "exists"
	}
	| posN=@ name={Name | Infix} posNEnd=@ os '\(' os posS=@ dataExp=DE posE=@ os '\)' dataExpMore=DE1?
	.dataExpType = string {
		return "function"
	}
	| '\(' os dataExp=DE os '\)' dataExpMore=DE1?
	.dataExpType = string {
		return "brackets"
	}
	| posS=@ name=Name posE=@ dataExpMore=DE1?
	.dataExpType = string {
		return "name"
	}

DE1 := 
	os posS=@ '\->' posE=@ os dataExp=DE dataExpMore=DE1?
	.dataExpType = string {
		return "implicates"
	}
	| os posS=@ '<\->' posE=@ os dataExp=DE dataExpMore=DE1?
	.dataExpType = string {
		return "iff"
	}
	| os posS=@ '\&' posE=@ os dataExp=DE dataExpMore=DE1?
	.dataExpType = string {
		return "and"
	}
	| os posS=@ '\|' posE=@ os dataExp=DE dataExpMore=DE1?
	.dataExpType = string {
		return "or"
	}
	| os posS=@ '\=' posE=@ os dataExp=DE dataExpMore=DE1?
	.dataExpType = string {
		return "eq"
	}
	| os posS=@ '\!\=' posE=@ os dataExp=DE dataExpMore=DE1?
	.dataExpType = string {
		return "neq"
	}
	| os posS=@ '>\=' posE=@ os dataExp=DE dataExpMore=DE1?
	.dataExpType = string {
		return "gtreq"
	}
	| os posS=@ '<\=' posE=@ os dataExp=DE dataExpMore=DE1?
	.dataExpType = string {
		return "leseq"
	}
	| os posS=@ '>' posE=@ os dataExp=DE dataExpMore=DE1?
	.dataExpType = string {
		return "gtr"
	}
	| os posS=@ '<' posE=@ os dataExp=DE dataExpMore=DE1?
	.dataExpType = string {
		return "les"
	}
	| os posS=@ '\:' posE=@ os dataExp=DE dataExpMore=DE1?
	.dataExpType = string {
		return "col"
	}
	| os posS=@ func=Infix posE=@ os dataExp=DE dataExpMore=DE1?
	.dataExpType = string {
		return "infix"
	}
	| objects={pos=@ os ',' os dataExp=DE}* dataExpMore=DE1?
	.dataExpType = string {
		return "tuple"
	}


//=============
//  BASIC
//=============

TypeName := name=Name
	.value = string {return name.value}

Name := nameString=NameString 
	.value = string {return nameString.value}

NameString := prefix={pre=NameChar* dot='\.' post=NameString} 
	.value = string {
		return prefix.pre.map(NameChar => NameChar.value).join('') + '.' + prefix.post.value
	}
	| final=NameChar+
	.value = string{
		return final.map(NameChar=> NameChar.value).join('')
	}

NameChar := char='[a-zA-Z0-9_/-]'
	.value = string{return char}

// their infix also allows colon ':', but this is incompatible because infix function definitions are ended with a colon.
// I've allowed exactly 1 colon on its own to be an infix function, because they have such a function in types.awn.

Infix := char={{ '\*' | '\+' | '\=' | '\-' | '<' | '>' | '\!' | '\&' | '\\' | '|' }+ | '\:'[1] }
	.value = string{return char.join("")}

ws := {sp | lb}* 						//any whitespace

os := {' ' | '\t' | '\v'}*				//0 or more spaces/tabs (used for optional spacing within a line)

sp := {' ' | '\t' | '\v'}+				//1 or more spaces/tabs

lb := {'\n' | '\r\n'}+					//1 or more linebreaks 	