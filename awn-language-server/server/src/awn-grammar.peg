//series of blocks, any whitespace is allowed between blocks
AWN := ws {Block ws}* $

//for each entry in a block, optional spacing before, and each entry must be separated by a linebreak
//the block must also end in a linebreak (meaning you need an extra line at the end of the document currently)

Block :=
	  'INCLUDES:' sp? Include {lb sp? Include}* lb
	| 'include' sp? Include lb
	| 'TYPES:' sp? Type {lb sp? Type}* lb
	| 'VARIABLES:' sp? ConVar {lb sp? ConVar}* lb
	| 'CONSTANTS:' sp? ConVar {lb sp? ConVar}* lb
	| 'FUNCTIONS:' sp? Function {lb sp? Function}* lb
	| 'PROCESSES:' sp? Process {lb sp? Process}* lb
	| 'proc' sp? Process lb

Include := Name // could change this later to specifically be a filepath

Type := TypeName {sp '\=' sp TE}?

ConVar :=
	  TE sp Name {',' Name}*
	| Name ':' TE

Function :=
	  Name ':' sp TE
	| Infix ':' sp BTE

Process :=
	  Name '\(' Name? {',' Name}* '\)' ':=' lb sp? SPE
	| Name ':=' SPE

//============
// TYPE EXPRESSIONS
//============

TE :=
	  TypeName
	| TE {'x' TE}*
	| TE '-\>' TE
	| TE '\+->' TE
	| 'Pow' '\(' TE '\)'
	| '\[' TE '\]'
	| '\(' TE '\)'

BTE :=
	  BTE_AUX 'x' BTE_AUX '->' TE
	| BTE_AUX 'x' BTE_AUX '\+->' TE

BTE_AUX :=
	  TypeName
	| '\(' TE '\)'
	| 'Pow' '\(' TE '\)'
	| '\[' TE '\]'

//==================
// SP EXPRESSIONS
//==================

SPE :=
	  Name '\(' DE? {',' DE}+ '\)'
	| Name
	| '\[' DE '\]' SPE
	| '\[\[' Name {'\[' DE '\]' }* ':=' DE '\]\]' lb SPE
	| SPE lb '\+' SPE
	| 'unicast' '\(' DE ',' DE '\)' '.' SPE lb '>' SPE
	| 'broadcast' '\(' DE '\)' '.' lb SPE
	| 'groupcast' '\(' DE ',' DE '\)' '.' lb SPE
	| 'send' '\(' DE '\)' '.' lb SPE
	| 'deliver' '\(' DE '\)' '.' lb SPE
	| 'receive' '\(' Name { '\[' DE '\]' }* '\)' '.' lb SPE
	| '\(' SPE '\)'

//===============
// DATA EXPRESSIONS
//===============

//currently have not implemented the "DB brack" ones

DE :=
	  Name
	| DE sp DE
	| DE {',' DE}+
	| '{' DE '}'
	| '{' Name '|' DE '}'
	| '{' '\(' Name ',' DE '\)' '|' DE '}'
	| 'lambda' Name '.' sp DE
	| 'forall' Name '.' sp DE
	| 'exists' Name '.' sp DE
	| DE '->' DE
	| DE '<->' DE
	| DE '&' DE
	| DE '|' DE
	| DE '=' DE
	| DE '!=' DE
	| DE '>=' DE
	| DE '<=' DE
	| DE '>' DE
	| DE '<' DE
	| DE Infix DE
	| '\(' DE '\)'


//=============
//  BASIC
//=============

// In the original grammar, some checking (through RATS functions) is done to differentiate
// between different kinds of Infix, and different kinds of Name. Currently, I have all infixes
// as 'Infix', and for Names have 'Name' and 'TypeName', which are currenlty identical. The
// grammar uses them for different things, so I'll keep them separate to make things easier later
// when I am hopefully able to split them up.

TypeName := Name

Name := NameString | '\!' | '\[\]'

NameString := {NameChar* '.' NameString} | NameChar+

NameChar := '[a-zA-Z0-9]' //simplified for now

Infix := '[\*\+-\:<\=>\!\&|\\]+' //Currently "InfixOps"

ws := {sp | lb}* 						//any whitespace

sp := '\s+'								//spacing on a line

lb := {'\n' | '\r\n'}+					//linebreak