//This version of the AWN grammar contains no left-recursion refactoring or AST creation code inserts
//It is intended to be more readable

AWNRoot := ws Block* $

Block :=
	  'INCLUDES:' Include+
	| 'include' Include
	| 'TYPES:' Type+
	| 'VARIABLES:' ConVar+
	| 'CONSTANTS:' ConVar+
	| 'FUNCTIONS:' Function+
	| 'PROCESSES:' Process+
	| 'proc' Process

Include := sp Name lb   			//could change this later to specifically be a filepath

Type := sp TypeName { '\=' TE }? lb

ConVar :=
	  TE sp Name {',' Name}*		//multiple of same type
	| Name '\:' TE					//singular

Function :=
	  Name '\:' sp TE				//non-binary
	| Infix '\:' sp BTE				//binary

Process :=
	  Name '\(' Name? {',' Name}* '\)' ':=' lb sp? SPE	//process with args
	| Name ':=' SPE lb									//process no args

//============
// TYPE EXPRESSIONS
//============

TE := TypeName
	| TE {'x' TE}*					//cartesian product
	| TE '-\>' TE					//function
	| TE '\+->' TE					//partial function
	| 'Pow' '\(' TE '\)'			//powerset
	| '\[' TE '\]'					//list
	| '\(' TE '\)'					//brackets

BTE :=
	  BTE_AUX ' x ' BTE_AUX '->' TE
	| BTE_AUX ' x ' BTE_AUX '\+->' TE

BTE_AUX :=
	  TypeName
	| '\(' TE '\)'
	| 'Pow' '\(' TE '\)'
	| '\[' TE '\]'

//==================
// SP EXPRESSIONS
//==================

SPE :=
	  Name '\(' DE? {',' DE}+ '\)'								//call with args
	| Name														//call no args
	| '\[' DE '\]' SPE											//guard
	| '\[\[' Name {'\[' DE '\]' }* ':=' DE '\]\]' lb SPE		//assignment
	| SPE lb '\+' SPE											//choice
	| 'unicast' '\(' DE ',' DE '\)' '.' SPE lb '>' SPE			//unicast
	| 'broadcast' '\(' DE '\)' '.' lb SPE						//broadcast
	| 'groupcast' '\(' DE ',' DE '\)' '.' lb SPE				//groupcast
	| 'send' '\(' DE '\)' '.' lb SPE							//send
	| 'deliver' '\(' DE '\)' '.' lb SPE							//deliver
	| 'receive' '\(' Name { '\[' DE '\]' }* '\)' '.' lb SPE		//receive
	| '\(' SPE '\)'												//brackets

//===============
// DATA EXPRESSIONS
//===============

DE :=
	  Name
	| DE sp DE
	| DE {',' DE}+								//tuple
	| '{' DE '}'								//singleton
	| '{' Name '|' DE '}'						//set construction
	| '{' '\(' Name ',' DE '\)' '|' DE '}'		//partial set construction
	| 'lambda' Name '.' sp DE
	| 'forall' Name '.' sp DE
	| 'exists' Name '.' sp DE
	| DE '->' DE
	| DE '<->' DE
	| DE '&' DE
	| DE '|' DE
	| DE '=' DE
	| DE '!=' DE
	| DE '>=' DE
	| DE '<=' DE
	| DE '>' DE
	| DE '<' DE
	| DE Infix DE
	| '\(' DE '\)'


//=============
//  BASIC
//=============

// In the original grammar, some checking (through RATS functions) is done to differentiate
// between different kinds of Infix, and different kinds of Name. Currently, I have all infixes
// as 'Infix', and for Names have 'Name' and 'TypeName', which are currenlty identical. The
// grammar uses them for different things, so I'll keep them separate to make things easier later
// when I am hopefully able to split them up.

TypeName := Name

Name := NameString | '\!'| '\[\]'

NameString := {NameChar* '\.' NameString} | NameChar+

NameChar := ='[a-zA-Z0-9_]'

Infix := '[\*\+-<\=>\!\&|\\\:]+'

ws := {sp | lb}* 						//any whitespace

sp := {' ' | '\t' | '\v'}+				//1 or more spaces/tabs

lb := {'\n' | '\r\n'}+					//1 or more linebreaks 	