TYPES:
  Bool                                   -- Boolean
  Nat                                    -- Natural numbers
  TIME                                   -- Timestamps                                       -- see Annex B.1.1
  MSG                                    -- Messages                                         -- see B.1.1
  IP                                     -- Node identifiers                                 -- see B.1.1
  LSAHDR = IP x TIME                     -- LSA headers                                      -- see Annex B.1.2
  LSA = IP x TIME x Pow(IP)              -- Router-LSAs                                      -- see Annex B.1.2
  LSDB = IP +-> TIME x Pow(IP)           -- Link state databases                             -- see Annex B.1.3
  NBR  = IP x TIME                       -- Neighbour Structures                             -— see Annex B.1.3
  NBRS = IP +-> TIME                     -- Neighbour Lists                                  -— see Annex B.1.3

VARIABLES:
  MSG 	       msg, realmsg
  IP           ip, sip
  TIME         now, hello_t
  LSA          lsa, lsa0
  LSAHDR       lhdr
  LSDB         lsdb, lsas
  NBR          nbr, n
  NBRS         nbrs
  Pow(IP)      ips, dips
  Pow(LSAHDR)  lsa_hdrs
  [MSG]        msgs

CONSTANTS:
  TIME         0                         -- Smallest Timestamp
  TIME         hello_intvl               -- Hello Interval
  TIME         rtdead_intvl              -- Router Dead Interval
  LSDB         emptySet                  -- Empty link state database                        -- Process 7, Lines 2 and 4
  [MSG]        emptyList                 -- Empty message queue                              -- Process 8, Lines 3

FUNCTIONS:
  append:      MSG x [MSG] -> [MSG]      -- Appends a new element to a queue                 -- Process 6, Lines 2 and 8
  deadNBRS:    NBRS x TIME -> NBRS       -- Returns a set of inactive neighbours             -- see Annex B.1.5
  dbd:         Pow(LSAHDR) x IP -> MSG   -- Creates a DBD message                            -- see Annex B.1.4
  head:        [MSG] +-> MSG             -- Returns the oldest element in a queue            -- Process 6, Lines 6
  hello:       Pow(IP) x IP -> MSG       -- Creates a HELLO message                          -- see Annex B.1.4
  hdr:         LSA -> LSAHDR             -- Returns the header of an a LSA                   -- see Annex B.1.2
  install:     LSDB x LSDB -> LSDB       -- Updates a nodes' LSDB with a given set of LSAs   -- see Annex B.1.5
  newLSA:      IP x TIME x NBRS -> LSA   -- Generates a new LSA                              -- see Annex B.1.5
  newNBR:      NBRS x IP +-> NBRS        -- Inserts a new neighbour structure                -- see Annex B.1.5
  nbrExist:    NBRS x IP -> Bool         -- Checks existence of a neighbour structure entry  -- see Annex B.1.5
  req:         Pow(LSAHDR) x IP -> MSG   -- Creates an LSR message                           -- see Annex B.1.4
  setINACTT:   NBRS x IP x TIME -> NBRS  -- Updates the inactivity timer of an entry         -- see Annex B.1.5
  sndmsg:      MSG x Pow(IP) -> MSG      -- Creates an outgoing message                      -- see Annex B.1.4
  tail:        [MSG] +-> [MSG]           -- Removes the oldest element from a queue          -- Process 6, Lines 6
  upd:         LSDB x IP -> MSG          -- Creates an LSU message                           -- see Annex B.1.4
  <= :         LSAHDR x LSAHDR -> Bool
  pi_1:        NBR -> IP
  >= :         TIME x TIME -> Bool
  + :          TIME x TIME -> TIME
  - :          NBRS x NBRS -> NBRS       -- Set-theoretic difference on NBRS

-- NOTATION
-- "->"         total function
-- "+->"        partial function (syntax taken from B and Z)
-- "x"          cross product
-- "Pow(Type)"  powerset over type Type
-- "[Type]"     lists of type Type

-- DEFAULT FUNCTIONS
--  !    :           Bool -> Bool                  -- negation
--  &    :           Bool x Bool -> Bool           -- conjunction
--  |    :           Bool x Bool -> Bool           -- disjunction
--  ->   :           Bool x Bool -> Bool           -- implication
--  <->  :           Bool x Bool -> Bool           -- bi-implication
--  =    :           Type x Type -> Bool           -- equality for type Type
-- !=    :           Type x Type -> Bool           -- inequality
-- isElem:           Type x Pow(Type) -> Bool      -- is an element of

-- DEFAULT VARIABLE
--  TIME       now
